#!/usr/bin/make -f

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

tarballname = mozilla

configopts += $(ADD_OPTIONS)
optimize_add = 
envflags =

static:=n
logging:=n
debug:=n
perfmetr:=n
jprof:=n
vfp:=n
oprof:=n
microbembed:=y
microbembedlibxul:=n
nolibxul:=n
MOZCONFIG_NAME:=configs/mozconfig
MOZCONFIG_LEV:=b3
syscairo:=y
svgport:=n
canvas:=y
config:=gtk2

btree = build-tree
tarballs = tarballs

export QUILT_PATCHES=$(CURDIR)/debian/patches
QUILT_PATCHES:=$(CURDIR)/debian/patches
STAMP_DIR:=$(CURDIR)/stampdir
STAMPDIR_LOG:=$(CURDIR)/stampdir/log
STAMPDIR_PATCH:=$(CURDIR)/stampdir/log/patch
CUR_DEB_DIR:=$(CURDIR)/debian
series_file:=series.$(config)

GCCVER=.gcc$(shell gcc --version | grep gcc | cut -d ' ' -f 3)

ifneq (,$(findstring parallel,$(DEB_BUILD_OPTIONS)))
    PARALLEL_JOBS := $(shell echo $(DEB_BUILD_OPTIONS) | \
    sed -e 's/.*parallel=\([0-9]\+\).*/\1/')
ifeq ($(DEB_BUILD_OPTIONS),$(PARALLEL_JOBS))
	PARALLEL_JOBS := $(shell if [ -f /proc/cpuinfo ]; \
	then echo `cat /proc/cpuinfo | grep 'processor' | wc -l`; \
	else echo 1; fi)
endif
NJOBS:=-j$(shell echo $(PARALLEL_JOBS)*2+1 | bc)
endif

ifneq (,$(findstring CodeSourcery,$(shell gcc --version)))
GCCENV:=.cs
export CSGCC=1
	optimize_add += -DCSGCC=1
else
export CSGCC=0
endif

ifneq (,$(findstring sbox,$(shell gcc --version)))
TABLET:=.tablet
endif

prefix=/usr

srcdir = $(tarballname)
builddir = $(btree)/mozilla

bldstr:=

buildobjdir = "@TOPSRCDIR@/obj-@CONFIG_GUESS@"

# Here can be defined autogen.sh, Ex: PRE_CONF_SCRIPT = ./autogen.sh &&
PRE_CONF_SCRIPT = autoconf &&

DEB_HOST_ARCH          ?= $(shell dpkg-architecture -qDEB_HOST_ARCH)
DEB_HOST_ARCH_OS       ?= $(shell dpkg-architecture -qDEB_HOST_ARCH_OS)
DEB_HOST_GNU_TYPE      ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)

CFLAGS += -g

ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
	CFLAGS += -O0
else
	CFLAGS += -O2
endif

ifneq (,$(findstring static,$(DEB_BUILD_OPTIONS)))
static:=y
else
static:=$(static)
endif

ifneq (,$(findstring jprof,$(DEB_BUILD_OPTIONS)))
jprof:=y
else
jprof:=$(jprof)
endif

ifneq (,$(findstring oprof,$(DEB_BUILD_OPTIONS)))
oprof:=y
else
oprof:=$(oprof)
endif

ifneq (,$(findstring syscairo,$(DEB_BUILD_OPTIONS)))
syscairo:=y
else
syscairo:=$(syscairo)
endif

ifneq (,$(findstring svgport,$(DEB_BUILD_OPTIONS)))
svgport:=y
else
svgport:=$(svgport)
endif

ifneq (,$(findstring canvas,$(DEB_BUILD_OPTIONS)))
canvas:=y
else
canvas:=$(canvas)
endif

ifneq (,$(findstring perfmetr,$(DEB_BUILD_OPTIONS)))
perfmetr:=y
else
perfmetr:=$(perfmetr)
endif

ifneq (,$(findstring b1,$(MEMBED_LEVEL)))
MOZCONFIG_LEV:=b1
endif

ifneq (,$(findstring b2,$(MEMBED_LEVEL)))
MOZCONFIG_LEV:=b2
endif

ifneq (,$(findstring b3,$(MEMBED_LEVEL)))
MOZCONFIG_LEV:=b3
endif

ifneq (,$(findstring ext,$(MEMBED_LEVEL)))
MOZCONFIG_LEV:=
MOZCONFIG_NAME:=$(EXT_MOZCONFIG)
endif

ifneq (,$(findstring config,$(DEB_BUILD_OPTIONS)))
	config:= $(shell echo $(DEB_BUILD_OPTIONS) | sed -e 's/.*config=\([0-9a-zA-Z]\+\).*/\1/')
endif

MOZCONFIG_LEV:=$(config)
series_file:=series.$(config)

ifneq (,$(findstring patches,$(DEB_BUILD_OPTIONS)))
	series_file:=series.$(shell echo $(DEB_BUILD_OPTIONS) | sed -e 's/.*patches=\([0-9a-zA-Z]\+\).*/\1/')
endif

ifneq (,$(findstring microbembed,$(DEB_BUILD_OPTIONS)))
microbembed:=y
else
microbembed:=$(microbembed)
endif

ifneq (,$(findstring microbembedlibxul,$(DEB_BUILD_OPTIONS)))
microbembedlibxul:=y
else
microbembedlibxul:=$(microbembedlibxul)
endif

ifneq (,$(findstring nolibxul,$(DEB_BUILD_OPTIONS)))
nolibxul:=y
else
nolibxul:=$(nolibxul)
endif

ifneq (,$(findstring cflagsopt,$(DEB_BUILD_OPTIONS)))
optimize_add = $(CFLAGS)
endif

ifneq (,$(findstring vfp,$(DEB_BUILD_OPTIONS)))
vfp:=y
else
vfp:=$(vfp)
endif

ifneq (,$(findstring debug,$(DEB_BUILD_OPTIONS)))
debug:=y
bldstr:=dbg-
else
debug:=$(debug)
endif

ifneq (,$(findstring logging,$(DEB_BUILD_OPTIONS)))
logging:=y
bldstr:=$(bldstr)log-
else
logging:=$(logging)
endif

ifeq ($(static),y)
	configopts += --disable-shared --enable-static --enable-js-static-build
else
	configopts += --disable-static --enable-shared --disable-js-static-build
endif

ifeq ($(perfmetr),y)
	configopts += --enable-reflow-perf --enable-perf-metrics
endif

ifeq ($(microbembed),y)
configopts += --enable-microbembed
else
# Simple GtkMozEmbed (sg) no new Microb Component in build
bldstr:=$(bldstr)sg-
endif

ifeq ($(microbembedlibxul),n)
configopts += --enable-microbembeddyn
bldstr:=$(bldstr)edyn-
endif

ifeq ($(vfp),y)
optimize_add += -mfloat-abi=softfp -mfpu=vfp
endif

buildobjdir = "@TOPSRCDIR@/../obj-"$(bldstr)build$(MOZCONFIG_LEV)

ifneq (,$(findstring $(DEB_HOST_ARCH),arm armel))
	configopts += --disable-elf-dynstr-gc
	optimize_add += -march=armv5t -DJS_THREADED_INTERP=0
#	envflags += CFLAGS="-march=armv6 " CXXFLAGS=$$CFLAGS HOST_CFLAGS="-march=armv5t" HOST_CXXFLAGS=$$HOST_CFLAGS
else
ifneq ($(TABLET),.tablet)
	configopts += --enable-elf-dynstr-gc
endif
endif
bldstr:=$(bldstr)$(DEB_HOST_ARCH)-

ifeq ($(TABLET),.tablet)
bldstr:=$(bldstr)sb-
	configopts += --enable-moz-hildon
endif

ifeq ($(debug),y)
#Hack for tablet compiler
ifeq ($(TABLET),.tablet)
ifeq ($(GCCENV),.cs)
ifeq (,$(findstring $(DEB_HOST_ARCH),arm armel))
	optimize_add += -O1
endif
endif
endif
	configopts += --disable-strip --enable-debug --enable-debugger-info-modules
ifeq ($(nolibxul),y)
bldstr:=$(bldstr)nolibxul-
	configopts += --disable-libxul
endif
endif
#ifeq (,$(findstring $(DEB_HOST_ARCH),arm armel))
#endif

ifeq ($(logging),y)
	configopts += --enable-logging  --enable-logrefcnt
else
	configopts += --disable-logging --disable-logrefcnt
endif

ifeq ($(GCCENV),.cs)
	optimize_add +=  -finline-functions -fno-unit-at-a-time -finline-limit=64
endif

ifeq ($(jprof),y)
	configopts += --disable-debug --enable-debugger-info-modules --disable-strip --enable-jprof
bldstr:=$(bldstr)jpr-
endif

ifneq (,$(findstring strip,$(DEB_BUILD_OPTIONS)))
	CFLAGS += -O2 -g0
	configopts += --enable-strip
bldstr:=$(bldstr)strip-
endif

ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
	CFLAGS += -O0
bldstr:=$(bldstr)noopt-
endif

ifeq ($(oprof),y)
	optimize_add +=  -fno-omit-frame-pointer
bldstr:=$(bldstr)opr-
endif

ifeq ($(syscairo),y)
	configopts += --enable-system-cairo
bldstr:=$(bldstr)syscairo-
endif

ifeq ($(svgport),y)
	configopts += --enable-svg
bldstr:=$(bldstr)svgport-
endif

ifeq ($(canvas),y)
	configopts += --enable-canvas
endif

	configopts += --enable-optimize=\"$(CFLAGS) $(optimize_add) \"

# shared library versions, option 1
version=$(shell dpkg-parsechangelog | grep ^Version:.* | cut -d ' ' -f 2 | cut -d ':' -f 2 | cut -d '-' -f 1)
packagename=$(shell dpkg-parsechangelog | grep ^Source:.* | cut -d ' ' -f 2)
PKGVERSION      := $(shell dpkg-parsechangelog | grep ^Version:.* | cut -d ' ' -f 2)
MOZ_VERSION=1.0.1

major=2

cross_compiling:=no
CROSS_HOST_PREFIX=
ifneq ($(DEB_BUILD_GNU_TYPE), $(DEB_HOST_GNU_TYPE))
cross_compiling:=yes
endif
ifneq (,$(findstring cross_compiling,$(DEB_BUILD_OPTIONS)))
cross_compiling:=yes
endif
ifneq (,$(findstring Slind,$(shell gcc --version)))
cross_compiling:=yes
endif

ifneq ($(cross_compiling),yes)
	HBT_OPT = --build=$(DEB_HOST_GNU_TYPE)
XPT_LINK:=$(CUR_DEB_DIR)/tmp/usr/lib/microb-engine/xpt_link
else
	HBT_OPT = --target=$(DEB_HOST_GNU_TYPE)
	CROSS_FLAGS = 
bldstr:=$(bldstr)cross-
XPT_LINK:=$(btree)/obj-$(bldstr)build$(MOZCONFIG_LEV)/dist/host/bin/host_xpt_link
endif

unpack: unpack-stamp
unpack-stamp:
	mkdir -p $(builddir)
	mkdir -p $(STAMPDIR_LOG)
	#Small hack for old X11R6 directory
	# uudecode source files
	for str in `find ./debian/ -name "*.uu"`;do\
      if [ -s $$str ]; then \
            uudecode -o $$(echo $$str | sed 's/\.uu//g') $$str; rm $$str;\
      fi ;\
	done
	if [ -d $(CURDIR)/tarballs ]; then echo 'Tarballs is here ;)';else tar -xvvzf ../microb-engine_$(version)*.tar.gz -C ./; mv $$(find -name "tarballs" -type d) ./; rmdir microb-engine_*; fi
	#Unpacking source tree version=$(version) GCCENV=$(GCCENV) ENV=$(TABLET) GCCVER=$(GCCVER) CSGCC=$(CSGCC) Jobs $(NJOBS), DBO=$(DEB_BUILD_OPTIONS), CONF_OPT=$(config)
	tar -zxvf $(CURDIR)/tarballs/$(srcdir).tar.gz -C $(btree) > /dev/null
	cp -rf  $(CUR_DEB_DIR)/resources/branding $(builddir)/
	cd $(builddir) && cd toolkit/components/ && ln -sf ../../browser/components/feeds browser-feeds
	cd $(builddir) && for str in `cat $(CURDIR)/tarballs/trunkupdates/series`;do echo; echo Applying trunk update: $$str...; echo; patch -p1 < $(CURDIR)/tarballs/trunkupdates/$$str; done 
ifeq ($(svgport),y)
	cd $(builddir) && cd layout && mv svg svg.back && cp -rf ../../../debian/resources/sandbox/svg_backport/layout/svg ./
	cd $(builddir) && cd content && mv svg svg.back && cp -rf ../../../debian/resources/sandbox/svg_backport/content/svg ./
endif
	touch unpack-stamp

configure: configure-stamp
configure-stamp:
	dh_testdir

	for f in `find debian/ -name "[^c]*.in"`; do \
		sed -e "s/@PACKAGEVERSION@/${PKGVERSION}/g" -e "s/@PACKAGENAME@/${packagename}/g"  $$f > `echo $$f | sed -e "s/\.in//"`; \
	done
	
	#if ! test -e /usr/include/X11; then cd /usr/include && ln -s ../X11R6/include/X11; fi
	#Unpacking source tree version=$(version) GCCENV=$(GCCENV) ENV=$(TABLET) GCCVER=$(GCCVER) CSGCC=$(CSGCC) Jobs $(NJOBS), DBO=$(DEB_BUILD_OPTIONS), CONF_OPT=$(config), cross_compiling=$(cross_compiling)
	cd $(builddir) && $(PRE_CONF_SCRIPT) rm -f ./.mozconfig && cp $(CUR_DEB_DIR)/$(MOZCONFIG_NAME)$(MOZCONFIG_LEV) ./mozconfig
	echo "ac_add_options $(configopts) --prefix=$(prefix) $(HBT_OPT)" >> $(builddir)/mozconfig
	echo "mk_add_options MOZ_OBJDIR=$(buildobjdir)" >> $(builddir)/mozconfig
	echo "mk_add_options MOZ_MAKE_FLAGS=$(NJOBS)" >> $(builddir)/mozconfig
ifeq ($(cross_compiling),yes)
	echo "CROSS_COMPILE=1" >> $(builddir)/mozconfig
	echo "LIBIDL_CONFIG=$(prefix)/$(DEB_HOST_GNU_TYPE)/include/cross-scripts/libIDL-config-2" >> $(builddir)/mozconfig
	echo "HOST_LIBIDL_CONFIG=$(prefix)/bin/libIDL-config-2" >> $(builddir)/mozconfig
endif
	echo "1900000000" >> $(builddir)/config/build_number
	#Small hack touch $(builddir)/toolkit/empty-file
	touch $(builddir)/toolkit/empty-file
	echo "MOZ_APP_VERSION=$(MOZ_VERSION)" >> $(builddir)/mozconfig
	echo "MOZILLA_VERSION=$(MOZ_VERSION)" >> $(builddir)/mozconfig
	cp $(builddir)/mozconfig $(builddir)/mozconfig-$(bldstr)build$(MOZCONFIG_LEV)
	cd $(builddir) && $(envflags) MOZ_APP_VERSION=$(version) MOZILLA_VERSION=$(version) make -f client.mk configure
	touch configure-stamp


build: unpack-stamp patch-stamp configure-stamp build-stamp
build-stamp:
	dh_testdir
	cd $(builddir) && $(envflags) $(MAKE) -f client.mk build
	touch build-stamp

clean: 
	dh_testdir
	dh_testroot

	rm -f build-stamp configure-stamp unpack-stamp patch-stamp
	#Removing object_tree
	-rm -rf $(btree)/mozilla/obj-*
	#Removing unpacked sources
	-rm -rf $(btree)
	rm -f debian/shlibs.local
	chmod a-x debian/patches/*.diff
	rm -rf $(CURDIR)/stampdir
	rm -rf $(CURDIR)/patches
	rm -f $(CURDIR)/.pc
	rm -f $(QUILT_PATCHES)/series
	# uuencode source files
	for str1 in "*.png" "*.gif" "*.tar.gz"; do \
	for str in `find ./debian -name "$$str1"`;do\
      if [ -s $$str ]; then \
            uuencode $$str $$str > $$str.uu; rm $$str;\
      fi ;\
	done; \
	done
	chmod a-x debian/resources/tools/*
	dh_clean

# patch stuff
stampdir_targets+=patch
patch: patch-stamp
patch-stamp:
	mkdir -p stampdir/patches
	echo 2 > stampdir/patches/.version
	mkdir -p stampdir/log
	rm -f .pc
	rm -f patches
	ln -s debian/patches
	chmod a+x debian/resources/tools/*
	ln -s stampdir/patches .pc
	rm -f patches/series && ln -s $(QUILT_PATCHES)/$(series_file) patches/series
	if ! [ `which quilt` ]; then \
		echo "Couldn't find quilt. Please install it or add it to the build-depends for this package."; \
		exit 1; \
	fi; \
	if quilt next; then \
	  echo -n "Applying patches... "; \
	    if cd $(builddir) && rm -f .pc && rm -f patches && ln -s ../../.pc .pc && ln -s ../../patches patches \
	       && quilt push -a -v >  $(STAMPDIR_PATCH); then \
	    echo "successful."; \
	  else \
	    cd $(CURDIR) && quilt next; \
	    echo "failed! (check $(STAMP_DIR)/log/patch for details)";cat $(STAMP_DIR)/log/patch; echo ""; \
	    echo -n "try: perl debian/resources/tools/fixreject.pl "; quilt next; \
	    echo " and sh debian/resources/tools/refresh_patches.sh "; \
	    exit 1; \
	  fi; \
	else \
	  echo "No patches to apply"; \
	fi; \
	>$@

unpatch:
	rm -f $(STAMP_DIR)/patch
	@echo -n "Unapplying patches..."; \
	if [ -e $(STAMP_DIR)/patches/applied-patches ]; then \
	  if test -d $(builddir); then \
	  if cd $(builddir) && quilt pop -a -v > $(STAMPDIR_LOG)/unpatch; then \
	    echo "successful."; \
	  else \
	    echo "failed! (check $(STAMP_DIR)/log/unpatch for details)"; \
	    exit 1; \
	  fi; \
	  fi; \
	else \
	  echo "nothing to do."; \
	fi


install: build
	# Add here commands to install the package into debian/tmp obj-$(bldstr)build$(MOZCONFIG_LEV)
	dh_testdir
	dh_testroot
	dh_clean -k 
	dh_installdirs
	# Add here commands to install the package into debian/tmp
	#Small hack touch $(builddir)/toolkit/empty-file
	touch $(builddir)/toolkit/empty-file
	cd $(builddir) && $(envflags) $(MAKE) -f client.mk install DESTDIR=$(CUR_DEB_DIR)/tmp
	#Show all installed components
ifeq ($(cross_compiling),yes)
	cp -f $(XPT_LINK) $(CUR_DEB_DIR)/tmp/usr/lib/microb-engine/
endif
	find ./debian/tmp/usr/lib
	cp $(btree)/obj-$(bldstr)build$(MOZCONFIG_LEV)/dist/sdk/lib/libxpcomglue_s.a $(CUR_DEB_DIR)/tmp/usr/lib/microb-engine/
	cp $(btree)/obj-$(bldstr)build$(MOZCONFIG_LEV)/dist/sdk/lib/libxpcomglue.a $(CUR_DEB_DIR)/tmp/usr/lib/microb-engine/
	cp $(btree)/obj-$(bldstr)build$(MOZCONFIG_LEV)/dist/sdk/lib/libembed_base_s.a $(CUR_DEB_DIR)/tmp/usr/lib/microb-engine/
	cp $(btree)/obj-$(bldstr)build$(MOZCONFIG_LEV)/dist/sdk/lib/libembed_base_standalone.a $(CUR_DEB_DIR)/tmp/usr/lib/microb-engine/
	cp -rfL $(btree)/obj-$(bldstr)build$(MOZCONFIG_LEV)/dist/public/nss $(CUR_DEB_DIR)/tmp/usr/include/microb-engine/
	cp -rfL $(btree)/obj-$(bldstr)build$(MOZCONFIG_LEV)/dist/include/nspr $(CUR_DEB_DIR)/tmp/usr/include/microb-engine/
	cp -rfL $(btree)/obj-$(bldstr)build$(MOZCONFIG_LEV)/dist/bin/TestGtkEmbed $(CUR_DEB_DIR)/tmp/usr/lib/microb-engine/
	dh_install --sourcedir=$(CUR_DEB_DIR)/tmp --list-missing
	$(XPT_LINK) only_ship_this.xpt $(CUR_DEB_DIR)/microb-engine/usr/lib/microb-engine/components/*.xpt
	rm $(CUR_DEB_DIR)/microb-engine/usr/lib/microb-engine/components/*.xpt
	rm -rf $(CUR_DEB_DIR)/microb-engine-dev/usr/include/microb-engine/nspr
	rm -rf $(CUR_DEB_DIR)/microb-engine-dev/usr/include/microb-engine/nss
	mv only_ship_this.xpt $(CUR_DEB_DIR)/microb-engine/usr/lib/microb-engine/components/tablet.xpt
	perl $(CUR_DEB_DIR)/resources/tools/remove.target.license.pl $(CUR_DEB_DIR)/microb-engine/usr/lib/$(packagename)/chrome
	perl $(CUR_DEB_DIR)/resources/tools/remove.target.license.pl $(CUR_DEB_DIR)/microb-engine/usr/lib/$(packagename)/res


# Build architecture-independent files here.
binary-indep: build install
# We have nothing to do by default.

# Build architecture-dependent files here.
binary-arch: build install
	dh_testdir
	dh_testroot
	dh_link
# names of the packages in control file for which there should be debug packages
	dh_strip $(shell perl -ne 'next unless /Package:\s*(\S+)-dbg/; print " --dbg-package=$$1"' debian/control)
	dh_compress
	dh_fixperms
	dh_makeshlibs -V
	dh_installdeb
	dh_shlibdeps 
	dh_gencontrol
	dh_md5sums
	dh_builddeb

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary install configure

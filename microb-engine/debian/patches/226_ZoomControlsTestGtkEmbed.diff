# Fast controls for testing zoom 
#
--- mozilla/embedding/browser/gtk/tests/TestGtkEmbed.cpp.orig	2007-08-08 12:39:46.000000000 +0300
+++ mozilla/embedding/browser/gtk/tests/TestGtkEmbed.cpp	2007-08-08 13:07:19.000000000 +0300
@@ -61,20 +61,23 @@ typedef struct _TestGtkBrowser {
   GtkWidget  *fileMenu;
   GtkWidget  *fileOpenNewBrowser;
   GtkWidget  *fileStream;
   GtkWidget  *fileClose;
   GtkWidget  *fileQuit;
   GtkWidget  *toolbarHBox;
   GtkWidget  *toolbar;
   GtkWidget  *backButton;
   GtkWidget  *stopButton;
   GtkWidget  *forwardButton;
+  GtkWidget  *zoominButton;
+  GtkWidget  *zoomstdButton;
+  GtkWidget  *zoomoutButton;
   GtkWidget  *reloadButton;
   GtkWidget  *urlEntry;
   GtkWidget  *mozEmbed;
   GtkWidget  *progressAreaHBox;
   GtkWidget  *progressBar;
   GtkWidget  *statusAlign;
   GtkWidget  *statusBar;
   const char *statusMessage;
   int         loadPercent;
   int         bytesLoaded;
@@ -100,20 +103,26 @@ static void            set_browser_visib
 
 static int num_browsers = 0;
 
 // callbacks from the UI
 static void     back_clicked_cb    (GtkButton   *button, 
 				    TestGtkBrowser *browser);
 static void     stop_clicked_cb    (GtkButton   *button,
 				    TestGtkBrowser *browser);
 static void     forward_clicked_cb (GtkButton   *button,
 				    TestGtkBrowser *browser);
+static void     zoomin_clicked_cb  (GtkButton   *button, 
+				    TestGtkBrowser *browser);
+static void     zoomstd_clicked_cb (GtkButton   *button,
+				    TestGtkBrowser *browser);
+static void     zoomout_clicked_cb (GtkButton   *button,
+				    TestGtkBrowser *browser);
 static void     reload_clicked_cb  (GtkButton   *button,
 				    TestGtkBrowser *browser);
 static void     url_activate_cb    (GtkEditable *widget, 
 				    TestGtkBrowser *browser);
 static void     menu_open_new_cb   (GtkMenuItem *menuitem,
 				    TestGtkBrowser *browser);
 static void     menu_stream_cb     (GtkMenuItem *menuitem,
 				    TestGtkBrowser *browser);
 static void     menu_close_cb      (GtkMenuItem *menuitem,
 				    TestGtkBrowser *browser);
@@ -429,20 +438,48 @@ new_gtk_browser(guint32 chromeMask)
 			    browser);
   // new forward button
   browser->forwardButton =
     gtk_toolbar_append_item(GTK_TOOLBAR(browser->toolbar),
 			    "Forward",
 			    "Forward",
 			    "Forward",
 			    0, // XXX replace with icon
 			    GTK_SIGNAL_FUNC(forward_clicked_cb),
 			    browser);
+  // new zoomin button
+  browser->zoominButton =
+    gtk_toolbar_append_item(GTK_TOOLBAR(browser->toolbar),
+			    "z+",
+			    "z+",
+			    "z+",
+			    0, // XXX replace with icon
+			    GTK_SIGNAL_FUNC(zoomin_clicked_cb),
+			    browser);
+  // new zoomstd button
+  browser->zoomstdButton = 
+    gtk_toolbar_append_item(GTK_TOOLBAR(browser->toolbar),
+			    "z0",
+			    "z0",
+			    "z0",
+			    0, // XXX replace with icon
+			    GTK_SIGNAL_FUNC(zoomstd_clicked_cb),
+			    browser);
+  // new zoomout button
+  browser->zoomoutButton =
+    gtk_toolbar_append_item(GTK_TOOLBAR(browser->toolbar),
+			    "z-",
+			    "z-",
+			    "z-",
+			    0, // XXX replace with icon
+			    GTK_SIGNAL_FUNC(zoomout_clicked_cb),
+			    browser);
+
   // new reload button
   browser->reloadButton = 
     gtk_toolbar_append_item(GTK_TOOLBAR(browser->toolbar),
 			    "Reload",
 			    "Reload",
 			    "Reload",
 			    0, // XXX replace with icon
 			    GTK_SIGNAL_FUNC(reload_clicked_cb),
 			    browser);
   // create the url text entry
@@ -638,20 +675,47 @@ stop_clicked_cb (GtkButton *button, Test
   gtk_moz_embed_stop_load(GTK_MOZ_EMBED(browser->mozEmbed));
 }
 
 void
 forward_clicked_cb (GtkButton *button, TestGtkBrowser *browser)
 {
   g_print("forward_clicked_cb\n");
   gtk_moz_embed_go_forward(GTK_MOZ_EMBED(browser->mozEmbed));
 }
 
+static gint zoom_level = 96;
+
+void
+zoomin_clicked_cb (GtkButton *button, TestGtkBrowser *browser)
+{
+  g_print("zoomin_clicked_cb\n");
+  zoom_level += 20;
+  gtk_moz_embed_set_zoom_level(GTK_MOZ_EMBED(browser->mozEmbed), zoom_level, NULL);
+}
+
+void
+zoomstd_clicked_cb (GtkButton *button, TestGtkBrowser *browser)
+{
+  g_print("zoomstd_clicked_cb\n");
+  zoom_level = 96;
+  gtk_moz_embed_set_zoom_level(GTK_MOZ_EMBED(browser->mozEmbed), zoom_level, NULL);
+}
+
+void
+zoomout_clicked_cb (GtkButton *button, TestGtkBrowser *browser)
+{
+  g_print("zoomout_clicked_cb\n");
+  zoom_level -= 20;
+  gtk_moz_embed_set_zoom_level(GTK_MOZ_EMBED(browser->mozEmbed), zoom_level, NULL);
+}
+
+
 void
 reload_clicked_cb  (GtkButton *button, TestGtkBrowser *browser)
 {
   g_print("reload_clicked_cb\n");
   GdkModifierType state = (GdkModifierType)0;
   gint x, y;
   gdk_window_get_pointer(NULL, &x, &y, &state);
   
   gtk_moz_embed_reload(GTK_MOZ_EMBED(browser->mozEmbed),
 		       (state & GDK_SHIFT_MASK) ?

--- mozilla/widget/src/gtk2/nsLookAndFeel.cpp.orig	2007-05-28 11:47:14.000000000 +0300
+++ mozilla/widget/src/gtk2/nsLookAndFeel.cpp	2007-05-31 16:20:02.000000000 +0300
@@ -46,20 +46,21 @@
 #define GDK_COLOR_TO_NS_RGB(c) \
     ((nscolor) NS_RGB(c.red>>8, c.green>>8, c.blue>>8))
 
 nscolor   nsLookAndFeel::sInfoText = 0;
 nscolor   nsLookAndFeel::sInfoBackground = 0;
 nscolor   nsLookAndFeel::sMenuText = 0;
 nscolor   nsLookAndFeel::sMenuHover = 0;
 nscolor   nsLookAndFeel::sMenuHoverText = 0;
 nscolor   nsLookAndFeel::sMenuBackground = 0;
 nscolor   nsLookAndFeel::sButtonBackground = 0;
+nscolor   nsLookAndFeel::sTextDisabled = 0;
 nscolor   nsLookAndFeel::sButtonText = 0;
 nscolor   nsLookAndFeel::sButtonOuterLightBorder = 0;
 nscolor   nsLookAndFeel::sButtonInnerDarkBorder = 0;
 PRUnichar nsLookAndFeel::sInvisibleCharacter = PRUnichar('*');
 
 //-------------------------------------------------------------------------
 //
 // Query interface implementation
 //
 //-------------------------------------------------------------------------
@@ -210,20 +211,24 @@ nsresult nsLookAndFeel::NativeGetColor(c
     case eColor_menutext:
         // menu text
         aColor = sMenuText;
         break;
     case eColor_scrollbar:
         // scrollbar gray area
         aColor = GDK_COLOR_TO_NS_RGB(mStyle->bg[GTK_STATE_ACTIVE]);
         break;
 
     case eColor_threedface:
+        // 3-D face color
+        aColor = sTextDisabled;
+        break;
+
     case eColor_buttonface:
         // 3-D face color
         aColor = sButtonBackground;
         break;
 
     case eColor_buttontext:
         // text on push buttons
         aColor = sButtonText;
         break;
 
@@ -659,20 +664,23 @@ nsLookAndFeel::InitLookAndFeel()
             GDK_COLOR_TO_NS_RGB(style->dark[GTK_STATE_NORMAL]);
     }
 
     gtk_widget_destroy(window);
 
     // invisible character styles
     GtkWidget *entry = gtk_entry_new();
     guint value;
     g_object_get (entry, "invisible-char", &value, NULL);
     sInvisibleCharacter = PRUnichar(value);
+    style = gtk_widget_get_style(entry);
+    if (style)
+        sTextDisabled = GDK_COLOR_TO_NS_RGB(style->bg[GTK_STATE_INSENSITIVE]);
     gtk_widget_destroy(entry);
 }
 
 // virtual
 PRUnichar
 nsLookAndFeel::GetPasswordCharacter()
 {
     return sInvisibleCharacter;
 }
 
--- mozilla/widget/src/gtk2/nsLookAndFeel.h.orig	2006-10-23 23:48:05.000000000 +0300
+++ mozilla/widget/src/gtk2/nsLookAndFeel.h	2007-05-31 16:14:55.000000000 +0300
@@ -61,20 +61,21 @@ protected:
     // Cached colors, we have to create a dummy widget to actually
     // get the style
 
     static nscolor sInfoBackground;
     static nscolor sInfoText;
     static nscolor sMenuBackground;
     static nscolor sMenuText;
     static nscolor sMenuHover;
     static nscolor sMenuHoverText;
     static nscolor sButtonBackground;
+    static nscolor sTextDisabled;
     static nscolor sButtonText;
     static nscolor sButtonOuterLightBorder;
     static nscolor sButtonInnerDarkBorder;
     static PRUnichar sInvisibleCharacter;
 
     static void InitLookAndFeel();
     void InitWidget() {
         mWidget = gtk_invisible_new();
         gtk_object_ref(GTK_OBJECT(mWidget));
         gtk_object_sink(GTK_OBJECT(mWidget));

## 25_entropy.dpatch by Mike Hommey <glandium@debian.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Remove code that called netstat to gain so called entropy. It's pretty
## DP: useless on a Linux system. Thanks Wichert Akkerman. bz#51429.

=== config/autoconf.mk.in
==================================================================
Index: mozilla/config/autoconf.mk.in
===================================================================
--- mozilla.orig/config/autoconf.mk.in
+++ mozilla/config/autoconf.mk.in
@@ -79,16 +79,19 @@
 
 MOZ_CHROME_FILE_FORMAT	= @MOZ_CHROME_FILE_FORMAT@
 
 MOZ_WIDGET_TOOLKIT	= @MOZ_WIDGET_TOOLKIT@
 MOZ_GFX_TOOLKIT		= @MOZ_GFX_TOOLKIT@
 MOZ_X11			= @MOZ_X11@
 
 MOZ_JS_LIBS		   = @MOZ_JS_LIBS@
+ENABLE_JS_BINARY	= @ENABLE_JS_BINARY@
+HAVE_READLINE		= @HAVE_READLINE@
+READLINE_LIBS		= @READLINE_LIBS@
 
 MOZ_DEBUG	= @MOZ_DEBUG@
 MOZ_DEBUG_MODULES = @MOZ_DEBUG_MODULES@
 MOZ_PROFILE_MODULES = @MOZ_PROFILE_MODULES@
 MOZ_DEBUG_ENABLE_DEFS		= @MOZ_DEBUG_ENABLE_DEFS@
 MOZ_DEBUG_DISABLE_DEFS	= @MOZ_DEBUG_DISABLE_DEFS@
 MOZ_DEBUG_FLAGS	= @MOZ_DEBUG_FLAGS@
 MOZ_DEBUG_LDFLAGS=@MOZ_DEBUG_LDFLAGS@
Index: mozilla/config/rules.mk
===================================================================
--- mozilla.orig/config/rules.mk
+++ mozilla/config/rules.mk
@@ -942,17 +942,17 @@
 		mt.exe -NOLOGO -MANIFEST $@.manifest -OUTPUTRESOURCE:$@\;1; \
 		rm -f $@.manifest; \
 	fi
 endif	# MSVC with manifest tool
 else
 ifeq ($(CPP_PROG_LINK),1)
 	$(CCC) $(WRAP_MALLOC_CFLAGS) $(CXXFLAGS) -o $@ $< $(WIN32_EXE_LDFLAGS) $(LDFLAGS) $(LIBS_DIR) $(LIBS) $(OS_LIBS) $(EXTRA_LIBS) $(WRAP_MALLOC_LIB) $(PROFILER_LIBS) $(BIN_FLAGS)
 else
-	$(CC) $(WRAP_MALLOC_CFLAGS) $(CFLAGS) $(OUTOPTION)$@ $< $(WIN32_EXE_LDFLAGS) $(LDFLAGS) $(LIBS_DIR) $(LIBS) $(OS_LIBS) $(EXTRA_LIBS) $(WRAP_MALLOC_LIB) $(PROFILER_LIBS) $(BIN_FLAGS)
+	$(CC) $(WRAP_MALLOC_CFLAGS) $(CFLAGS) $(OUTOPTION)$@ $< $(WIN32_EXE_LDFLAGS) $(LDFLAGS) $(LIBS_DIR) $(LIBS) $(OS_LIBS) $(EXTRA_LIBS) $(WRAP_MALLOC_LIB) $(PROFILER_LIBS) $(BIN_FLAGS) $(PROG_LIBS)
 endif # CPP_PROG_LINK
 endif # WINNT && !GNU_CC
 endif # OS/2 VACPP
 endif # WINCE
 
 ifdef ENABLE_STRIP
 	$(STRIP) $@
 endif
Index: mozilla/configure.in
===================================================================
--- mozilla.orig/configure.in
+++ mozilla/configure.in
@@ -6172,16 +6172,50 @@
 dnl only enable option for ultrasparcs
 if test `echo "$target_os" | grep -c \^solaris 2>/dev/null` = 0 -o \
     "$OS_TEST" != "sun4u"; then
     JS_ULTRASPARC_OPTS=
 fi
 AC_SUBST(JS_ULTRASPARC_OPTS)
 
 dnl ========================================================
+dnl = Enable building of the js standalone binary
+dnl ========================================================
+MOZ_ARG_ENABLE_BOOL(js-binary,
+[  --enable-js-binary      Build the standalone JS program],
+    ENABLE_JS_BINARY=1,
+    ENABLE_JS_BINARY= )
+AC_SUBST(ENABLE_JS_BINARY)
+
+if test -n "$ENABLE_JS_BINARY"; then
+    dnl readline Support
+    dnl ========================================================
+    READLINE_DIR=no
+    MOZ_ARG_WITH_STRING(readline,
+    [  --with-readline[=PFX]
+                              Use libreadline [installed at prefix PFX]],
+        READLINE_DIR=$withval)
+
+    if test -n "${READLINE_DIR}" -a "${READLINE_DIR}" != "no"; then
+        _SAVE_LDFLAGS=$LDFLAGS
+        LDFLAGS="-L${READLINE_DIR}/lib $LDFLAGS"
+        AC_CHECK_LIB(readline, readline, [HAVE_READLINE=1 READLINE_LIBS="-lreadline"],
+           [HAVE_READLINE= READLINE_LIBS=])
+        LDFLAGS=$_SAVE_LDFLAGS
+    fi
+
+    if test "${READLINE_DIR}" -a -d "${READLINE_DIR}" -a "$HAVE_READLINE" = 1; then
+        READLINE_LIBS="-L${READLINE_DIR}/lib ${READLINE_LIBS}"
+    fi
+fi
+
+AC_SUBST(HAVE_READLINE)
+AC_SUBST(READLINE_LIBS)
+
+dnl ========================================================
 dnl =
 dnl = Feature options that require extra sources to be pulled
 dnl =
 dnl ========================================================
 dnl MOZ_ARG_HEADER(Features that require extra sources)
 
 dnl ========================================================
 dnl =
Index: mozilla/js/src/Makefile.in
===================================================================
--- mozilla.orig/js/src/Makefile.in
+++ mozilla/js/src/Makefile.in
@@ -49,16 +49,26 @@
 LIB_IS_C_ONLY	= 1
 GRE_MODULE	= 1
 
 ifeq (,$(filter-out WINNT WINCE,$(OS_ARCH)))
 LIBRARY_NAME	= js$(MOZ_BITS)$(VERSION_NUMBER)
 RESFILE		= js$(MOZ_BITS)40.res
 endif
 
+ifdef ENABLE_JS_BINARY
+SIMPLE_PROGRAMS	= js
+PROG_LIBS	= -L. $(MOZ_JS_LIBS) $(NSPR_LIBS)
+$(SIMPLE_PROGRAMS): $(DLL_PREFIX)$(LIBRARY_NAME)$(DLL_SUFFIX)
+ifdef HAVE_READLINE
+PROG_LIBS	+= $(READLINE_LIBS)
+DEFINES		= -DEDITLINE
+endif
+endif
+
 PACKAGE_FILE = js.pkg
 
 # JavaScript must be built shared, even for static builds, as it is used by
 # other modules which are always built shared. Failure to do so results in
 # the js code getting copied into xpinstall and jsd as well as mozilla-bin,
 # and then the static data cells used for locking no longer work.
 
 ifndef JS_STATIC_BUILD

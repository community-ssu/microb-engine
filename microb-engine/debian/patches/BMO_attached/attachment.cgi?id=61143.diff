## Added API for painting layout without fixed frames or only fixed frames painting
#https://projects.maemo.org/bugzilla/show_bug.cgi?id=127991
diff -r a5442f43df61 layout/base/nsDisplayList.cpp
--- a/layout/base/nsDisplayList.cpp	Wed Aug 12 22:15:56 2009 +0300
+++ b/layout/base/nsDisplayList.cpp	Thu Aug 13 02:13:05 2009 +0300
@@ -71,7 +71,9 @@ nsDisplayListBuilder::nsDisplayListBuild
       mBuildCaret(aBuildCaret),
       mEventDelivery(aIsForEvents),
       mIsAtRootOfPseudoStackingContext(PR_FALSE),
-      mPaintAllFrames(PR_FALSE) {
+      mPaintAllFrames(PR_FALSE),
+      mIsFixedFramesOnly(PR_FALSE),
+      mIsNoFixedFrames(PR_FALSE) {
   PL_InitArenaPool(&mPool, "displayListArena", 1024, sizeof(void*)-1);
 
   nsPresContext* pc = aReferenceFrame->PresContext();
diff -r a5442f43df61 layout/base/nsDisplayList.h
--- a/layout/base/nsDisplayList.h	Wed Aug 12 22:15:56 2009 +0300
+++ b/layout/base/nsDisplayList.h	Thu Aug 13 02:13:05 2009 +0300
@@ -274,7 +274,12 @@ public:
    */
   void MarkFramesForDisplayList(nsIFrame* aDirtyFrame, nsIFrame* aFrames,
                                 const nsRect& aDirtyRect);
-  
+
+  PRBool IsFixedFramesOnly(void) { return mIsFixedFramesOnly; }
+  PRBool IsNoFixedFrames(void) { return mIsNoFixedFrames; }
+  void SetFixedFramesOnly(PRBool aIsFixedFramesOnly) { mIsFixedFramesOnly = aIsFixedFramesOnly; }
+  void SetNoFixedFrames(PRBool aIsNoFixedFrames) { mIsNoFixedFrames = aIsNoFixedFrames; }
+
   /**
    * Allocate memory in our arena. It will only be freed when this display list
    * builder is destroyed. This memory holds nsDisplayItems. nsDisplayItem
@@ -336,6 +341,8 @@ private:
   PRPackedBool                   mIsBackgroundOnly;
   PRPackedBool                   mIsAtRootOfPseudoStackingContext;
   PRPackedBool                   mPaintAllFrames;
+  PRPackedBool                   mIsFixedFramesOnly;
+  PRPackedBool                   mIsNoFixedFrames;
 };
 
 class nsDisplayItem;
diff -r a5442f43df61 layout/base/nsIPresShell.h
--- a/layout/base/nsIPresShell.h	Wed Aug 12 22:15:56 2009 +0300
+++ b/layout/base/nsIPresShell.h	Thu Aug 13 02:13:05 2009 +0300
@@ -747,7 +747,9 @@ public:
   enum {
     RENDER_IS_UNTRUSTED = 0x01,
     RENDER_IGNORE_VIEWPORT_SCROLLING = 0x02,
-    RENDER_CARET = 0x04
+    RENDER_CARET = 0x04,
+    RENDER_NO_FIXED_FRAMES = 0x08,
+    RENDER_FIXED_FRAMES_ONLY = 0x10,
   };
   NS_IMETHOD RenderDocument(const nsRect& aRect, PRUint32 aFlags,
                             nscolor aBackgroundColor,
diff -r a5442f43df61 layout/base/nsPresShell.cpp
--- a/layout/base/nsPresShell.cpp	Wed Aug 12 22:15:56 2009 +0300
+++ b/layout/base/nsPresShell.cpp	Thu Aug 13 02:13:05 2009 +0300
@@ -5247,6 +5249,8 @@ PresShell::RenderDocument(const nsRect& 
     }
 
     builder.SetBackgroundOnly(PR_FALSE);
+    builder.SetNoFixedFrames(aFlags & RENDER_NO_FIXED_FRAMES);
+    builder.SetFixedFramesOnly(aFlags & RENDER_FIXED_FRAMES_ONLY);
     builder.EnterPresShell(rootFrame, rect);
 
     nsresult rv = rootFrame->BuildDisplayListForStackingContext(&builder, rect, &list);   
diff -r a5442f43df61 layout/generic/nsViewportFrame.cpp
--- a/layout/generic/nsViewportFrame.cpp	Wed Aug 12 22:15:56 2009 +0300
+++ b/layout/generic/nsViewportFrame.cpp	Thu Aug 13 02:13:05 2009 +0300
@@ -98,16 +97,28 @@ ViewportFrame::BuildDisplayList(nsDispla
   // mark our visible out-of-flow frames (i.e., the fixed position frames) so
   // that display list construction is guaranteed to recurse into their
   // ancestors.
-  aBuilder->MarkFramesForDisplayList(this, mFixedContainer.GetFirstChild(), aDirtyRect);
+  mIsPaintNonFixedFrames = !aBuilder->IsFixedFramesOnly();
+  mIsPaintFixedFrames = !aBuilder->IsNoFixedFrames();
+  if (!mIsPaintNonFixedFrames && !mIsPaintFixedFrames)
+    return NS_OK;
 
-  nsIFrame* kid = mFrames.FirstChild();
+  if (mIsPaintFixedFrames)
+    aBuilder->MarkFramesForDisplayList(this, mFixedContainer.GetFirstChild(), aDirtyRect);
+
+  nsIFrame* kid = mIsPaintNonFixedFrames ?
+      mFrames.FirstChild() :
+      mFixedContainer.GetFirstChild();
+
   if (!kid)
     return NS_OK;
 
   // make the kid's BorderBackground our own. This ensures that the canvas
   // frame's background becomes our own background and therefore appears
   // below negative z-index elements.
-  return BuildDisplayListForChild(aBuilder, kid, aDirtyRect, aLists);
+  nsresult rv = BuildDisplayListForChild(aBuilder, kid, aDirtyRect, aLists);
+  mIsPaintNonFixedFrames = PR_TRUE;
+  mIsPaintFixedFrames = PR_TRUE;
+  return NS_OK;
 }
 
 NS_IMETHODIMP
@@ -180,9 +191,9 @@ nsIFrame*
 ViewportFrame::GetFirstChild(nsIAtom* aListName) const
 {
   if (nsGkAtoms::fixedList == aListName)
-    return mFixedContainer.GetFirstChild();
+    return mIsPaintFixedFrames ? mFixedContainer.GetFirstChild() : nsnull;
 
-  return nsContainerFrame::GetFirstChild(aListName);
+  return mIsPaintNonFixedFrames ? nsContainerFrame::GetFirstChild(aListName) : nsnull;
 }
 
 /* virtual */ nscoord
diff -r a5442f43df61 layout/generic/nsViewportFrame.h
--- a/layout/generic/nsViewportFrame.h	Wed Aug 12 22:15:56 2009 +0300
+++ b/layout/generic/nsViewportFrame.h	Thu Aug 13 02:13:05 2009 +0300
@@ -62,6 +62,8 @@ public:
   ViewportFrame(nsStyleContext* aContext)
     : nsContainerFrame(aContext)
     , mFixedContainer(nsGkAtoms::fixedList)
+    , mIsPaintFixedFrames(PR_TRUE)
+    , mIsPaintNonFixedFrames(PR_TRUE)
   {}
   virtual ~ViewportFrame() { } // useful for debugging
 
@@ -123,6 +125,10 @@ protected:
   // position: fixed content is really content which is absolutely positioned with
   // respect to the viewport.
   nsAbsoluteContainingBlock mFixedContainer;
+
+private:
+  PRPackedBool mIsPaintFixedFrames;
+  PRPackedBool mIsPaintNonFixedFrames;
 };
 
 

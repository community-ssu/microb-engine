diff -r e1858505c040 -r 233ccc11d738 widget/src/gtk2/nsScreenManagerGtk.cpp
--- a/widget/src/gtk2/nsScreenManagerGtk.cpp	Fri Jul 10 08:43:31 2009 +0300
+++ b/widget/src/gtk2/nsScreenManagerGtk.cpp	Fri Jul 10 08:50:17 2009 +0300
@@ -342,6 +342,10 @@ nsScreenManagerGtk :: GetNumberOfScreens
 NS_IMETHODIMP
 nsScreenManagerGtk :: ScreenForNativeWidget (void *aWidget, nsIScreen **outScreen)
 {
+  if (!GDK_IS_WINDOW(aWidget)) {
+    g_warning("aWidget - not gdkWindow");
+    return NS_ERROR_FAILURE;
+  }
   // I don't know how to go from GtkWindow to nsIScreen, especially
   // given xinerama and stuff, so let's just do this
   gint x, y, width, height, depth;
diff -r e1858505c040 -r 233ccc11d738 widget/src/gtk2/nsWindow.cpp
--- a/widget/src/gtk2/nsWindow.cpp	Fri Jul 10 08:43:31 2009 +0300
+++ b/widget/src/gtk2/nsWindow.cpp	Fri Jul 10 08:50:17 2009 +0300
@@ -357,7 +357,6 @@ static gfxIntSize gBufferPixmapSize(0,0)
 static gfxIntSize gBufferPixmapMaxSize(0,0);
 static int gBufferPixmapUsageCount = 0;
 static PRBool gBlockWidgetActivity = PR_FALSE;
-static PRBool gBlockWidgetActivity_full = PR_FALSE;
 
 // imported in nsWidgetFactory.cpp
 PRBool gDisableNativeTheme = PR_FALSE;
@@ -1376,16 +1375,8 @@ nsWindow::SetFocus(PRBool aRaise)
     LOGFOCUS(("  SetFocus [%p]\n", (void *)this));
 
     GtkWidget *owningWidget = GetMozContainerWidget();
-    if (!owningWidget) {
-        if (gBlockWidgetActivity_full) {
-            if (gFocusWindow == this)
-                return NS_OK;
-            gFocusWindow = this;
-            DispatchActivateEvent();
-            return NS_OK;
-        }
+    if (!owningWidget)
         return NS_ERROR_FAILURE;
-    }
 
     // Raise the window if someone passed in PR_TRUE and the prefs are
     // set properly.
@@ -1396,7 +1387,7 @@ nsWindow::SetFocus(PRBool aRaise)
         !GTK_WIDGET_HAS_FOCUS(toplevelWidget)) {
         GtkWidget* top_window = nsnull;
         GetToplevelWidget(&top_window);
-        if (top_window && (GTK_WIDGET_VISIBLE(top_window)))
+        if (top_window && (GTK_WIDGET_VISIBLE(top_window)) && GTK_IS_WINDOW(top_window))
         {
             gdk_window_show_unraised(top_window->window);
             // Unset the urgency hint if possible.
@@ -1813,10 +1804,15 @@ void*
 nsWindow::GetNativeData(PRUint32 aDataType)
 {
     switch (aDataType) {
-    case NS_NATIVE_WINDOW:
+    case NS_NATIVE_WINDOW: {
+        if (!mDrawingarea)
+            return nsnull;
+        return mDrawingarea->inner_window;
+        break;
+    }
     case NS_NATIVE_WIDGET: {
         if (!mDrawingarea)
-            return nsnull;
+            return mContainer;
 
         return mDrawingarea->inner_window;
         break;
@@ -1921,7 +1917,7 @@ nsWindow::WidgetToScreenOffset()
 {
     gint x = 0, y = 0;
 
-    if (mContainer) {
+    if (mContainer && GDK_IS_WINDOW(GTK_WIDGET(mContainer)->window)) {
         gdk_window_get_root_origin(GTK_WIDGET(mContainer)->window,
                                    &x, &y);
         LOG(("WidgetToScreenOffset (container) %d %d\n", x, y));
@@ -3842,6 +3838,12 @@ nsWindow::NativeCreate(nsIWidget        
         // for setting transients or whatever.
         topLevelParent =
             GTK_WINDOW(gtk_widget_get_toplevel(GTK_WIDGET(parentMozContainer)));
+    } else if (aParent) {
+        parentMozContainer = MOZ_CONTAINER(aParent->GetNativeData(NS_NATIVE_WIDGET));
+        NS_ASSERTION(parentMozContainer,
+                     "owning widget is not a mozcontainer!\n");
+        if (!parentMozContainer)
+            return NS_ERROR_FAILURE;
     }
 
     GdkVisual* visual = nsnull;
@@ -3951,7 +3953,7 @@ nsWindow::NativeCreate(nsIWidget        
         gtk_window_set_focus(GTK_WINDOW(mShell), GTK_WIDGET(mContainer));
 
         // and the drawing area
-        if (!gBlockWidgetActivity_full)
+        if (GTK_IS_WINDOW(gtk_widget_get_toplevel(GTK_WIDGET(mContainer))))
             mDrawingarea = moz_drawingarea_new(nsnull, mContainer, visual);
 
         if (mWindowType == eWindowType_popup) {
@@ -3967,17 +3969,20 @@ nsWindow::NativeCreate(nsIWidget        
     }
         break;
     case eWindowType_child: {
-        if (gBlockWidgetActivity_full)
-          break;
-        if (parentMozContainer) {
+        if (parentMozContainer && GTK_IS_WINDOW(gtk_widget_get_toplevel(GTK_WIDGET(parentMozContainer))))
             mDrawingarea = moz_drawingarea_new(parentArea, parentMozContainer, visual);
+        else if (parentMozContainer) {
+            mContainer = MOZ_CONTAINER(moz_container_new());
+            gtk_container_add(GTK_CONTAINER(parentMozContainer), GTK_WIDGET(mContainer));
         }
         else if (parentGtkContainer) {
             mContainer = MOZ_CONTAINER(moz_container_new());
             gtk_container_add(parentGtkContainer, GTK_WIDGET(mContainer));
-            gtk_widget_realize(GTK_WIDGET(mContainer));
-
-            mDrawingarea = moz_drawingarea_new(nsnull, mContainer, visual);
+
+            if (GTK_IS_WINDOW(gtk_widget_get_toplevel(GTK_WIDGET(parentGtkContainer)))) {
+                gtk_widget_realize(GTK_WIDGET(mContainer));
+                mDrawingarea = moz_drawingarea_new(nsnull, mContainer, visual);
+            }
         }
         else {
             NS_WARNING("Warning: tried to create a new child widget with no parent!");
@@ -4037,6 +4042,8 @@ nsWindow::NativeCreate(nsIWidget        
     }
 
     if (mContainer) {
+        g_signal_connect(G_OBJECT(mContainer), "destroy",
+                         G_CALLBACK(moz_container_destroy_cb), NULL);
         g_signal_connect(G_OBJECT(mContainer), "style_set",
                          G_CALLBACK(theme_changed_cb), this);
         g_signal_connect(G_OBJECT(mContainer), "unrealize",
@@ -4720,7 +4727,7 @@ GtkWidget *
 nsWindow::GetMozContainerWidget()
 {
     if (!mDrawingarea)
-        return NULL;
+        return GTK_WIDGET(mContainer);
 
     GtkWidget *owningWidget =
         get_gtk_widget_for_gdk_window(mDrawingarea->inner_window);
@@ -5473,6 +5480,16 @@ size_allocate_cb (GtkWidget *widget, Gtk
 }
 
 /* static */
+void
+nsWindow::moz_container_destroy_cb(GtkWidget *widget, GdkEventAny *event)
+{
+    nsWindow *window = get_window_for_gtk_widget(widget);
+    if (!window)
+      return;
+    window->mContainer = nsnull;
+}
+
+/* static */
 gboolean
 delete_event_cb(GtkWidget *widget, GdkEventAny *event)
 {
@@ -5985,11 +6002,6 @@ initialize_prefs(void)
     if (NS_SUCCEEDED(rv))
         gBlockWidgetActivity = val;
 
-    rv = prefs->GetBoolPref("mozilla.widget.not-realized", &val);
-    if (NS_SUCCEEDED(rv))
-        gBlockWidgetActivity_full = val;
-
-
     return NS_OK;
 }
 
diff -r e1858505c040 -r 233ccc11d738 widget/src/gtk2/nsWindow.h
--- a/widget/src/gtk2/nsWindow.h	Fri Jul 10 08:43:31 2009 +0300
+++ b/widget/src/gtk2/nsWindow.h	Fri Jul 10 08:50:17 2009 +0300
@@ -586,6 +579,9 @@ private:
         PRUint32* flag = GetFlagWord32(aKeyCode, &mask);
         *flag &= ~mask;
     }
+
+    static void moz_container_destroy_cb(GtkWidget *widget,
+                                         GdkEventAny *event);
 };
 
 class nsChildWindow : public nsWindow {

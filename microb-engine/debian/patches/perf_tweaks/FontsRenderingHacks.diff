Index: mozilla/gfx/thebes/src/gfxPangoFonts.cpp
===================================================================
--- mozilla.orig/gfx/thebes/src/gfxPangoFonts.cpp
+++ mozilla/gfx/thebes/src/gfxPangoFonts.cpp
@@ -178,17 +178,17 @@
         }
     }
     else {
         // XXX If there are no fonts, we should use dummy family.
         // Pango will resolve from this.
         // behdad: yep, looks good.
         // printf("%s(%s)\n", NS_ConvertUTF16toUTF8(families).get(),
         //                    aStyle->langGroup.get());
-        fcFamilies.Append(NS_LITERAL_STRING("sans-serif"));
+        fcFamilies.Append(NS_LITERAL_STRING("SwissA"));
     }
 
     nsRefPtr<gfxPangoFont> font = GetOrMakeFont(fcFamilies, &mStyle);
     if (font) {
         mFonts.AppendElement(font);
     }
 }
 
@@ -775,26 +775,28 @@
 
     run->RecordSurrogates(aString);
 
     nsCAutoString utf8;
     PRInt32 headerLen = AppendDirectionalIndicatorUTF8(run->IsRightToLeft(), utf8);
     AppendUTF16toUTF8(Substring(aString, aString + aLength), utf8);
     PRBool is8Bit = PR_FALSE;
 
+#if !defined(ENABLE_FAST_PATH_ALWAYS)
 #if defined(ENABLE_FAST_PATH_8BIT)
     if (CanTakeFastPath(aFlags)) {
         PRUint32 allBits = 0;
         PRUint32 i;
         for (i = 0; i < aLength; ++i) {
             allBits |= aString[i];
         }
         is8Bit = (allBits & 0xFF00) == 0;
     }
 #endif
+#endif
     InitTextRun(run, utf8.get(), utf8.Length(), headerLen, is8Bit);
     run->FetchGlyphExtents(aParams->mContext);
     return run;
 }
 
 void
 gfxPangoFontGroup::InitTextRun(gfxTextRun *aTextRun, const gchar *aUTF8Text,
                                PRUint32 aUTF8Length, PRUint32 aUTF8HeaderLength,
Index: mozilla/gfx/src/nsDeviceContext.cpp
===================================================================
--- mozilla.orig/gfx/src/nsDeviceContext.cpp
+++ mozilla/gfx/src/nsDeviceContext.cpp
@@ -474,26 +474,28 @@
   // First check our cache
   // start from the end, which is where we put the most-recent-used element
 
   nsIFontMetrics* fm;
   PRInt32 n = mFontMetrics.Count() - 1;
   for (PRInt32 i = n; i >= 0; --i) {
     fm = static_cast<nsIFontMetrics*>(mFontMetrics[i]);
     if (fm->Font().Equals(aFont)) {
+      if (mContext->AppUnitsPerDevPixel() == fm->mP2A) {
       nsCOMPtr<nsIAtom> langGroup;
       fm->GetLangGroup(getter_AddRefs(langGroup));
       if (aLangGroup == langGroup.get()) {
         if (i != n) {
           // promote it to the end of the cache
           mFontMetrics.MoveElement(i, n);
         }
         NS_ADDREF(aMetrics = fm);
         return NS_OK;
       }
+      }
     }
   }
 
   // It's not in the cache. Get font metrics and then cache them.
 
   aMetrics = nsnull;
   nsresult rv = CreateFontMetricsInstance(&fm);
   if (NS_FAILED(rv)) return rv;
Index: mozilla/gfx/src/thebes/nsThebesFontMetrics.h
===================================================================
--- mozilla.orig/gfx/src/thebes/nsThebesFontMetrics.h
+++ mozilla/gfx/src/thebes/nsThebesFontMetrics.h
@@ -184,14 +184,13 @@
     friend class AutoTextRun;
 
     nsRefPtr<gfxFontGroup> mFontGroup;
     gfxFontStyle *mFontStyle;
 
 private:
     nsThebesDeviceContext *mDeviceContext;
     nsCOMPtr<nsIAtom> mLangGroup;
-    PRInt32 mP2A;
     PRPackedBool mIsRightToLeft;
     PRPackedBool mTextRunRTL;
 };
 
 #endif /* NSTHEBESFONTMETRICS__H__ */
Index: mozilla/gfx/public/nsIFontMetrics.h
===================================================================
--- mozilla.orig/gfx/public/nsIFontMetrics.h
+++ mozilla/gfx/public/nsIFontMetrics.h
@@ -210,16 +210,21 @@
    */
   NS_IMETHOD  GetAveCharWidth(nscoord& aAveCharWidth) = 0;
 
   /**
    * Returns the often needed width of the space character
    */
   NS_IMETHOD  GetSpaceWidth(nscoord& aSpaceCharWidth) = 0;
 
+  /**
+   * DPI Value
+   */
+  PRInt32 mP2A;
+
 protected:
 
   nsFont mFont;		// The font for this metrics object.
 };
 
 NS_DEFINE_STATIC_IID_ACCESSOR(nsIFontMetrics, NS_IFONT_METRICS_IID)
 
 #endif /* nsIFontMetrics_h___ */
Index: mozilla/layout/base/nsPresContext.cpp
===================================================================
--- mozilla.orig/layout/base/nsPresContext.cpp
+++ mozilla/layout/base/nsPresContext.cpp
@@ -1154,17 +1154,18 @@
   }
   // Re-fetch the view manager's window dimensions in case there's a deferred
   // resize which hasn't affected our mVisibleArea yet
   nscoord oldWidthAppUnits, oldHeightAppUnits;
   GetViewManager()->GetWindowDimensions(&oldWidthAppUnits, &oldHeightAppUnits);
   float oldWidthDevPixels = oldWidthAppUnits / float(mCurAppUnitsPerDevPixel);
   float oldHeightDevPixels = oldHeightAppUnits / float(mCurAppUnitsPerDevPixel);
   if (mDeviceContext->SetPixelScale(aZoom)) {
-    mDeviceContext->FlushFontCache();
+    if (!nsContentUtils::GetBoolPref("layout.full.zoom.nofont", PR_TRUE))
+      mDeviceContext->FlushFontCache();
   }
 
   NS_ASSERTION(mSupressResizeReflow == PR_FALSE, "two zooms happening at the same time? impossible!");
   mSupressResizeReflow = PR_TRUE;
 
   mFullZoom = aZoom;
   if (nsContentUtils::GetBoolPref("layout.full.zoom.mode.fast", PR_TRUE)) {
     mShell->FrameNeedsReflow(mShell->GetRootFrame(), nsIPresShell::eStyleChange, NS_FRAME_IS_DIRTY);

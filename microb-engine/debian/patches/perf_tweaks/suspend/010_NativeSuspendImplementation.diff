# Implementation of SuspendNative Event like in mac
Index: mozilla/widget/src/gtk2/nsAppShell.cpp
===================================================================
--- mozilla.orig/widget/src/gtk2/nsAppShell.cpp
+++ mozilla/widget/src/gtk2/nsAppShell.cpp
@@ -61,20 +61,37 @@
                                    gpointer data)
 {
     nsAppShell *self = static_cast<nsAppShell *>(data);
 
     unsigned char c;
     read(self->mPipeFDs[0], &c, 1);
     NS_ASSERTION(c == (unsigned char) NOTIFY_TOKEN, "wrong token");
 
-    self->NativeEventCallback();
+    if (self->mSuspendNativeCount <= 0)
+        self->NativeEventCallback();
+    else
+        self->mSkippedNativeCallback = PR_TRUE;
+
     return TRUE;
 }
 
+NS_IMETHODIMP
+nsAppShell::ResumeNative(void)
+{
+  nsresult retval = nsBaseAppShell::ResumeNative();
+  if (NS_SUCCEEDED(retval) && (mSuspendNativeCount == 0) &&
+      mSkippedNativeCallback)
+  {
+    mSkippedNativeCallback = PR_FALSE;
+    ScheduleNativeEventCallback();
+  }
+  return retval;
+}
+
 nsAppShell::~nsAppShell()
 {
     if (mTag)
         g_source_remove(mTag);
     if (mPipeFDs[0])
         close(mPipeFDs[0]);
     if (mPipeFDs[1])
         close(mPipeFDs[1]);
Index: mozilla/widget/src/gtk2/nsAppShell.h
===================================================================
--- mozilla.orig/widget/src/gtk2/nsAppShell.h
+++ mozilla/widget/src/gtk2/nsAppShell.h
@@ -40,17 +40,19 @@
 #define nsAppShell_h__
 
 #include <glib.h>
 #include "nsBaseAppShell.h"
 #include "nsCOMPtr.h"
 
 class nsAppShell : public nsBaseAppShell {
 public:
-    nsAppShell() : mTag(0) {
+    NS_IMETHODIMP ResumeNative(void);
+
+    nsAppShell() : mTag(0), mSkippedNativeCallback(PR_FALSE) {
         mPipeFDs[0] = mPipeFDs[1] = 0;
     }
 
     // nsBaseAppShell overrides:
     nsresult Init();
     virtual void ScheduleNativeEventCallback();
     virtual PRBool ProcessNextNativeEvent(PRBool mayWait);
 
@@ -58,11 +60,12 @@
     virtual ~nsAppShell();
 
     static gboolean EventProcessorCallback(GIOChannel *source,
                                            GIOCondition condition,
                                            gpointer data);
 
     int mPipeFDs[2];
     PRUintn mTag;
+    PRPackedBool       mSkippedNativeCallback;
 };
 
 #endif /* nsAppShell_h__ */

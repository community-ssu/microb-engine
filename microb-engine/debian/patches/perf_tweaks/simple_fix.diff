diff -r 08de7697d3f4 layout/base/nsDisplayList.cpp
--- a/layout/base/nsDisplayList.cpp	Thu May 21 10:39:25 2009 +0300
+++ b/layout/base/nsDisplayList.cpp	Fri May 22 01:14:21 2009 +0300
@@ -244,7 +244,7 @@ nsDisplayItem::OptimizeVisibility(nsDisp
   NS_ASSERTION(f, "GetUnderlyingFrame() must return non-null for leaf items");
   PRBool isMoving = aBuilder->IsMovingFrame(f);
 
-  if (IsOpaque(aBuilder)) {
+  if (IsOpaque(aBuilder) || (f && f->GetType() == nsGkAtoms::objectFrame)) {
     nsRect opaqueArea = bounds;
     if (isMoving) {
       // The display list should include items for both the before and after
@@ -283,7 +283,8 @@ nsDisplayList::GetBounds(nsDisplayListBu
 
 void
 nsDisplayList::OptimizeVisibility(nsDisplayListBuilder* aBuilder,
-                                  nsRegion* aVisibleRegion) {
+                                  nsRegion* aVisibleRegion,
+                                  nsRegion* aTranspRegion) {
   nsAutoTArray<nsDisplayItem*, 512> elements;
   FlattenTo(&elements);
 
@@ -296,11 +297,21 @@ nsDisplayList::OptimizeVisibility(nsDisp
       elements.ReplaceElementsAt(i - 1, 1, item);
       continue;
     }
-    
+
     if (item->OptimizeVisibility(aBuilder, aVisibleRegion)) {
       AppendToBottom(item);
     } else {
       item->~nsDisplayItem();
+      continue;
+    }
+    if (!aTranspRegion) continue;
+
+    if (item->IsOpaque(aBuilder))
+      aTranspRegion->SimpleSubtract(item->GetBounds(aBuilder));
+    else {
+      nsIFrame* frame = item->GetUnderlyingFrame();
+      if (frame && frame->GetType() == nsGkAtoms::objectFrame)
+        aTranspRegion->SimpleSubtract(item->GetBounds(aBuilder));
     }
   }
 }
diff -r 08de7697d3f4 layout/base/nsDisplayList.h
--- a/layout/base/nsDisplayList.h	Thu May 21 10:39:25 2009 +0300
+++ b/layout/base/nsDisplayList.h	Fri May 22 01:14:21 2009 +0300
@@ -687,7 +687,7 @@ public:
    * @param aVisibleRegion the area that is visible, relative to the
    * reference frame; on return, this contains the area visible under the list
    */
-  void OptimizeVisibility(nsDisplayListBuilder* aBuilder, nsRegion* aVisibleRegion);
+  void OptimizeVisibility(nsDisplayListBuilder* aBuilder, nsRegion* aVisibleRegion, nsRegion* aTranspRegion = nsnull);
   /**
    * Paint the list to the rendering context. We assume that (0,0) in aCtx
    * corresponds to the origin of the reference frame. For best results,
diff -r 08de7697d3f4 layout/base/nsPresShell.cpp
--- a/layout/base/nsPresShell.cpp	Thu May 21 10:39:25 2009 +0300
+++ b/layout/base/nsPresShell.cpp	Fri May 22 01:14:21 2009 +0300
@@ -5056,13 +5056,11 @@ PresShell::ComputeRepaintRegionForCopy(n
       aDelta, aCopyRect, aRepaintRegion);
 }
 
-NS_IMETHODIMP
-PresShell::RenderDocument(const nsRect& aRect, PRUint32 aFlags,
-                          nscolor aBackgroundColor,
-                          gfxContext* aThebesContext)
-{
-  NS_ENSURE_TRUE(!(aFlags & RENDER_IS_UNTRUSTED), NS_ERROR_NOT_IMPLEMENTED);
-
+static PRBool
+PrepareContext(const nsRect& aRect, PRUint32 aFlags,
+               nscolor aBackgroundColor, gfxContext* aThebesContext,
+               nsRegion *aTranspRegion)
+{
   gfxRect r(0, 0,
             nsPresContext::AppUnitsToFloatCSSPixels(aRect.width),
             nsPresContext::AppUnitsToFloatCSSPixels(aRect.height));
@@ -5093,18 +5091,31 @@ PresShell::RenderDocument(const nsRect& 
   }
 
   // draw background color
-  if (NS_GET_A(aBackgroundColor) > 0) {
+  if (NS_GET_A(aBackgroundColor) > 0 &&
+     !(aTranspRegion && aTranspRegion->IsEmpty())) {
     aThebesContext->SetColor(gfxRGBA(aBackgroundColor));
     aThebesContext->SetOperator(gfxContext::OPERATOR_SOURCE);
     aThebesContext->Paint();
   }
 
+  aThebesContext->SetOperator(gfxContext::OPERATOR_OVER);
+  return needsGroup;
+}
+
+NS_IMETHODIMP
+PresShell::RenderDocument(const nsRect& aRect, PRUint32 aFlags,
+                          nscolor aBackgroundColor,
+                          gfxContext* aThebesContext)
+{
+  NS_ENSURE_TRUE(!(aFlags & RENDER_IS_UNTRUSTED), NS_ERROR_NOT_IMPLEMENTED);
+
   // we want the window to be composited as a single image using
   // whatever operator was set; set OPERATOR_OVER here, which is
   // either already the case, or overrides the operator in a group.
   // the original operator will be present when we PopGroup.
-  aThebesContext->SetOperator(gfxContext::OPERATOR_OVER);
-
+
+  PRBool needsGroup = PR_TRUE;
+  PRBool backgroundPainted = PR_FALSE;
   nsIFrame* rootFrame = FrameManager()->GetRootFrame();
   if (rootFrame) {
     nsDisplayListBuilder builder(rootFrame, PR_FALSE,
@@ -5127,6 +5138,13 @@ PresShell::RenderDocument(const nsRect& 
     builder.LeavePresShell(rootFrame, rect);
 
     if (NS_SUCCEEDED(rv)) {
+      nsRegion region(rect);
+      nsRegion transpRegion(rect);
+      list.OptimizeVisibility(&builder, &region, &transpRegion);
+
+      backgroundPainted = PR_TRUE;
+      needsGroup = PrepareContext(aRect, aFlags, aBackgroundColor, aThebesContext, &transpRegion);
+
       // Ensure that r.x,r.y gets drawn at (0,0)
       aThebesContext->Save();
       aThebesContext->Translate(gfxPoint(-nsPresContext::AppUnitsToFloatCSSPixels(rect.x),
@@ -5135,13 +5153,11 @@ PresShell::RenderDocument(const nsRect& 
       nsIDeviceContext* devCtx = mPresContext->DeviceContext();
       gfxFloat scale = gfxFloat(devCtx->AppUnitsPerDevPixel())/nsPresContext::AppUnitsPerCSSPixel();
       aThebesContext->Scale(scale, scale);
-      
+
       nsCOMPtr<nsIRenderingContext> rc;
       devCtx->CreateRenderingContextInstance(*getter_AddRefs(rc));
       rc->Init(devCtx, aThebesContext);
 
-      nsRegion region(rect);
-      list.OptimizeVisibility(&builder, &region);
       list.Paint(&builder, rc, rect);
       // Flush the list so we don't trigger the IsEmpty-on-destruction assertion
       list.DeleteAll();
@@ -5150,6 +5166,9 @@ PresShell::RenderDocument(const nsRect& 
     }
   }
 
+  if (!backgroundPainted)
+    needsGroup = PrepareContext(aRect, aFlags, aBackgroundColor, aThebesContext, nsnull);
+
   // if we had to use a group, paint it to the destination now
   if (needsGroup) {
     aThebesContext->Restore();

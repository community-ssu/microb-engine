Index: mozilla/xpinstall/src/nsXPInstallManager.cpp
===================================================================
--- mozilla.orig/xpinstall/src/nsXPInstallManager.cpp
+++ mozilla/xpinstall/src/nsXPInstallManager.cpp
@@ -77,16 +77,17 @@
 #include "nsIPromptService.h"
 #include "nsIScriptGlobalObject.h"
 #include "nsXPCOM.h"
 #include "nsISupportsPrimitives.h"
 #include "nsIObserverService.h"
 
 #include "nsIPrefService.h"
 #include "nsIPrefBranch.h"
+#include "nsIPrompt.h"
 
 #include "CertReader.h"
 
 #include "nsEmbedCID.h"
 
 static NS_DEFINE_IID(kStringBundleServiceCID, NS_STRINGBUNDLESERVICE_CID);
 
 #define PREF_XPINSTALL_ENABLED                "xpinstall.enabled"
@@ -387,16 +388,39 @@
         if (NS_SUCCEEDED(rv))
         {
             //Now get which button was pressed from the ParamBlock
             PRInt32 buttonPressed = 0;
             params->GetInt( 0, &buttonPressed );
             *aRetval = buttonPressed ? PR_FALSE : PR_TRUE;
         }
     }
+    if (NS_FAILED(rv) && parentWindow)
+    {
+        PRInt32 selection;
+        nsCOMPtr<nsIPrompt> prompt;
+        rv = parentWindow->GetPrompter(getter_AddRefs(prompt));
+        if (NS_SUCCEEDED(rv)) {
+            nsString str;
+            for (PRUint32 i = 0; i < aCount; i++)
+            {
+                str.Append(aPackageList[i]);
+                str.Append(NS_LITERAL_STRING("\n"));
+            }
+            rv = prompt->ConfirmEx(NS_LITERAL_STRING("_blank").get(), str.get(),
+                                   nsIPrompt::STD_YES_NO_BUTTONS,
+                                   nsnull, nsnull, nsnull, nsnull, nsnull,
+                                   &selection);
+            if (NS_SUCCEEDED(rv))
+            {
+                //Now get which button was pressed from the ParamBlock
+                *aRetval = selection ? PR_FALSE : PR_TRUE;
+            }
+        }
+    }
 
     return rv;
 }
 
 #ifdef ENABLE_SKIN_SIMPLE_INSTALLATION_UI
 PRBool nsXPInstallManager::ConfirmChromeInstall(nsIDOMWindowInternal* aParentWindow, const PRUnichar **aPackage)
 {
     // get the dialog strings
Index: mozilla/xpinstall/public/xpinstall.js
===================================================================
--- mozilla.orig/xpinstall/public/xpinstall.js
+++ mozilla/xpinstall/public/xpinstall.js
@@ -1,2 +1,2 @@
 pref("xpinstall.enabled",       true);
-pref("xpinstall.whitelist.required", true);
+pref("xpinstall.whitelist.required", false);
--- mozilla/xpinstall/src/nsXPInstallManager.cpp.orig	2007-11-20 08:40:47.000000000 +0200
+++ mozilla/xpinstall/src/nsXPInstallManager.cpp	2007-11-20 14:41:13.000000000 +0200
@@ -371,32 +371,32 @@ nsXPInstallManager::ConfirmInstall(nsIDO
 
         char* confirmDialogURL;
         nsCOMPtr<nsIPrefBranch> pref(do_GetService(NS_PREFSERVICE_CONTRACTID, &rv));
         if (!pref)
           return rv;
           
         rv = pref->GetCharPref(PREF_XPINSTALL_CONFIRM_DLG, &confirmDialogURL);
         NS_ASSERTION(NS_SUCCEEDED(rv), "Can't invoke XPInstall FE without a FE URL! Set xpinstall.dialog.confirm");
-        if (NS_FAILED(rv))
-          return rv;
-
-        rv = parentWindow->OpenDialog(NS_ConvertASCIItoUTF16(confirmDialogURL),
-                                      NS_LITERAL_STRING("_blank"),
-                                      NS_LITERAL_STRING("chrome,centerscreen,modal,titlebar"),
-                                      ifptr,
-                                      getter_AddRefs(newWindow));
-
         if (NS_SUCCEEDED(rv))
-        {
-            //Now get which button was pressed from the ParamBlock
-            PRInt32 buttonPressed = 0;
-            params->GetInt( 0, &buttonPressed );
-            *aRetval = buttonPressed ? PR_FALSE : PR_TRUE;
-        }
+		 {
+           rv = parentWindow->OpenDialog(NS_ConvertASCIItoUTF16(confirmDialogURL),
+                                         NS_LITERAL_STRING("_blank"),
+                                         NS_LITERAL_STRING("chrome,centerscreen,modal,titlebar"),
+                                         ifptr,
+                                         getter_AddRefs(newWindow));
+
+           if (NS_SUCCEEDED(rv))
+           {
+              //Now get which button was pressed from the ParamBlock
+              PRInt32 buttonPressed = 0;
+              params->GetInt( 0, &buttonPressed );
+              *aRetval = buttonPressed ? PR_FALSE : PR_TRUE;
+           }
+		 }
     }
     if (NS_FAILED(rv) && parentWindow)
     {
         PRInt32 selection;
         nsCOMPtr<nsIPrompt> prompt;
         rv = parentWindow->GetPrompter(getter_AddRefs(prompt));
         if (NS_SUCCEEDED(rv)) {
             nsString str;

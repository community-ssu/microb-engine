Index: mozilla/js/src/jstracer.cpp
===================================================================
--- mozilla.orig/js/src/jstracer.cpp
+++ mozilla/js/src/jstracer.cpp
@@ -2629,18 +2629,16 @@
 js_InitJIT(JSTraceMonitor *tm)
 {
 #if defined NANOJIT_IA32
     if (!did_we_check_sse2) {
         avmplus::AvmCore::sse2_available = js_CheckForSSE2();
         did_we_check_sse2 = true;
     }
 #endif
-    if (!oracle)
-        oracle = new (&gc) Oracle();
     if (!tm->fragmento) {
         JS_ASSERT(!tm->globalSlots && !tm->globalTypeMap);
         Fragmento* fragmento = new (&gc) Fragmento(core, 24);
         verbose_only(fragmento->labels = new (&gc) LabelMap(core, NULL);)
         fragmento->assm()->setCallTable(builtins);
         tm->fragmento = fragmento;
         tm->globalSlots = new (&gc) SlotList();
         tm->globalTypeMap = new (&gc) TypeMap();
@@ -2706,25 +2704,16 @@
     memset(&tm->fcache, 0, sizeof(tm->fcache));
     if (cx->fp) {
         tm->globalShape = OBJ_SHAPE(JS_GetGlobalForObject(cx, cx->fp->scopeChain));
         tm->globalSlots->clear();
         tm->globalTypeMap->clear();
     }
 }
 
-void
-js_ShutDownJIT()
-{
-    if (oracle) {
-        delete oracle;
-        oracle = NULL;
-    }
-}
-
 jsval&
 TraceRecorder::argval(unsigned n) const
 {
     JS_ASSERT(n < cx->fp->fun->nargs);
     return cx->fp->argv[n];
 }
 
 jsval&

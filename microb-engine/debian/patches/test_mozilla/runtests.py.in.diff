Index: mozilla/testing/mochitest/runtests.py.in
===================================================================
--- mozilla.orig/testing/mochitest/runtests.py.in
+++ mozilla/testing/mochitest/runtests.py.in
@@ -73,17 +73,19 @@ BROWSER_CHROME_URL = "chrome://browser/c
 # this seems big, it's mostly for debug machines where cold startup
 # (particularly after a build) takes forever.
 SERVER_STARTUP_TIMEOUT = 45
 
 oldcwd = os.getcwd()
 SCRIPT_DIRECTORY = os.path.abspath(os.path.realpath(os.path.dirname(sys.argv[0])))
 os.chdir(SCRIPT_DIRECTORY)
 
-PROFILE_DIRECTORY = os.path.abspath("./mochitesttestingprofile")
+#PROFILE_DIRECTORY = os.path.abspath("./mochitesttestingprofile")
+tmpProfileDir = os.path.expanduser("~") + "/.mozilla" + "mochitesttestingprofile/"
+PROFILE_DIRECTORY = os.path.abspath(tmpProfileDir)
 
 LEAK_REPORT_FILE = PROFILE_DIRECTORY + "/" + "leaks-report.log"
 
 # Map of debugging programs to information about them, like default arguments
 # and whether or not they are interactive.
 DEBUGGER_INFO = {
   # gdb requires that you supply the '--args' flag in order to pass arguments
   # after the executable name to the executable.
@@ -288,17 +290,22 @@ class MochitestServer:
       print "Error starting server."
       sys.exit(2)
     automation.log.info("INFO | runtests.py | Server pid: %d", pid)
     
 
   def ensureReady(self, timeout):
     assert timeout >= 0
 
-    aliveFile = os.path.join(PROFILE_DIRECTORY, "server_alive.txt")
+    #profile directory is now moved to .mozilla folder
+    #hence look for server logs in current dir,as  the server creates it there
+    #aliveFile = os.path.join(PROFILE_DIRECTORY, "server_alive.txt")
+    tmpDir = os.getcwd()
+    aliveFile = os.path.join(tmpDir, "server_alive.txt")
+
     i = 0
     while i < timeout:
       if os.path.exists(aliveFile):
         break
       time.sleep(1)
       i += 1
     else:
       print "Timed out while waiting for server startup."
@@ -334,19 +341,31 @@ def searchPath(path):
         return newpath
   return None
 
 #################
 # MAIN FUNCTION #
 #################
 
 def main():
+  #Better Dont do this killall,temporarily use this until the scripts are completely ok
+  os.system('sb-conf killall')
+
   parser = MochitestOptions()
   options, args = parser.parse_args()
 
+  #set the  application name and binary to be the one for  maemo browser
+  #currently overriding the application path
+  options.app = automation.DIST_BIN + "/" + "browser"
+  tmp = '%s/%s' % ( automation.DIST_BIN ,"browser.launch")
+  #create link to the browser executable in the test directory
+  os.system('ln -sf  /usr/bin/browser.launch  %s'%tmp)
+  os.system('ln -sf  /usr/bin/browser %s'%options.app)
+
+
   if options.xrePath is None:
     # default xrePath to the app path if not provided
     # but only if an app path was explicitly provided
     if options.app != parser.defaults['app']:
       options.xrePath = os.path.dirname(options.app)
     else:
       # otherwise default to dist/bin
       options.xrePath = automation.DIST_BIN
@@ -470,16 +489,27 @@ Are you executing $objdir/_tests/testing
       urlOpts.append("consoleLevel=" + encodeURIComponent(options.consoleLevel))
     if len(urlOpts) > 0:
       testURL += "?" + "&".join(urlOpts)
 
   browserEnv["XPCOM_MEM_BLOAT_LOG"] = LEAK_REPORT_FILE
 
   if options.fatalAssertions:
     browserEnv["XPCOM_DEBUG_BREAK"] = "stack-and-abort"
+
+  #start hildon desktop
+  os.system('export DISPLAY=:2')
+  os.system('export MOZ_NO_REMOTE=1')
+  os.system('af-sb-init.sh start')
+  #start browser daemon
+  os.system('MOZ_COMP_PATH_OVERRIDE=.mozilla  MOZ_PROFILE_OVERRIDE=mochitesttestingprofile /etc/init.d/tablet-browser-daemon start')
+  #os.system('kill `ps | grep matchbox | awk '{ print $1 }'`')
+  os.system('/usr/lib/gconf2/gconfd-2 &')
+  os.system('CLUTTER_VBLANK=none run-standalone.sh hildon-desktop &')
+
 
   status = automation.runApp(testURL, browserEnv, options.app,
                              PROFILE_DIRECTORY, options.browserArgs,
                              runSSLTunnel = True,
                              utilityPath = options.utilityPath,
                              xrePath = options.xrePath,
                              certPath=options.certPath,
                              debuggerInfo=debuggerInfo,

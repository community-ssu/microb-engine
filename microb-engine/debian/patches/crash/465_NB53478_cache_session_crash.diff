--- mozilla/netwerk/cache/src/nsCacheSession.cpp.orig	2005-01-13 05:25:17.000000000 +0200
+++ mozilla/netwerk/cache/src/nsCacheSession.cpp	2007-03-27 13:06:11.643194500 +0300
@@ -83,20 +83,22 @@ NS_IMETHODIMP nsCacheSession::SetDoomEnt
 }
 
 
 NS_IMETHODIMP
 nsCacheSession::OpenCacheEntry(const nsACString &         key, 
                                nsCacheAccessMode          accessRequested,
                                PRBool                     blockingMode,
                                nsICacheEntryDescriptor ** result)
 {
     nsresult rv;
+    if (!this)
+    return NS_ERROR_FAILURE;
     rv =  nsCacheService::OpenCacheEntry(this,
                                          key,
                                          accessRequested,
                                          blockingMode,
                                          nsnull, // no listener
                                          result);
     return rv;
 }
 
 
--- mozilla/modules/libpr0n/src/imgCache.cpp.orig	2006-06-16 00:59:13.000000000 +0300
+++ mozilla/modules/libpr0n/src/imgCache.cpp	2007-03-29 19:54:22.057074750 +0300
@@ -208,22 +208,22 @@ nsresult imgCache::ClearImageCache()
 PRBool imgCache::Put(nsIURI *aKey, imgRequest *request, nsICacheEntryDescriptor **aEntry)
 {
   LOG_STATIC_FUNC(gImgLog, "imgCache::Put");
 
   nsresult rv;
 
   nsCOMPtr<nsICacheSession> ses;
   GetCacheSession(aKey, getter_AddRefs(ses));
   if (!ses) return PR_FALSE;
 
-  nsCAutoString spec;
-  aKey->GetAsciiSpec(spec);
+  nsCString spec;
+  rv = aKey->GetAsciiSpec(spec);
 
   nsCOMPtr<nsICacheEntryDescriptor> entry;
 
   rv = ses->OpenCacheEntry(spec, nsICache::ACCESS_WRITE, nsICache::BLOCKING, getter_AddRefs(entry));
 
   if (NS_FAILED(rv) || !entry)
     return PR_FALSE;
 
   nsCOMPtr<nsISupports> sup = NS_REINTERPRET_CAST(nsISupports*, request);
   entry->SetCacheElement(sup);

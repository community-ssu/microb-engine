# Patches for microb-engine
# Oleg Romashin <oleg.romashin@nokia.com>
# DP: Extension for zooming another HTML elements img,radio,checkbox
# Not required anymore after fixing 4821

Index: mozilla/extensions/imagezoom/Makefile.in
===================================================================
--- /dev/null
+++ mozilla/extensions/imagezoom/Makefile.in
@@ -0,0 +1,37 @@
+
+DEPTH=../..
+topsrcdir=@top_srcdir@
+srcdir=@srcdir@
+VPATH=@srcdir@
+
+include $(DEPTH)/config/autoconf.mk
+
+MODULE	= imagezoom
+XPI_NAME = imagezoom
+
+ifdef MOZ_XUL_APP
+INSTALL_EXTENSION_ID = imagezoom@extensions.mozilla.org
+DIST_FILES = install.rdf
+NO_JAR_AUTO_REG        = 1
+USE_EXTENSION_MANIFEST = 1
+XPI_PKGNAME            = imagezoom-$(MOZ_APP_VERSION)
+
+# We should really pull FIREFOX_VERSION and THUNDERBIRD_VERSION from
+# browser/config/version.txt mail/config/version.txt but we can't be assured
+# that we've even pulled those files. So we hardcode them.
+
+XULAPP_DEFINES = \
+	-DFIREFOX_VERSION=$(FIREFOX_VERSION) \
+	-DTHUNDERBIRD_VERSION=$(THUNDERBIRD_VERSION) \
+	-DEXTENSION_VERSION=$(MOZILLA_VERSION) \
+	$(NULL)
+
+ifdef TARGET_XPCOM_ABI
+XULAPP_DEFINES += -DEM_ABI=$(OS_TARGET)_$(TARGET_XPCOM_ABI)
+endif
+endif
+
+DIRS    = src
+DIRS   += public
+
+include $(topsrcdir)/config/rules.mk
Index: mozilla/extensions/imagezoom/install.rdf
===================================================================
--- /dev/null
+++ mozilla/extensions/imagezoom/install.rdf
@@ -0,0 +1,40 @@
+<?xml version="1.0"?>
+
+#filter substitution
+
+<RDF xmlns="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+     xmlns:em="http://www.mozilla.org/2004/em-rdf#">
+  <Description about="urn:mozilla:install-manifest">
+    <em:id>fit-to-view@extensions.mozilla.org</em:id>
+    <em:version>@EXTENSION_VERSION@</em:version>
+
+#ifdef EM_ABI
+    <em:targetPlatform>@EM_ABI@</em:targetPlatform>
+#endif
+
+    <em:targetApplication>
+      <!-- Firefox -->
+      <Description>
+        <em:id>{ec8030f7-c20a-464f-9b0e-13a3a9e97384}</em:id>
+        <em:minVersion>@FIREFOX_VERSION@</em:minVersion>
+        <em:maxVersion>@FIREFOX_VERSION@</em:maxVersion>
+      </Description>
+    </em:targetApplication>
+
+    <em:targetApplication>
+      <!-- Thunderbird -->
+      <Description>
+        <em:id>{3550f703-e582-4d05-9a08-453d09bdfdc6}</em:id>
+        <em:minVersion>@THUNDERBIRD_VERSION@</em:minVersion>
+        <em:maxVersion>@THUNDERBIRD_VERSION@</em:maxVersion>
+      </Description>
+    </em:targetApplication>
+
+    <!-- front-end metadata -->
+    <em:name>Spatial Navigation</em:name>
+    <em:description>Navigate between links using the arrow keys in addition to the tab key.</em:description>
+    <em:creator>mozilla.org</em:creator>
+    <em:contributor>Doug Turner &lt;dougt@meer.net&gt;</em:contributor>
+    <em:homepageURL>http://www.mozilla.org/access/keyboard/snav/</em:homepageURL>
+  </Description>
+</RDF>
Index: mozilla/extensions/imagezoom/public/Makefile.in
===================================================================
--- /dev/null
+++ mozilla/extensions/imagezoom/public/Makefile.in
@@ -0,0 +1,50 @@
+# vim:set ts=8 sw=8 sts=8 noet:
+# ***** BEGIN LICENSE BLOCK *****
+# Version: MPL 1.1/GPL 2.0/LGPL 2.1
+#
+# The contents of this file are subject to the Mozilla Public License Version
+# 1.1 (the "License"); you may not use this file except in compliance with
+# the License. You may obtain a copy of the License at
+# http://www.mozilla.org/MPL/
+#
+# Software distributed under the License is distributed on an "AS IS" basis,
+# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+# for the specific language governing rights and limitations under the
+# License.
+#
+# The Original Code is the Mozilla Browser code.
+#
+# The Initial Developer of the Original Code is Google Inc.
+# Portions created by the Initial Developer are Copyright (C) 2005
+# the Initial Developer. All Rights Reserved.
+#
+# Contributor(s):
+#  Darin Fisher <darin@meer.net>
+#
+# Alternatively, the contents of this file may be used under the terms of
+# either the GNU General Public License Version 2 or later (the "GPL"), or
+# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+# in which case the provisions of the GPL or the LGPL are applicable instead
+# of those above. If you wish to allow use of your version of this file only
+# under the terms of either the GPL or the LGPL, and not to allow others to
+# use your version of this file under the terms of the MPL, indicate your
+# decision by deleting the provisions above and replace them with the notice
+# and other provisions required by the GPL or the LGPL. If you do not delete
+# the provisions above, a recipient may use your version of this file under
+# the terms of any one of the MPL, the GPL or the LGPL.
+#
+# ***** END LICENSE BLOCK *****
+
+DEPTH		= ../../..
+topsrcdir	= @top_srcdir@
+srcdir		= @srcdir@
+VPATH		= @srcdir@
+
+include $(DEPTH)/config/autoconf.mk
+
+MODULE		= imagezoom
+XPI_NAME	= imagezoom
+
+XPIDLSRCS	= nsIImageZoom.idl
+
+include $(topsrcdir)/config/rules.mk
Index: mozilla/extensions/imagezoom/public/nsIImageZoom.idl
===================================================================
--- /dev/null
+++ mozilla/extensions/imagezoom/public/nsIImageZoom.idl
@@ -0,0 +1,48 @@
+/* vim:set ts=2 sw=2 sts=2 et cin: */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is mozilla.org code.
+ *
+ * The Initial Developer of the Original Code is Google Inc.
+ * Portions created by the Initial Developer are Copyright (C) 2005
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *  Darin Fisher <darin@meer.net>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+#include "nsISupports.idl"
+
+[scriptable, uuid(44a45766-b57f-4346-9ddb-a5ecf142edf2)]
+interface nsIImageZoom : nsISupports
+{
+  /**
+   * This interface adds two numbers together and returns the result.
+   */
+  boolean set_zoom(in long a);
+  boolean get_zoom(out long a);
+};
Index: mozilla/extensions/imagezoom/src/Makefile.in
===================================================================
--- /dev/null
+++ mozilla/extensions/imagezoom/src/Makefile.in
@@ -0,0 +1,106 @@
+# vim:set ts=8 sw=8 sts=8 noet:
+# ***** BEGIN LICENSE BLOCK *****
+# Version: MPL 1.1/GPL 2.0/LGPL 2.1
+#
+# The contents of this file are subject to the Mozilla Public License Version
+# 1.1 (the "License"); you may not use this file except in compliance with
+# the License. You may obtain a copy of the License at
+# http://www.mozilla.org/MPL/
+#
+# Software distributed under the License is distributed on an "AS IS" basis,
+# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+# for the specific language governing rights and limitations under the
+# License.
+#
+# The Original Code is the Mozilla Browser code.
+#
+# The Initial Developer of the Original Code is Google Inc.
+# Portions created by the Initial Developer are Copyright (C) 2005
+# the Initial Developer. All Rights Reserved.
+#
+# Contributor(s):
+#  Darin Fisher <darin@meer.net>
+#
+# Alternatively, the contents of this file may be used under the terms of
+# either the GNU General Public License Version 2 or later (the "GPL"), or
+# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+# in which case the provisions of the GPL or the LGPL are applicable instead
+# of those above. If you wish to allow use of your version of this file only
+# under the terms of either the GPL or the LGPL, and not to allow others to
+# use your version of this file under the terms of the MPL, indicate your
+# decision by deleting the provisions above and replace them with the notice
+# and other provisions required by the GPL or the LGPL. If you do not delete
+# the provisions above, a recipient may use your version of this file under
+# the terms of any one of the MPL, the GPL or the LGPL.
+#
+# ***** END LICENSE BLOCK *****
+
+DEPTH		= ../../..
+topsrcdir	= @top_srcdir@
+srcdir		= @srcdir@
+VPATH		= @srcdir@
+
+include $(DEPTH)/config/autoconf.mk
+
+MODULE		= imagezoom
+XPI_NAME	= imagezoom
+LIBRARY_NAME    = imagezoom
+ifneq ($(OS_ARCH),WINNT)
+SHORT_LIBNAME = imagezoom
+endif
+IS_COMPONENT	= 1
+
+ifdef IS_COMPONENT
+DEFINES += -DDYN_IMAGEZOOM
+FORCE_SHARED_LIB = 1
+else
+LIBXUL_LIBRARY  = 1
+FORCE_STATIC_LIB = 1
+endif
+
+REQUIRES = \
+    dom \
+    layout \
+    content \
+    widget \
+    necko \
+    windowwatcher \
+    xpcom \
+    string \
+    pref \
+    gfx \
+    locale \
+    docshell \
+    uriloader \
+    imglib2 \
+    $(NULL)
+
+CPPSRCS		= nsImageZoom.cpp
+
+EXTRA_DSO_LDOPTS = \
+	$(XPCOM_GLUE_LDOPTS) \
+	$(NSPR_LIBS) \
+	$(NULL)
+
+EXTRA_DSO_LDOPTS += $(MOZ_COMPONENT_LIBS)
+
+EXPORT_RESOURCE = \
+	$(NULL)
+
+
+ifdef MOZ_XUL_APP
+ifdef TARGET_XPCOM_ABI
+FINAL_TARGET=$(DIST)/xpi-stage/$(XPI_NAME)/platform/$(OS_TARGET)_$(TARGET_XPCOM_ABI)
+endif
+endif
+
+#EXTRA_COMPONENTS = $(srcdir)/SimpleTest.js
+
+include $(topsrcdir)/config/rules.mk
+
+#libs:: $(EXPORT_RESOURCE)
+#	$(INSTALL) $^ $(DIST)/bin/res
+
+#install:: $(EXPORT_RESOURCE)
+#	$(SYSINSTALL) $(IFLAGS1) $^ $(DESTDIR)$(mozappdir)/res
+
Index: mozilla/extensions/imagezoom/src/nsImageZoom.cpp
===================================================================
--- /dev/null
+++ mozilla/extensions/imagezoom/src/nsImageZoom.cpp
@@ -0,0 +1,643 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim:set ts=2 sw=2 sts=2 tw=80 et cindent: */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Mozilla's Element Zooming extension.
+ *
+ * The Initial Developer of the Original Code is the Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2006
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Oleg Romashi <romaxa@gmail.com> (original author)
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+#include "nsIGenericFactory.h"
+#include "nsIObserver.h"
+#include "nsIPrefService.h"
+#include "nsIPrefBranch2.h"
+#include "nsICategoryManager.h"
+#include "nsNetUtil.h"
+#include "nsIStyleSheetService.h"
+#include "prprf.h"
+#include "nsIDOMDocument.h"
+#include "nsIDOMNodeList.h"
+#include "nsIDOMWindow.h"
+#include "nsIWindowWatcher.h"
+#include "nsIDOMWindowCollection.h"
+#include "nsIDOMDocumentView.h"
+#include "nsIDOMHTMLIFrameElement.h"
+#include "nsIFormControl.h"
+#include "nsIContent.h"
+#include "nsIDocument.h"
+#include "nsIPresShell.h"
+#include "nsIFrame.h"
+#include "nsIWebProgressListener.h"
+#include "nsWeakReference.h"
+#include "nsIWebProgress.h"
+#include "nsCURILoader.h"
+#include "nsIDocShell.h"
+#include "imgIRequest.h"
+#include "imgIContainer.h"
+#include "nsIDOMHTMLImageElement.h"
+#include "nsIDOMAbstractView.h"
+#include "nsIDOMCSSStyleDeclaration.h"
+#include "nsIDOMViewCSS.h"
+#include "nsIDOMCSSPrimitiveValue.h"
+#include "nsIDOMElementCSSInlineStyle.h"
+
+#ifdef DYN_IMAGEZOOM
+#include "nsStringAPI.h"
+#else
+#include "nsString.h"
+#endif
+
+#define EM_MULT 16.
+#define NS_FRAME_HAS_RELATIVE_SIZE 0x01000000
+#define NS_FRAME_HAS_OPTIMIZEDVIEW 0x02000000
+
+// TODO auto reload nsImageZoom in C.
+class nsImageZoom : public nsIObserver,
+  public nsIWebProgressListener,
+  public nsSupportsWeakReference
+{
+public:
+  nsImageZoom();
+  virtual ~nsImageZoom();
+  nsresult Init(void);
+  nsresult SetZoom(nsISupports *aObject = nsnull, const void * data = nsnull);
+
+  NS_DECL_ISUPPORTS
+    NS_DECL_NSIOBSERVER
+    NS_DECL_NSIWEBPROGRESSLISTENER
+
+private:
+    nsresult ZoomElement(float aCurrZoomVal, nsIDOMHTMLElement *aElement, nsIPresShell* aPresShell = nsnull, nsIDOMViewCSS * defaultCSSView = nsnull);
+    nsresult ZoomDocument(float aCurrZoomVal, nsIDOMDocument *aDocument);
+    nsresult ZoomWindow(nsIDOMWindow *aWindow);
+    nsresult ZoomElementsByTag(float aCurrZoomVal, nsIDOMDocument *aDocument, nsIPresShell* ps, nsString aTag, nsIDOMViewCSS *defaultCSSView = nsnull);
+    nsresult ZoomCheckRadioElements(float aCurrZoomVal, nsIDOMDocument *aDocument, nsIPresShell* ps, nsIDOMViewCSS *defaultCSSView = nsnull);
+    PRBool mAttached;
+    PRBool mZoomFull;
+    PRUint32 mNewZoom;
+    PRUint32 mCurZoom;
+    PRBool mRelativeZoom;
+    PRUint32 mLoadedImagesCnt;
+	PRBool mDoOnloadScaling;
+};
+
+#define DEFAULT_REGRESSION 40
+static PRInt32 regression = DEFAULT_REGRESSION;
+static PRBool gIsStarted = PR_FALSE;
+
+/* void onStateChange (in nsIWebProgress aWebProgress, in nsIRequest aRequest, in unsigned long aStateFlags, in nsresult aStatus); */
+NS_IMETHODIMP nsImageZoom::OnStateChange(nsIWebProgress *aWebProgress, nsIRequest *aRequest, PRUint32 aStateFlags, nsresult aStatus)
+{
+  nsresult rv;
+//  printf("nsImageZoom::OnStateChange: mDoOnloadScaling: %i\n", mDoOnloadScaling);
+  if (!mDoOnloadScaling)
+	return NS_ERROR_NOT_IMPLEMENTED;
+
+  nsCOMPtr<imgIRequest> imgReq = do_QueryInterface(aRequest, &rv);
+  if (!NS_FAILED(rv) && imgReq) {
+    nsCOMPtr<imgIContainer> imgcont;
+    imgReq->GetImage(getter_AddRefs(imgcont));
+    if (!NS_FAILED(rv) && imgcont) {
+static PRUint32 gWidth = 0, gHeight = 0;
+      PRInt32 aWidth = 0, aHeight = 0;
+      imgcont->GetWidth(&aWidth);
+      imgcont->GetHeight(&aHeight);
+      if ((aWidth && aHeight)
+	   && !(aWidth == gWidth && gHeight == aHeight)
+	   ) {
+        mLoadedImagesCnt++;
+		gWidth = aWidth;
+		gHeight = aHeight;
+      }
+    }
+  }
+  if (((aStateFlags & nsIWebProgressListener::STATE_IS_DOCUMENT
+	  || aStateFlags & nsIWebProgressListener::STATE_IS_NETWORK)
+	  && aStateFlags & nsIWebProgressListener::STATE_STOP)
+	) {
+	  if (gIsStarted)
+		gIsStarted = PR_FALSE;
+
+      if (mLoadedImagesCnt) {
+        mZoomFull = PR_FALSE;
+        mRelativeZoom = PR_TRUE;
+        nsCOMPtr<nsIDOMWindow> domWin;
+        rv = aWebProgress->GetDOMWindow(getter_AddRefs(domWin));
+        NS_ENSURE_SUCCESS(rv, NS_OK);
+		float testzoomval;
+		domWin->GetTextZoom(&testzoomval);
+        ZoomWindow(domWin);
+        mLoadedImagesCnt = 0;
+      }
+	  regression = DEFAULT_REGRESSION;
+  }
+  if ((aStateFlags & nsIWebProgressListener::STATE_IS_NETWORK) &&
+      (aStateFlags & nsIWebProgressListener::STATE_START)) {
+	  gIsStarted = PR_TRUE;
+  }
+
+  if (aStateFlags & nsIWebProgressListener::STATE_IS_REQUEST
+	  && mLoadedImagesCnt > regression
+	  && gIsStarted
+  ) {
+      mZoomFull = PR_FALSE;
+      mRelativeZoom = PR_TRUE;
+      nsCOMPtr<nsIDOMWindow> domWin;
+      rv = aWebProgress->GetDOMWindow(getter_AddRefs(domWin));
+      NS_ENSURE_SUCCESS(rv, NS_OK);
+      ZoomWindow(domWin);
+      mLoadedImagesCnt = 0;
+	  regression = 0;
+  }
+  return NS_ERROR_NOT_IMPLEMENTED;
+}
+
+NS_IMETHODIMP nsImageZoom::OnProgressChange(nsIWebProgress *aWebProgress, nsIRequest *aRequest,
+                                            PRInt32 aCurSelfProgress, PRInt32 aMaxSelfProgress, PRInt32 aCurTotalProgress, PRInt32 aMaxTotalProgress)
+{
+  return NS_ERROR_NOT_IMPLEMENTED;
+}
+
+NS_IMETHODIMP nsImageZoom::OnLocationChange(nsIWebProgress *aWebProgress, nsIRequest *aRequest, nsIURI *aLocation)
+{
+  return NS_ERROR_NOT_IMPLEMENTED;
+}
+
+NS_IMETHODIMP nsImageZoom::OnStatusChange(nsIWebProgress *aWebProgress, nsIRequest *aRequest, nsresult aStatus, const PRUnichar *aMessage)
+{
+  return NS_ERROR_NOT_IMPLEMENTED;
+}
+
+NS_IMETHODIMP nsImageZoom::OnSecurityChange(nsIWebProgress *aWebProgress, nsIRequest *aRequest, PRUint32 aState)
+{
+  return NS_ERROR_NOT_IMPLEMENTED;
+}
+
+
+nsImageZoom::nsImageZoom()
+{
+//  printf("nsImageZoom::nsImageZoom????????????????????????????????????: %p\n", this);
+  mAttached = PR_FALSE;
+  mNewZoom = 100;
+  mCurZoom = 100;
+  mLoadedImagesCnt = 0;
+  mRelativeZoom = PR_TRUE;
+  mZoomFull = PR_TRUE;
+  mDoOnloadScaling = PR_FALSE;
+}
+
+nsImageZoom::~nsImageZoom()
+{
+  // Remove the progress listener
+  nsCOMPtr<nsIWebProgress> progress =
+    do_GetService(NS_DOCUMENTLOADER_SERVICE_CONTRACTID);
+  if (progress)
+    progress->RemoveProgressListener(this);
+}
+
+static nsresult
+GetDocumentPresShell(nsIDOMDocument *doc, nsIPresShell* *aPresShell)
+{
+  nsCOMPtr<nsIDocument> iDoc = do_QueryInterface(doc);
+  NS_ENSURE_TRUE(iDoc, NS_ERROR_FAILURE);
+  //iDoc->FlushPendingNotifications(Flush_Layout);
+  *aPresShell = iDoc->GetPrimaryShell();
+  NS_ENSURE_TRUE(*aPresShell, NS_ERROR_FAILURE);
+  NS_ADDREF(*aPresShell);
+  return NS_OK;
+}
+
+static nsresult
+GetNodePresShell(nsIDOMNode *node, nsIPresShell* *aPresShell)
+{
+  NS_ENSURE_TRUE(node, NS_ERROR_FAILURE);
+  nsCOMPtr<nsIDOMDocument> doc;
+  node->GetOwnerDocument(getter_AddRefs(doc));
+  return GetDocumentPresShell(doc, aPresShell);
+}
+
+static nsresult
+SetRelativeScale(nsIDOMHTMLElement *aElement, PRUint32 aWidth, PRUint32 aHeight, float aCurZoom)
+{
+  nsresult rv;
+  nsString stAttr;
+  rv = aElement->GetAttribute(NS_LITERAL_STRING("style"), stAttr);
+  char buf[50];
+  float nw = (float)aWidth / aCurZoom;
+  float nh = (float)aHeight / aCurZoom;
+  snprintf(buf, sizeof(buf), ";height:%gem;width:%gem;font-size:16px;", nh, nw);
+  buf[sizeof(buf) - 1] = '\0';
+  stAttr.AppendLiteral(buf);
+  aElement->SetAttribute(NS_LITERAL_STRING("style"), stAttr);
+  return rv;
+}
+
+static nsresult
+ScaleImages(nsIDOMHTMLImageElement *aElement, float aWidth, float aHeight)
+{
+  nsresult rv;
+#if 1
+  aElement->SetWidth(aWidth);
+  aElement->SetHeight(aHeight);
+#else
+  nsString stAttr;
+  rv = aElement->GetAttribute(NS_LITERAL_STRING("style"), stAttr);
+  char buf[50];
+  snprintf(buf, sizeof(buf), ";height:%ipx;width:%ipx;", aHeight, aWidth);
+  buf[sizeof(buf) - 1] = '\0';
+  stAttr.AppendLiteral(buf);
+  aElement->SetAttribute(NS_LITERAL_STRING("style"), stAttr);
+#endif
+  return rv;
+}
+
+static inline nsresult
+CheckForEmStyle(nsIDOMHTMLElement *aElement, nsIDOMViewCSS *defaultCSSView)
+{
+  nsresult rv = NS_ERROR_FAILURE;
+/*  nsCOMPtr<nsIDOMElementCSSInlineStyle> inlineStyles = do_QueryInterface(aElement, &rv);
+  nsCOMPtr<nsIDOMCSSStyleDeclaration> computedStyle;
+  rv = inlineStyles->GetStyle(getter_AddRefs(computedStyle));*/
+/*  rv = defaultCSSView->GetComputedStyle(aElement, EmptyString(),
+    	                                getter_AddRefs(computedStyle));*/
+/*  NS_ENSURE_TRUE(computedStyle, NS_ERROR_FAILURE);
+  nsString aSH, aSW;
+  rv = computedStyle->GetPropertyValue(NS_LITERAL_STRING("width"), aSW);
+  NS_ENSURE_SUCCESS(rv, rv);
+  rv = computedStyle->GetPropertyValue(NS_LITERAL_STRING("height"), aSH);
+  NS_ENSURE_SUCCESS(rv, rv);
+  rv = !aSW.IsEmpty() && StringEndsWith(aSW, NS_LITERAL_STRING("em")) ? NS_OK : NS_ERROR_FAILURE;
+
+  printf("W:%s, H:%s, %x\n", NS_ConvertUTF16toUTF8(aSW).get(), NS_ConvertUTF16toUTF8(aSH).get(), rv);*/
+/*
+  nsCOMPtr<nsIDOMCSSValue> cssValue;
+  nsCOMPtr<nsIDOMCSSPrimitiveValue> primitiveValue;
+  rv = computedStyle->GetPropertyCSSValue(NS_LITERAL_STRING("width"),
+                                         getter_AddRefs(cssValue));
+  NS_ENSURE_SUCCESS(rv, rv);
+  primitiveValue = do_QueryInterface(cssValue, &rv);
+  NS_ENSURE_SUCCESS(rv, rv);
+  PRUint16 aHPrimitiveType, aWPrimitiveType;
+  nsString aSHPrimitiveType, aSWPrimitiveType;
+  primitiveValue->GetPrimitiveType(&aWPrimitiveType);
+  primitiveValue->GetStringValue(aSWPrimitiveType);
+  rv = computedStyle->GetPropertyCSSValue(NS_LITERAL_STRING("height"),
+                                         getter_AddRefs(cssValue));
+  NS_ENSURE_SUCCESS(rv, rv);
+  primitiveValue = do_QueryInterface(cssValue, &rv);
+  NS_ENSURE_SUCCESS(rv, rv);
+  primitiveValue->GetPrimitiveType(&aHPrimitiveType);
+  primitiveValue->GetStringValue(aSHPrimitiveType);
+
+  printf("Width: %x, Height: %x, W:%s, H:%s\n", aWPrimitiveType, aHPrimitiveType, NS_ConvertUTF16toUTF8(aSWPrimitiveType).get(), NS_ConvertUTF16toUTF8(aSHPrimitiveType).get());
+  */
+  return rv;
+}
+
+nsresult
+nsImageZoom::ZoomElement(float aCurZoom, nsIDOMHTMLElement *aElement, nsIPresShell* aPresShell, nsIDOMViewCSS *defaultCSSView)
+{
+  nsresult rv = NS_ERROR_FAILURE;
+  nsRect rect;
+
+/*  if (NS_SUCCEEDED(CheckForEmStyle(aElement, defaultCSSView)))
+	return NS_ERROR_FAILURE;*/
+
+  nsIFrame* frame = nsnull;
+  if (aPresShell) {
+    nsCOMPtr<nsIContent> iContent = do_QueryInterface(aElement, &rv);
+    NS_ENSURE_SUCCESS(rv, rv);
+    frame = aPresShell->GetPrimaryFrameFor(iContent);
+    NS_ENSURE_TRUE(frame, rv);
+    rect = frame->GetRect();
+    nsPresContext *context = aPresShell->GetPresContext();
+    if (!context)
+      return NS_ERROR_FAILURE;
+    rect.width = context->AppUnitsToDevPixels(rect.width);
+    rect.height = context->AppUnitsToDevPixels(rect.height);
+  }
+  if (!rect.width || !rect.height)
+    return NS_ERROR_FAILURE;
+
+  PRUint32 st = frame->GetStateBits();
+  if (st & NS_FRAME_HAS_RELATIVE_SIZE)
+    return NS_OK;
+  else
+    frame->AddStateBits(NS_FRAME_HAS_RELATIVE_SIZE);
+
+  if (!mRelativeZoom) {
+    nsCOMPtr<nsIDOMHTMLImageElement> imgel = do_QueryInterface(aElement, &rv);
+    NS_ENSURE_SUCCESS(rv, rv);
+    float scale = (float)mNewZoom/(float)mCurZoom;
+    rv = ScaleImages(imgel, rect.width * scale, rect.height * scale);
+    return rv;
+  }
+  rv = SetRelativeScale(aElement, rect.width, rect.height, aCurZoom);
+  return rv;
+}
+
+nsresult
+nsImageZoom::ZoomElementsByTag(float aCurrZoomVal, nsIDOMDocument *aDocument, nsIPresShell* ps, nsString aTag, nsIDOMViewCSS *defaultCSSView)
+{
+  nsresult rv;
+  nsCOMPtr<nsIDOMNodeList> nodelist;
+  if (aDocument)
+    rv = aDocument->GetElementsByTagName( aTag, getter_AddRefs( nodelist ) );
+
+  if( !nodelist )
+    return NS_ERROR_FAILURE;
+  PRUint32 length, zoomed;
+  rv = nodelist->GetLength(&length);
+  NS_ENSURE_SUCCESS(rv, rv);
+  zoomed = length;
+  nsCOMPtr<nsIDOMNode> node;
+  for (PRUint32 i = 0; i < length; i++) {
+    rv |= nodelist->Item(i, getter_AddRefs(node));
+    nsCOMPtr<nsIDOMHTMLElement> element = do_QueryInterface(node, &rv);
+    if (!NS_FAILED(rv) && element)
+      rv |= ZoomElement(aCurrZoomVal, element, ps, defaultCSSView);
+    if (NS_FAILED(rv))
+      zoomed--;
+    rv = NS_OK;
+  }
+  return rv;
+}
+
+nsresult
+nsImageZoom::ZoomCheckRadioElements(float aCurrZoomVal, nsIDOMDocument *aDocument, nsIPresShell* ps, nsIDOMViewCSS *defaultCSSView)
+{
+  nsresult rv;
+  nsCOMPtr<nsIDOMNodeList> nodelist;
+  if (aDocument)
+    rv = aDocument->GetElementsByTagName( NS_LITERAL_STRING( "input" ), getter_AddRefs( nodelist ) );
+
+  if( !nodelist )
+    return NS_ERROR_FAILURE;
+  PRUint32 length;
+  rv = nodelist->GetLength(&length);
+  NS_ENSURE_SUCCESS(rv, rv);
+  nsCOMPtr<nsIDOMNode> node;
+  for (PRUint32 i = 0; i < length; i++) {
+    rv |= nodelist->Item(i, getter_AddRefs(node));
+    NS_ENSURE_SUCCESS(rv, rv);
+    nsCOMPtr<nsIFormControl> ctrl = do_QueryInterface(node, &rv);
+    NS_ENSURE_SUCCESS(rv, rv);
+    switch (ctrl->GetType())
+    {
+    case NS_FORM_INPUT_CHECKBOX:
+    case NS_FORM_INPUT_RADIO:
+      {
+        nsCOMPtr<nsIDOMHTMLElement> element = do_QueryInterface(node, &rv);
+        NS_ENSURE_SUCCESS(rv, rv);
+        rv |= ZoomElement(aCurrZoomVal, element, ps, defaultCSSView);
+        break;
+      }
+    default:
+      break;
+    }
+  }
+  return rv;
+}
+
+
+nsresult
+nsImageZoom::ZoomDocument(float aCurrZoomVal, nsIDOMDocument *aDocument)
+{
+  nsresult rv;
+  nsCOMPtr<nsIPresShell> ps;
+
+  nsCOMPtr<nsIDOMDocumentView> docView(do_QueryInterface(aDocument));
+  NS_ENSURE_TRUE(docView, NS_ERROR_FAILURE);
+  nsCOMPtr<nsIDOMAbstractView> defaultView;
+  docView->GetDefaultView(getter_AddRefs(defaultView));
+  nsCOMPtr<nsIDOMViewCSS> defaultCSSView(do_QueryInterface(defaultView));
+  NS_ENSURE_TRUE(defaultCSSView, NS_ERROR_FAILURE);
+
+  GetDocumentPresShell(aDocument, getter_AddRefs(ps));
+  ZoomElementsByTag(aCurrZoomVal, aDocument, ps, NS_LITERAL_STRING( "img" ), defaultCSSView);
+  ZoomCheckRadioElements(aCurrZoomVal, aDocument, ps, defaultCSSView);
+
+  nsCOMPtr<nsIDOMNodeList> nodelist;
+  PRUint32 length;
+  if (aDocument)
+    rv = aDocument->GetElementsByTagName( NS_LITERAL_STRING( "iframe" ), getter_AddRefs( nodelist ) );
+  if( !nodelist )
+    return NS_ERROR_FAILURE;
+
+  rv = nodelist->GetLength(&length);
+  NS_ENSURE_SUCCESS(rv, rv);
+  nsCOMPtr<nsIDOMNode> node;
+  for (PRUint32 i = 0; i < length; i++) {
+    rv |= nodelist->Item(i, getter_AddRefs(node));
+    NS_ENSURE_SUCCESS(rv, rv);
+    nsCOMPtr<nsIDOMHTMLIFrameElement> element = do_QueryInterface(node, &rv);
+    NS_ENSURE_SUCCESS(rv, rv);
+    nsCOMPtr<nsIDOMDocument> doc;
+    rv |= element->GetContentDocument(getter_AddRefs(doc));
+    rv |= ZoomDocument(aCurrZoomVal, doc);
+  }
+  return rv;
+}
+
+nsresult
+nsImageZoom::ZoomWindow(nsIDOMWindow *aWindow)
+{
+  nsresult rv;
+
+  if (!aWindow)
+    return NS_ERROR_FAILURE;
+  nsCOMPtr<nsIDOMDocument> doc;
+  rv = aWindow->GetDocument(getter_AddRefs(doc));
+  NS_ENSURE_SUCCESS(rv, rv);
+  ZoomDocument(EM_MULT, doc);
+
+  nsCOMPtr <nsIDOMWindowCollection> frames;
+  rv = aWindow->GetFrames(getter_AddRefs (frames));
+  NS_ENSURE_SUCCESS(rv, rv);
+  PRUint32 frameCount = 0;
+  rv = frames->GetLength (&frameCount);
+  nsCOMPtr <nsIDOMWindow> curWindow;
+  for (unsigned int i= 0; i < frameCount; i++) {
+    rv = frames->Item(i, getter_AddRefs (curWindow));
+    if (!curWindow || curWindow == aWindow)
+      continue;
+    ZoomWindow(curWindow);
+  }
+  if (!mRelativeZoom) {
+    aWindow->SetTextZoom(mNewZoom / 100.);
+  }
+  return rv;
+}
+
+nsresult
+nsImageZoom::SetZoom(nsISupports *aObject, const void * data)
+{
+  nsresult rv;
+
+  mLoadedImagesCnt = 0;
+
+  if (!mAttached) {
+  	  nsCOMPtr<nsIWebProgress> progress =
+    	do_GetService(NS_DOCUMENTLOADER_SERVICE_CONTRACTID);
+  	  if (progress)
+    	progress->AddProgressListener(
+          this, nsIWebProgress::NOTIFY_STATE_ALL);
+  	  mAttached = PR_TRUE;
+  }
+
+  nsCOMPtr<nsIDOMWindow> parent = nsnull;
+  if (aObject) {
+    parent = do_QueryInterface(aObject, &rv);
+    if (NS_FAILED(rv) || !parent) {
+      nsCOMPtr<nsIDOMNode> node = do_QueryInterface(aObject, &rv);
+      if (NS_SUCCEEDED(rv) && node) {
+        nsCOMPtr <nsIDOMDocument> nodeDoc;
+        rv = node->GetOwnerDocument(getter_AddRefs(nodeDoc));
+        NS_ENSURE_SUCCESS(rv, rv);
+        nsCOMPtr <nsIDOMDocumentView> docView = do_QueryInterface(nodeDoc, &rv);
+        NS_ENSURE_SUCCESS(rv, rv);
+        nsCOMPtr <nsIDOMAbstractView> absView;
+        NS_ENSURE_SUCCESS(rv, rv);
+        rv = docView->GetDefaultView(getter_AddRefs(absView));
+        NS_ENSURE_SUCCESS(rv, rv);
+        parent = do_QueryInterface(absView, &rv);
+        NS_ENSURE_SUCCESS(rv, rv);
+      }
+    }
+  }
+  if (!parent) {
+    nsCOMPtr<nsIWindowWatcher> wwatcher = do_GetService(NS_WINDOWWATCHER_CONTRACTID, &rv);
+    NS_ENSURE_SUCCESS(rv, rv);
+    rv = wwatcher->GetActiveWindow(getter_AddRefs(parent));
+    NS_ENSURE_SUCCESS(rv, rv);
+  }
+//static nsIDOMWindow * sgParent = nsnull;
+//  if (sgParent != parent) {
+	ZoomWindow(parent);
+//  }
+//  sgParent = parent;
+  return rv;
+}
+
+#include "nsIDOMNSHTMLElement.h"
+
+NS_IMPL_ISUPPORTS3(nsImageZoom, nsIObserver, nsIWebProgressListener, nsISupportsWeakReference)
+
+NS_IMETHODIMP
+nsImageZoom::Observe(nsISupports *aSubject, const char *aTopic, const PRUnichar *aData)
+{
+  nsresult rv;
+  mNewZoom = 100;
+  mZoomFull = PR_TRUE;
+  if (!strcmp(aTopic, "change_int_zoom") && aData) {
+    mZoomFull = PR_FALSE;
+    mRelativeZoom = PR_FALSE;
+    PR_sscanf((const char*)aData, "%i:%i", &mCurZoom, &mNewZoom);
+    return SetZoom(aSubject);
+  } else
+  if (!strcmp(aTopic, "scrool_to_last_node") && aSubject) {
+	nsCOMPtr<nsIDOMNSHTMLElement> el = do_QueryInterface(aSubject, &rv);
+	NS_ENSURE_SUCCESS(rv, rv);
+	el->ScrollIntoView(PR_TRUE);
+  }
+  else if (!strcmp(aTopic, "set_onload_scaling")) {
+	mDoOnloadScaling = PR_TRUE;
+    if (!mAttached) {
+  	  nsCOMPtr<nsIWebProgress> progress =
+    	do_GetService(NS_DOCUMENTLOADER_SERVICE_CONTRACTID);
+  	  if (progress)
+    	progress->AddProgressListener(
+          this, nsIWebProgress::NOTIFY_STATE_ALL);
+  	  mAttached = PR_TRUE;
+	}
+    mZoomFull = PR_FALSE;
+    mRelativeZoom = PR_TRUE;
+	return NS_OK;
+  }
+  else if (!strcmp(aTopic, "unset_onload_scaling")) {
+	mDoOnloadScaling = PR_FALSE;
+	if (mAttached) {
+    nsCOMPtr<nsIWebProgress> progress =
+    do_GetService(NS_DOCUMENTLOADER_SERVICE_CONTRACTID);
+    if (progress)
+	  progress->RemoveProgressListener(this);
+	mAttached = PR_FALSE;
+	}
+    mZoomFull = PR_FALSE;
+    mRelativeZoom = PR_TRUE;
+	return NS_OK;
+  }
+  else if (!strcmp(aTopic, "set_images_scaling")) {
+    mZoomFull = PR_FALSE;
+    mRelativeZoom = PR_TRUE;
+	mDoOnloadScaling = aData ? PR_TRUE : PR_FALSE;
+    return SetZoom(aSubject);
+  }
+  else if (!strcmp(aTopic, "set_optimized_view")) {
+    mZoomFull = PR_FALSE;
+    mRelativeZoom = PR_TRUE;
+    return SetZoom(aSubject, aData);
+  }
+  else if (!strcmp(aTopic, "set_full_zoom") && aData) {
+    mZoomFull = PR_TRUE;
+    PR_sscanf((const char*)aData, "%i", &mNewZoom);
+    return SetZoom(aSubject);
+  }
+
+  return NS_OK;
+}
+
+
+//------------------------------------------------------------------------------
+//  XPCOM REGISTRATION BELOW
+//------------------------------------------------------------------------------
+
+#define ImageZoom_CID \
+{  0x44a45766, 0xb57f, 0x4346, \
+  {0x9d, 0xdb, 0xa5, 0xec, 0xf1, 0x42, 0xed, 0xf2} }
+
+#define ImageZoom_ContractID "@mozilla.org/extensions/imagezoom;1"
+
+NS_GENERIC_FACTORY_CONSTRUCTOR(nsImageZoom)
+
+  static const nsModuleComponentInfo components[] =
+{
+  { "nsImageZoomService",
+    ImageZoom_CID,
+    ImageZoom_ContractID,
+    nsImageZoomConstructor
+  }
+};
+
+
+NS_IMPL_NSGETMODULE(nsImageZoomModule, components)
+

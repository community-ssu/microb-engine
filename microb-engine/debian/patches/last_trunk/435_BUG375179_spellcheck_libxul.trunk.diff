# BMO 375179. Patch imported from the bug.
# Allow building spellchecker as separate extension
Index: mozilla/extensions/spellcheck/src/Makefile.in
===================================================================
--- mozilla.orig/extensions/spellcheck/src/Makefile.in
+++ mozilla/extensions/spellcheck/src/Makefile.in
@@ -43,17 +43,24 @@
 include $(DEPTH)/config/autoconf.mk
 
 MODULE		= spellchecker
 LIBRARY_NAME	= spellchecker
 MODULE_NAME     = mozSpellCheckerModule
 SHORT_LIBNAME   = spellchk
 EXPORT_LIBRARY  = 1
 IS_COMPONENT	= 1
+
+ifdef IS_COMPONENT
+FORCE_SHARED_LIB = 1
+else
 LIBXUL_LIBRARY  = 1
+FORCE_STATIC_LIB = 1
+endif
+
 
 REQUIRES	= xpcom \
 		  string \
 		  editor \
 		  content \
 		  layout \
 		  dom \
 		  necko \
@@ -78,21 +85,28 @@
 ifeq (cocoa,$(MOZ_WIDGET_TOOLKIT))
 SHARED_LIBRARY_LIBS += ../osxspell/src/$(LIB_PREFIX)osxspell_s.$(LIB_SUFFIX)
 LOCAL_INCLUDES += -I$(srcdir)/../osxspell/src
 else
 SHARED_LIBRARY_LIBS += ../hunspell/src/$(LIB_PREFIX)hunspell_s.$(LIB_SUFFIX)
 LOCAL_INCLUDES += -I$(srcdir)/../hunspell/src
 endif
 
-EXTRA_DSO_LDOPTS = \
+EXTRA_DSO_LDOPTS += \
+	  $(XPCOM_GLUE_LDOPTS) \
+	  $(XPCOM_FROZEN_LDOPTS) \
 		$(LIBS_DIR) \
+	  $(EXTRA_DSO_LIBS) \
 		$(MOZ_COMPONENT_LIBS) \
-		$(MOZ_UNICHARUTIL_LIBS) \
-		$(NULL)
+	  $(NULL)
+
+# Some stuff still exists and it undefined, like NS_NewAdoptingStringEnumerator
+EXTRA_DSO_LDOPTS += \
+	  ../../../xpcom/build/$(LIB_PREFIX)xpcom_core.$(LIB_SUFFIX) \
+	  $(NULL)
 
 include $(topsrcdir)/config/rules.mk
 
 ifdef GNU_CC
 CFLAGS   += -fno-unit-at-a-time
 CXXFLAGS += -fno-unit-at-a-time
 endif
 
Index: mozilla/extensions/spellcheck/src/mozSpellChecker.h
===================================================================
--- mozilla.orig/extensions/spellcheck/src/mozSpellChecker.h
+++ mozilla/extensions/spellcheck/src/mozSpellChecker.h
@@ -35,17 +35,17 @@
  *
  * ***** END LICENSE BLOCK ***** */
 
 #ifndef mozSpellChecker_h__
 #define mozSpellChecker_h__
 
 #include "nsCOMPtr.h"
 #include "nsISpellChecker.h"
-#include "nsString.h"
+#include "nsStringGlue.h"
 #include "nsITextServicesDocument.h"
 #include "mozIPersonalDictionary.h"
 #include "mozISpellCheckingEngine.h"
 #include "nsVoidArray.h"
 #include "mozISpellI18NUtil.h"
 
 class mozSpellChecker : public nsISpellChecker
 {
Index: mozilla/extensions/spellcheck/src/mozPersonalDictionary.h
===================================================================
--- mozilla.orig/extensions/spellcheck/src/mozPersonalDictionary.h
+++ mozilla/extensions/spellcheck/src/mozPersonalDictionary.h
@@ -34,17 +34,17 @@
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #ifndef mozPersonalDictionary_h__
 #define mozPersonalDictionary_h__
 
 #include "nsCOMPtr.h"
-#include "nsString.h"
+#include "nsStringGlue.h"
 #include "nsVoidArray.h"
 #include "mozIPersonalDictionary.h"
 #include "nsIUnicodeEncoder.h"
 #include "nsIObserver.h"
 #include "nsWeakReference.h"
 #include "nsTHashtable.h"
 #include "nsCRT.h"
 
Index: mozilla/extensions/spellcheck/src/mozSpellChecker.cpp
===================================================================
--- mozilla.orig/extensions/spellcheck/src/mozSpellChecker.cpp
+++ mozilla/extensions/spellcheck/src/mozSpellChecker.cpp
@@ -35,16 +35,18 @@
  *
  * ***** END LICENSE BLOCK ***** */
 
 
 #include "mozSpellChecker.h"
 #include "nsIServiceManager.h"
 #include "mozISpellI18NManager.h"
 #include "nsIStringEnumerator.h"
+#include "nsServiceManagerUtils.h"
+#include "nsMemory.h"
 
 #define UNREASONABLE_WORD_LENGTH 64
 
 NS_IMPL_ISUPPORTS1(mozSpellChecker, nsISpellChecker)
 
 mozSpellChecker::mozSpellChecker()
 {
 }
@@ -317,17 +319,17 @@
   NS_FREE_XPCOM_ALLOCATED_POINTER_ARRAY(count, words);
 
   return NS_OK;
 }
 
 NS_IMETHODIMP 
 mozSpellChecker::GetCurrentDictionary(nsAString &aDictionary)
 {
-  nsXPIDLString dictname;
+  nsString dictname;
   mSpellCheckingEngine->GetDictionary(getter_Copies(dictname));
   aDictionary = dictname;
   return NS_OK;
 }
 
 NS_IMETHODIMP 
 mozSpellChecker::SetCurrentDictionary(const nsAString &aDictionary)
 {
@@ -335,17 +337,17 @@
     return NS_ERROR_NULL_POINTER;
  
   nsresult res;
   res = mSpellCheckingEngine->SetDictionary(PromiseFlatString(aDictionary).get());
   if(NS_FAILED(res)){
     NS_WARNING("Dictionary load failed");
     return res;
   }
-  nsXPIDLString language;
+  nsString language;
   
   nsCOMPtr<mozISpellI18NManager> serv(do_GetService("@mozilla.org/spellchecker/i18nmanager;1", &res));
   if(serv && NS_SUCCEEDED(res)){
     res = serv->GetUtil(language.get(),getter_AddRefs(mConverter));
   }
   return res;
 }
 
Index: mozilla/extensions/spellcheck/src/mozPersonalDictionary.cpp
===================================================================
--- mozilla.orig/extensions/spellcheck/src/mozPersonalDictionary.cpp
+++ mozilla/extensions/spellcheck/src/mozPersonalDictionary.cpp
@@ -32,30 +32,33 @@
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "mozPersonalDictionary.h"
 #include "nsIUnicharInputStream.h"
+#ifdef MOZILLA_INTERNAL_API
 #include "nsReadableUtils.h"
+#endif
 #include "nsIFile.h"
 #include "nsAppDirectoryServiceDefs.h"
 #include "nsICharsetConverterManager.h"
 #include "nsICharsetAlias.h"
 #include "nsIObserverService.h"
 #include "nsIPrefService.h"
 #include "nsIPrefBranch.h"
 #include "nsIPrefBranch2.h"
 #include "nsIWeakReference.h"
 #include "nsCRT.h"
 #include "nsNetUtil.h"
 #include "nsStringEnumerator.h"
 #include "nsUnicharInputStream.h"
+#include "nsDirectoryServiceUtils.h"
 
 #define MOZ_PERSONAL_DICT_NAME "persdict.dat"
 
 const int kMaxWordLen=256;
 
 /**
  * This is the most braindead implementation of a personal dictionary possible.
  * There is not much complexity needed, though.  It could be made much faster,
Index: mozilla/extensions/spellcheck/src/mozEnglishWordUtils.h
===================================================================
--- mozilla.orig/extensions/spellcheck/src/mozEnglishWordUtils.h
+++ mozilla/extensions/spellcheck/src/mozEnglishWordUtils.h
@@ -37,17 +37,17 @@
 
 #ifndef mozEnglishWordUtils_h__
 #define mozEnglishWordUtils_h__
 
 #include "nsCOMPtr.h"
 #include "mozISpellI18NUtil.h"
 #include "nsIUnicodeEncoder.h"
 #include "nsIUnicodeDecoder.h"
-#include "nsString.h"
+#include "nsStringGlue.h"
 #include "nsICaseConversion.h"
 
 #include "mozITXTToHTMLConv.h" 
 
 class mozEnglishWordUtils : public mozISpellI18NUtil
 {
 public:
   NS_DECL_ISUPPORTS
Index: mozilla/extensions/spellcheck/src/mozSpellI18NManager.cpp
===================================================================
--- mozilla.orig/extensions/spellcheck/src/mozSpellI18NManager.cpp
+++ mozilla/extensions/spellcheck/src/mozSpellI18NManager.cpp
@@ -33,17 +33,17 @@
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "mozSpellI18NManager.h"
 #include "mozEnglishWordUtils.h"
 #include "mozGenericWordUtils.h"
-#include "nsString.h"
+#include "nsStringGlue.h"
 
 NS_IMPL_ISUPPORTS1(mozSpellI18NManager, mozISpellI18NManager)
 
 mozSpellI18NManager::mozSpellI18NManager()
 {
   /* member initializers and constructor code */
 }
 
Index: mozilla/extensions/spellcheck/src/mozInlineSpellChecker.cpp
===================================================================
--- mozilla.orig/extensions/spellcheck/src/mozInlineSpellChecker.cpp
+++ mozilla/extensions/spellcheck/src/mozInlineSpellChecker.cpp
@@ -85,21 +85,23 @@
 #include "nsIPrefBranch.h"
 #include "nsIPrefService.h"
 #include "nsIRunnable.h"
 #include "nsISelection.h"
 #include "nsISelection2.h"
 #include "nsISelectionController.h"
 #include "nsIServiceManager.h"
 #include "nsITextServicesFilter.h"
-#include "nsString.h"
+#include "nsStringGlue.h"
 #include "nsThreadUtils.h"
 #include "nsUnicharUtils.h"
 #include "nsIContent.h"
 #include "nsIEventStateManager.h"
+#include "nsServiceManagerUtils.h"
+#include "nsComponentManagerUtils.h"
 
 // Set to spew messages to the console about what is happening.
 //#define DEBUG_INLINESPELL
 
 // the number of milliseconds that we will take at once to do spellchecking
 #define INLINESPELL_CHECK_TIMEOUT 50
 
 // The number of words to check before we look at the time to see if
@@ -1084,25 +1086,25 @@
     aNode->GetParentNode(getter_AddRefs(parent));
 
     while (parent)
     {
       nsCOMPtr<nsIDOMElement> parentElement = do_QueryInterface(parent);
       if (!parentElement)
         break;
 
-      nsAutoString parentTagName;
+      nsString parentTagName;
       parentElement->GetTagName(parentTagName);
 
-      if (parentTagName.Equals(NS_LITERAL_STRING("blockquote"), nsCaseInsensitiveStringComparator()))
+      if (parentTagName.LowerCaseEqualsLiteral("blockquote"))
       {
         *checkSpelling = PR_FALSE;
         break;
       }
-      else if (parentTagName.Equals(NS_LITERAL_STRING("pre"), nsCaseInsensitiveStringComparator()))
+      else if (parentTagName.LowerCaseEqualsLiteral("pre"))
       {
         nsAutoString classname;
         parentElement->GetAttribute(NS_LITERAL_STRING("class"),classname);
         if (classname.Equals(NS_LITERAL_STRING("moz-signature")))
           *checkSpelling = PR_FALSE;
       }
 
       nsCOMPtr<nsIDOMNode> nextParent;
Index: mozilla/extensions/spellcheck/src/mozInlineSpellWordUtil.h
===================================================================
--- mozilla.orig/extensions/spellcheck/src/mozInlineSpellWordUtil.h
+++ mozilla/extensions/spellcheck/src/mozInlineSpellWordUtil.h
@@ -35,17 +35,17 @@
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "nsCOMPtr.h"
 #include "nsIDOMDocument.h"
 #include "nsIDOMDocumentRange.h"
 #include "nsIDOMViewCSS.h"
 #include "nsIDocument.h"
-#include "nsString.h"
+#include "nsStringGlue.h"
 #include "nsTArray.h"
 
 //#define DEBUG_SPELLCHECK
 
 class nsIDOMRange;
 class nsIDOMNode;
 
 /**
@@ -108,17 +108,17 @@
   // An empty word and a NULL range are returned when we are done checking.
   // aSkipChecking will be set if the word is "special" and shouldn't be
   // checked (e.g., an email address).
   nsresult GetNextWord(nsAString& aText, nsIDOMRange** aRange,
                        PRBool* aSkipChecking);
 
   // Call to normalize some punctuation. This function takes an autostring
   // so we can access characters directly.
-  static void NormalizeWord(nsSubstring& aWord);
+  static void NormalizeWord(nsString& aWord);
 
   nsIDOMDocumentRange* GetDocumentRange() const { return mDOMDocumentRange; }
   nsIDocument* GetDocument() const { return mDocument; }
   nsIDOMNode* GetRootNode() { return mRootNode; }
 
 private:
 
   // cached stuff for the editor, set by Init
Index: mozilla/extensions/spellcheck/src/mozInlineSpellWordUtil.cpp
===================================================================
--- mozilla.orig/extensions/spellcheck/src/mozInlineSpellWordUtil.cpp
+++ mozilla/extensions/spellcheck/src/mozInlineSpellWordUtil.cpp
@@ -303,17 +303,17 @@
   PRInt32 wordIndex = FindRealWordContaining(offset, HINT_BEGIN, PR_FALSE);
   if (wordIndex < 0)
     return MakeRange(pt, pt, aRange);
   return MakeRangeForWord(mRealWords[wordIndex], aRange);
 }
 
 // This is to fix characters that the spellchecker may not like
 static void
-NormalizeWord(const nsSubstring& aInput, PRInt32 aPos, PRInt32 aLen, nsAString& aOutput)
+NormalizeWord(const nsString& aInput, PRInt32 aPos, PRInt32 aLen, nsAString& aOutput)
 {
   aOutput.Truncate();
   for (PRInt32 i = 0; i < aLen; i++) {
     PRUnichar ch = aInput.CharAt(i + aPos);
 
     // remove ignorable characters from the word
     if (IsIgnorableCharacter(ch))
       continue;
@@ -538,17 +538,17 @@
   CheckLeavingBreakElementClosure* cl =
     static_cast<CheckLeavingBreakElementClosure*>(aClosure);
   if (!cl->mLeftBreakElement && IsBreakElement(cl->mDocView, aNode)) {
     cl->mLeftBreakElement = PR_TRUE;
   }
 }
 
 void
-mozInlineSpellWordUtil::NormalizeWord(nsSubstring& aWord)
+mozInlineSpellWordUtil::NormalizeWord(nsString& aWord)
 {
   nsAutoString result;
   ::NormalizeWord(aWord, 0, aWord.Length(), result);
   aWord = result;
 }
 
 void
 mozInlineSpellWordUtil::BuildSoftText()
@@ -968,23 +968,23 @@
 
   // Check the text before the first colon against some known protocols. It
   // is impossible to check against all protocols, especially since you can
   // plug in new protocols. We also don't want to waste time here checking
   // against a lot of obscure protocols.
   if (firstColon > mDOMWordOffset) {
     nsString protocol(Substring(mDOMWordText, mDOMWordOffset,
                       firstColon - mDOMWordOffset));
-    if (protocol.EqualsIgnoreCase("http") ||
-        protocol.EqualsIgnoreCase("https") ||
-        protocol.EqualsIgnoreCase("news") ||
-        protocol.EqualsIgnoreCase("ftp") ||
-        protocol.EqualsIgnoreCase("file") ||
-        protocol.EqualsIgnoreCase("javascript") ||
-        protocol.EqualsIgnoreCase("ftp")) {
+    if (protocol.LowerCaseEqualsLiteral("http") ||
+        protocol.LowerCaseEqualsLiteral("https") ||
+        protocol.LowerCaseEqualsLiteral("news") ||
+        protocol.LowerCaseEqualsLiteral("ftp") ||
+        protocol.LowerCaseEqualsLiteral("file") ||
+        protocol.LowerCaseEqualsLiteral("javascript") ||
+        protocol.LowerCaseEqualsLiteral("ftp")) {
       return mDOMWordText.Length() - mDOMWordOffset;
     }
   }
 
   // not anything special
   return -1;
 }
 
Index: mozilla/extensions/spellcheck/src/mozEnglishWordUtils.cpp
===================================================================
--- mozilla.orig/extensions/spellcheck/src/mozEnglishWordUtils.cpp
+++ mozilla/extensions/spellcheck/src/mozEnglishWordUtils.cpp
@@ -32,21 +32,25 @@
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "mozEnglishWordUtils.h"
 #include "nsICharsetAlias.h"
+#ifdef MOZILLA_INTERNAL_API
 #include "nsReadableUtils.h"
+#endif
 #include "nsIServiceManager.h"
 #include "nsUnicharUtilCIID.h"
 #include "nsCRT.h"
 #include "cattable.h"
+#include "nsServiceManagerUtils.h"
+#include "nsComponentManagerUtils.h"
 
 NS_IMPL_ISUPPORTS1(mozEnglishWordUtils, mozISpellI18NUtil)
 
 mozEnglishWordUtils::mozEnglishWordUtils()
 {
   mLanguage.AssignLiteral("en");
 
   nsresult rv;
Index: mozilla/configure.in
===================================================================
--- mozilla.orig/configure.in
+++ mozilla/configure.in
@@ -5464,21 +5464,16 @@
     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|universalchardet||g'`
 fi
 
 if test `echo "$MOZ_EXTENSIONS" | grep -c java` -ne 0; then
     AC_MSG_WARN([java is no longer an extension, use --enable-javaxpcom to enable.])
     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|java||g'`
 fi
 
-if test `echo "$MOZ_EXTENSIONS" | grep -c spellcheck` -ne 0; then
-    AC_MSG_WARN([spellcheck is no longer an extension.])
-    MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|spellcheck||g'`
-fi
-
 if test -n "$MOZ_NO_XPCOM_OBSOLETE" && test `echo "$MOZ_EXTENSIONS" | grep -c sroaming` -ne 0; then
     AC_MSG_WARN([Cannot currently build sroaming without xpcom obsolete -- bug 249343. Removing sroaming from MOZ_EXTENSIONS.])
     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|sroaming||'`
 fi
 
 dnl Remove dupes
 MOZ_EXTENSIONS=`${PERL} ${srcdir}/build/unix/uniq.pl ${MOZ_EXTENSIONS}`
 

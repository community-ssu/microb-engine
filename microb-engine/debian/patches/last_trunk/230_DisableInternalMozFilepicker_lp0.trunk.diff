## Patches for microb-engine
## Oleg Romashin <ext-oleg.2.romashin@nokia.com>
##
## DP: Stripping Filepicker component, (exists in gtkmozembed)

Index: widget/src/gtk2/Makefile.in
===================================================================
--- widget/src/gtk2/Makefile.in.orig
+++ widget/src/gtk2/Makefile.in
@@ -94,17 +94,16 @@
 		nsWidgetFactory.cpp \
 		nsToolkit.cpp \
 		nsBidiKeyboard.cpp \
 		nsCommonWidget.cpp \
 		nsLookAndFeel.cpp \
 		nsGtkKeyUtils.cpp \
 		nsClipboard.cpp \
 		nsDragService.cpp \
-		nsFilePicker.cpp \
 		nsSound.cpp \
 		nsNativeKeyBindings.cpp \
 		nsScreenGtk.cpp \
 		nsScreenManagerGtk.cpp \
 		nsDeviceContextSpecG.cpp \
 		nsPrintOptionsGTK.cpp \
 		nsImageToPixbuf.cpp \
 		nsAccessibilityHelper.cpp \
@@ -113,16 +112,22 @@
 
 ifdef MOZ_ENABLE_POSTSCRIPT
 CPPSRCS		+= \
 	  nsPrintJobFactoryGTK.cpp \
 	  nsPrintJobGTK.cpp \
 	  $(NULL)
 endif
 
+ifndef MOZ_MICROB
+CPPSRCS		+= \
+	  nsFilePicker.cpp \
+	  $(NULL)
+endif
+
 # build our subdirs, too
 ifdef ACCESSIBILITY
 REQUIRES	+= accessibility
 endif
 
 SHARED_LIBRARY_LIBS = ../xpwidgets/libxpwidgets_s.a
 
 EXTRA_DSO_LDOPTS += \
Index: widget/src/gtk2/nsWidgetFactory.cpp
===================================================================
--- widget/src/gtk2/nsWidgetFactory.cpp.orig
+++ widget/src/gtk2/nsWidgetFactory.cpp
@@ -43,17 +43,19 @@
 #include "nsBaseWidget.h"
 #include "nsLookAndFeel.h"
 #include "nsWindow.h"
 #include "nsTransferable.h"
 #include "nsClipboardHelper.h"
 #include "nsHTMLFormatConverter.h"
 #include "nsClipboard.h"
 #include "nsDragService.h"
+#ifndef MOZ_MICROB
 #include "nsFilePicker.h"
+#endif
 #include "nsSound.h"
 #include "nsBidiKeyboard.h"
 #include "nsNativeKeyBindings.h"
 #include "nsScreenManagerGtk.h"
 #include "nsPrintOptionsGTK.h"
 #include "nsPrintSession.h"
 #include "nsDeviceContextSpecG.h"
 #include "nsIPrefService.h"
@@ -65,22 +67,24 @@
 #include "nsNativeThemeGTK.h"
 #endif
 
 #include "nsIComponentRegistrar.h"
 #include "nsComponentManagerUtils.h"
 #include "nsAutoPtr.h"
 #include <gtk/gtk.h>
 
+#ifndef MOZ_MICROB
 /* from nsFilePicker.js */
 #define XULFILEPICKER_CID \
   { 0x54ae32f8, 0x1dd2, 0x11b2, \
     { 0xa2, 0x09, 0xdf, 0x7c, 0x50, 0x53, 0x70, 0xf8} }
 static NS_DEFINE_CID(kXULFilePickerCID, XULFILEPICKER_CID);
 static NS_DEFINE_CID(kNativeFilePickerCID, NS_FILEPICKER_CID);
+#endif
 
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsWindow)
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsChildWindow)
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsLookAndFeel)
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsTransferable)
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsBidiKeyboard)
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsClipboardHelper)
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsHTMLFormatConverter)
@@ -93,16 +97,17 @@
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsNativeThemeGTK)
 #endif
 NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(nsPrintOptionsGTK, Init)
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsPrinterEnumeratorGTK)
 NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(nsPrintSession, Init)
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsImageToPixbuf)
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsIdleServiceGTK)
 
+#ifndef MOZ_MICROB
 static NS_IMETHODIMP
 nsFilePickerConstructor(nsISupports *aOuter, REFNSIID aIID,
                         void **aResult)
 {
   *aResult = nsnull;
   if (aOuter != nsnull) {
     return NS_ERROR_NO_AGGREGATION;
   }
@@ -112,30 +117,31 @@
   if (prefs) {
     PRBool prefAllow;
     nsresult rv = prefs->GetBoolPref("ui.allow_platform_file_picker",
                                      &prefAllow);
     if (NS_SUCCEEDED(rv)) {
         allowPlatformPicker = prefAllow;
     }
   }
-  
+
   nsCOMPtr<nsIFilePicker> picker;
   if (allowPlatformPicker && gtk_check_version(2,6,3) == NULL) {
       picker = new nsFilePicker;
   } else {
     picker = do_CreateInstance(kXULFilePickerCID);
   }
 
   if (!picker) {
     return NS_ERROR_OUT_OF_MEMORY;
   }
 
   return picker->QueryInterface(aIID, aResult);
 }
+#endif
 
 static NS_IMETHODIMP
 nsNativeKeyBindingsConstructor(nsISupports *aOuter, REFNSIID aIID,
                                void **aResult,
                                NativeKeyBindingsType aKeyBindingsType)
 {
     nsresult rv;
 
@@ -189,20 +195,22 @@
     { "Gtk2 AppShell",
       NS_APPSHELL_CID,
       "@mozilla.org/widget/appshell/gtk;1",
       nsAppShellConstructor },
     { "Gtk2 Look And Feel",
       NS_LOOKANDFEEL_CID,
       "@mozilla.org/widget/lookandfeel;1",
       nsLookAndFeelConstructor },
+#ifndef MOZ_MICROB
     { "Gtk2 File Picker",
       NS_FILEPICKER_CID,
       "@mozilla.org/filepicker;1",
       nsFilePickerConstructor },
+#endif
     { "Gtk2 Sound",
       NS_SOUND_CID,
       "@mozilla.org/sound;1",
       nsSoundConstructor },
   { "Transferable",
     NS_TRANSFERABLE_CID,
     "@mozilla.org/widget/transferable;1",
     nsTransferableConstructor },
@@ -274,18 +282,20 @@
     NS_IDLE_SERVICE_CID,
     "@mozilla.org/widget/idleservice;1",
     nsIdleServiceGTKConstructor },
 };
 
 PR_STATIC_CALLBACK(void)
 nsWidgetGtk2ModuleDtor(nsIModule *aSelf)
 {
+#ifndef MOZ_MICROB
   nsFilePicker::Shutdown();
   nsSound::Shutdown();
+#endif
   nsWindow::ReleaseGlobals();
   nsAppShellShutdown(aSelf);
 }
 
 NS_IMPL_NSGETMODULE_WITH_CTOR_DTOR(nsWidgetGtk2Module,
                                    components,
                                    nsAppShellInit,
                                    nsWidgetGtk2ModuleDtor)

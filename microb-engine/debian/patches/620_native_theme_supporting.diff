# Support native gtk widgets: 
# - scaling widgets
# - drawing according native theme
# - fixed some stuff related to forms.css
# contact: Anton Rogaynis ext-anton(.)rogaynis(@)nokia.com
Index: mozilla/widget/src/gtk2/nsNativeThemeGTK.cpp
===================================================================
--- mozilla.orig/widget/src/gtk2/nsNativeThemeGTK.cpp
+++ mozilla/widget/src/gtk2/nsNativeThemeGTK.cpp
@@ -870,19 +870,19 @@
       break;
   case NS_THEME_DROPDOWN_BUTTON:
     {
       moz_gtk_get_dropdown_arrow_size(&aResult->width, &aResult->height);
       *aIsOverridable = PR_FALSE;
     }
     break;
   case NS_THEME_CHECKBOX:
-  case NS_THEME_CHECKBOX_SMALL:
+  //case NS_THEME_CHECKBOX_SMALL:
   case NS_THEME_RADIO:
-  case NS_THEME_RADIO_SMALL:
+  //case NS_THEME_RADIO_SMALL:
     {
       gint indicator_size, indicator_spacing;
 
       if (IsCheckboxWidgetType(aWidgetType)) {
         moz_gtk_checkbox_get_metrics(&indicator_size, &indicator_spacing);
       } else {
         moz_gtk_radio_get_metrics(&indicator_size, &indicator_spacing);
       }
@@ -1047,17 +1047,17 @@
   case NS_THEME_SCROLLBAR_TRACK_VERTICAL:
   case NS_THEME_SCROLLBAR_THUMB_HORIZONTAL:
   case NS_THEME_SCROLLBAR_THUMB_VERTICAL:
     // case NS_THEME_SCROLLBAR_GRIPPER_HORIZONTAL:  (n/a for gtk)
     // case NS_THEME_SCROLLBAR_GRIPPER_VERTICAL:  (n/a for gtk)
   case NS_THEME_TEXTFIELD:
   case NS_THEME_TEXTFIELD_MULTILINE:
     // case NS_THEME_TEXTFIELD_CARET:
-    // case NS_THEME_DROPDOWN_BUTTON:
+  case NS_THEME_DROPDOWN_BUTTON:
   case NS_THEME_DROPDOWN_TEXTFIELD:
   case NS_THEME_SCALE_HORIZONTAL:
   case NS_THEME_SCALE_THUMB_HORIZONTAL:
   case NS_THEME_SCALE_VERTICAL:
   case NS_THEME_SCALE_THUMB_VERTICAL:
     // case NS_THEME_SCALE_THUMB_START:
     // case NS_THEME_SCALE_THUMB_END:
     // case NS_THEME_SCALE_TICK:
@@ -1067,17 +1067,17 @@
   case NS_THEME_RADIO_LABEL:
   case NS_THEME_MENUBAR:
   case NS_THEME_MENUPOPUP:
   case NS_THEME_MENUITEM:
   case NS_THEME_CHECKMENUITEM:
   case NS_THEME_RADIOMENUITEM:
   case NS_THEME_WINDOW:
   case NS_THEME_DIALOG:
-  case NS_THEME_DROPDOWN:
+    // case NS_THEME_DROPDOWN:  // (Our silly GTK doues not support gtk_option_menu anymore)
   case NS_THEME_DROPDOWN_TEXT:
     return !IsWidgetStyled(aPresContext, aFrame, aWidgetType);
   }
 
   return PR_FALSE;
 }
 
 NS_IMETHODIMP_(PRBool)
Index: mozilla/widget/src/gtk2/gtk2drawing.c
===================================================================
--- mozilla.orig/widget/src/gtk2/gtk2drawing.c
+++ mozilla/widget/src/gtk2/gtk2drawing.c
@@ -455,18 +455,18 @@
         } else {
             x -= focus_width + focus_pad;
             y -= focus_width + focus_pad;
             width += 2 * (focus_width + focus_pad);
             height += 2 * (focus_width + focus_pad);
         }
 
         TSOffsetStyleGCs(style, x, y);
-        gtk_paint_focus(style, drawable, button_state, cliprect,
-                        widget, "button", x, y, width, height);
+        //gtk_paint_focus(style, drawable, button_state, cliprect,
+        //                widget, "button", x, y, width, height);
     }
 
     return MOZ_GTK_SUCCESS;
 }
 
 gint
 moz_gtk_init()
 {
@@ -595,43 +595,48 @@
 {
     GtkStateType state_type = ConvertGtkState(state);
     GtkShadowType shadow_type = (selected)?GTK_SHADOW_IN:GTK_SHADOW_OUT;
     gint indicator_size, indicator_spacing;
     gint x, y, width, height;
     GtkWidget *w;
     GtkStyle *style;
 
-    if (state->focused && state_type == GTK_STATE_NORMAL)
-      state_type = GTK_STATE_PRELIGHT;
+    state_type = GTK_STATE_NORMAL;
 
     if (isradio) {
         moz_gtk_radio_get_metrics(&indicator_size, &indicator_spacing);
         w = gRadiobuttonWidget;
     } else {
         moz_gtk_checkbox_get_metrics(&indicator_size, &indicator_spacing);
         w = gCheckboxWidget;
     }
 
     /* offset by indicator_spacing, and centered vertically within the rect */
-    indicator_size = rect->width < rect->height ? rect->width : rect->height;
-    indicator_size -= indicator_spacing;
-    x = rect->x + indicator_spacing;
+    // old implementation
+    /*indicator_size = rect->width < rect->height ? rect->width : rect->height;
+    indicator_size -= indicator_spacing;*/
+    if (MIN(rect->width, rect->height) < indicator_size)
+        indicator_size = MIN(rect->width, rect->height);
+
+    x = rect->x; //+ indicator_spacing;
     y = rect->y + (rect->height - indicator_size) / 2;
     width = indicator_size;
     height = indicator_size;
   
     style = w->style;
     TSOffsetStyleGCs(style, x, y);
 
     /* Some themes check the widget state themselves. */
+		/*
     if (state->focused)
         GTK_WIDGET_SET_FLAGS(w, GTK_HAS_FOCUS);
     else
         GTK_WIDGET_UNSET_FLAGS(w, GTK_HAS_FOCUS);
+		*/
 
     gtk_widget_set_sensitive(w, !state->disabled);
 
     GTK_TOGGLE_BUTTON(w)->active = selected;
       
     if (isradio) {
         gtk_paint_option(style, drawable, state_type, shadow_type, cliprect,
                          gRadiobuttonWidget, "radiobutton", x, y,
@@ -774,16 +779,17 @@
                               GdkDrawable* drawable, GdkRectangle* rect,
                               GdkRectangle* cliprect, GtkWidgetState* state)
 {
     GtkStateType state_type = (state->inHover || state->active) ?
         GTK_STATE_PRELIGHT : GTK_STATE_NORMAL;
     GtkStyle* style;
     GtkScrollbar *scrollbar;
     GtkAdjustment *adj;
+    GtkShadowType shadow_type = GTK_SHADOW_OUT;
 
     ensure_scrollbar_widget();
 
     if (widget == MOZ_GTK_SCROLLBAR_THUMB_HORIZONTAL)
         scrollbar = GTK_SCROLLBAR(gHorizScrollbarWidget);
     else
         scrollbar = GTK_SCROLLBAR(gVertScrollbarWidget);
 
@@ -815,17 +821,22 @@
     adj->value = state->curpos;
     adj->upper = state->maxpos;
     gtk_adjustment_changed(adj);
 
     style = GTK_WIDGET(scrollbar)->style;
 
     TSOffsetStyleGCs(style, rect->x, rect->y);
 
-    gtk_paint_slider(style, drawable, state_type, GTK_SHADOW_OUT, cliprect,
+    if (state->active) {
+      state_type = GTK_STATE_ACTIVE;
+      shadow_type = GTK_SHADOW_IN;
+    }
+
+    gtk_paint_slider(style, drawable, state_type, shadow_type, cliprect,
                      GTK_WIDGET(scrollbar), "slider", rect->x, rect->y,
                      rect->width,  rect->height,
                      (widget == MOZ_GTK_SCROLLBAR_THUMB_HORIZONTAL) ?
                      GTK_ORIENTATION_HORIZONTAL : GTK_ORIENTATION_VERTICAL);
 
     return MOZ_GTK_SUCCESS;
 }
 
@@ -1010,19 +1021,19 @@
         height -= 2 * focus_width;
 
         TSOffsetStyleGCs(style, x, y);
         gtk_paint_shadow(style, drawable, GTK_STATE_NORMAL, GTK_SHADOW_IN,
                          cliprect, gEntryWidget, "entry",
                          x, y, width, height);
 
         TSOffsetStyleGCs(style, rect->x, rect->y);
-        gtk_paint_focus(style, drawable,  GTK_STATE_NORMAL, cliprect,
-                        gEntryWidget, "entry",
-                        rect->x, rect->y, rect->width, rect->height);
+        //gtk_paint_focus(style, drawable,  GTK_STATE_NORMAL, cliprect,
+        //                gEntryWidget, "entry",
+        //                rect->x, rect->y, rect->width, rect->height);
     }
 
     return MOZ_GTK_SUCCESS;
 }
 
 static gint
 moz_gtk_option_menu_paint(GdkDrawable* drawable, GdkRectangle* rect,
                           GdkRectangle* cliprect, GtkWidgetState* state)
@@ -1158,25 +1169,25 @@
     /* this is for drawing a prelight box */
     if (state_type == GTK_STATE_PRELIGHT || state_type == GTK_STATE_ACTIVE) {
         gtk_paint_flat_box(style, drawable, GTK_STATE_PRELIGHT, GTK_SHADOW_ETCHED_OUT,
                            cliprect, gCheckboxWidget,
                            "checkbutton",
                            rect->x, rect->y, rect->width, rect->height);
     }
 
-    if (state_type != GTK_STATE_NORMAL && state_type != GTK_STATE_PRELIGHT)
+    /*if (state_type != GTK_STATE_NORMAL && state_type != GTK_STATE_PRELIGHT)
         state_type = GTK_STATE_NORMAL;
 
     if (state->focused && !interior_focus) {
         gtk_paint_focus(style, drawable, state_type, cliprect, gCheckboxWidget,
                         "checkbutton",
                         rect->x, rect->y, rect->width, rect->height);
     }
-
+    */
     return MOZ_GTK_SUCCESS;
 }
 
 static gint
 moz_gtk_toggle_label_paint(GdkDrawable* drawable, GdkRectangle* rect,
                            GdkRectangle* cliprect, GtkWidgetState* state, 
                            gboolean isradio)
 {
Index: mozilla/widget/src/gtk2/nsLookAndFeel.cpp
===================================================================
--- mozilla.orig/widget/src/gtk2/nsLookAndFeel.cpp
+++ mozilla/widget/src/gtk2/nsLookAndFeel.cpp
@@ -51,17 +51,17 @@
 nscolor   nsLookAndFeel::sMenuText = 0;
 nscolor   nsLookAndFeel::sMenuHover = 0;
 nscolor   nsLookAndFeel::sMenuHoverText = 0;
 nscolor   nsLookAndFeel::sMenuBackground = 0;
 nscolor   nsLookAndFeel::sButtonBackground = 0;
 nscolor   nsLookAndFeel::sTextDisabled = 0;
 nscolor   nsLookAndFeel::sButtonText = 0;
 nscolor   nsLookAndFeel::sButtonOuterLightBorder = 0;
-nscolor   nsLookAndFeel::sButtonInnerDarkBorder = 0;
+nscolor   nsLookAndFeel::sButtonInnerDarkBorder = NS_RGB(0xb3,0xb3,0xb3); // forms.css
 PRUnichar nsLookAndFeel::sInvisibleCharacter = PRUnichar('*');
 
 //-------------------------------------------------------------------------
 //
 // Query interface implementation
 //
 //-------------------------------------------------------------------------
 nsLookAndFeel::nsLookAndFeel() : nsXPLookAndFeel()
Index: mozilla/layout/style/forms.css
===================================================================
--- mozilla.orig/layout/style/forms.css
+++ mozilla/layout/style/forms.css
@@ -291,17 +291,17 @@
 
 input[disabled],
 textarea[disabled],
 option[disabled],
 optgroup[disabled],
 select[disabled] {
   -moz-user-input: disabled;
   -moz-user-focus: ignore;
-  color: GrayText;
+  color: GrayText !important;
   background-color: ThreeDFace;
   cursor: inherit;
 }
 
 option[disabled],
 optgroup[disabled] {
   background-color: transparent;
 }

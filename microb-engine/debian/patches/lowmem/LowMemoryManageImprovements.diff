Index: mozilla/xpcom/base/nsMemoryImpl.cpp
===================================================================
--- mozilla.orig/xpcom/base/nsMemoryImpl.cpp
+++ mozilla/xpcom/base/nsMemoryImpl.cpp
@@ -46,16 +46,25 @@
 #include "prmem.h"
 #include "prcvar.h"
 #include "pratom.h"
 
 #include "nsAlgorithm.h"
 #include "nsAutoLock.h"
 #include "nsCOMPtr.h"
 #include "nsString.h"
+#include <fcntl.h>
+#include <unistd.h>
+
+#ifdef __arm__
+const char *kHighMark = "/sys/kernel/high_watermark";
+//const char *kHighMark = "/sys/kernel/low_watermark";
+#else
+const char *kHighMark = "/tmp/high_mem.link";
+#endif
 
 #if defined(XP_WIN)
 #include <windows.h>
 #define NS_MEMORY_FLUSHER
 #elif defined (NS_OSSO)
 #include <osso-mem.h>
 #include <fcntl.h>
 #include <unistd.h>
@@ -181,16 +190,20 @@
 nsMemoryImpl::HeapMinimize(PRBool aImmediate)
 {
     return FlushMemory(NS_LITERAL_STRING("heap-minimize").get(), aImmediate);
 }
 
 NS_IMETHODIMP
 nsMemoryImpl::IsLowMemory(PRBool *result)
 {
+    if (sLowMemState >= 0) {
+        *result = sLowMemState == 1;
+        return NS_OK;
+    }
 #if defined(WINCE)
     MEMORYSTATUS stat;
     GlobalMemoryStatus(&stat);
     *result = ((float)stat.dwAvailPhys / stat.dwTotalPhys) < 0.1;
 #elif defined(XP_WIN)
     MEMORYSTATUS stat;
     GlobalMemoryStatus(&stat);
     *result = ((float)stat.dwAvailPageFile / stat.dwTotalPageFile) < 0.1;
@@ -205,16 +218,22 @@
     close(fd);
     *result = (c == '1');
 #else
     *result = PR_FALSE;
 #endif
     return NS_OK;
 }
 
+NS_IMETHODIMP
+nsMemoryImpl::SetLowMemory(PRInt32 aLowMemState)
+{
+    sLowMemState = aLowMemState;
+    return NS_OK;
+}
 
 /*static*/ nsresult 
 nsMemoryImpl::InitFlusher()
 {
 #ifdef NS_MEMORY_FLUSHER
     return sGlobalMemoryFlusher.Init();
 #else
     return NS_OK;
@@ -281,16 +300,19 @@
 nsMemoryImpl::FlushEvent::Run()
 {
     sGlobalMemory.RunFlushers(mReason);
     return NS_OK;
 }
 
 PRInt32
 nsMemoryImpl::sIsFlushing = 0;
+PRInt32
+nsMemoryImpl::sLowMemState = -1;
+
 
 nsMemoryImpl::FlushEvent
 nsMemoryImpl::sFlushEvent;
 
 XPCOM_API(void*)
 NS_Alloc(PRSize size)
 {
     void* result = MALLOC1(size);
Index: mozilla/xpcom/base/nsIMemory.idl
===================================================================
--- mozilla.orig/xpcom/base/nsIMemory.idl
+++ mozilla/xpcom/base/nsIMemory.idl
@@ -121,10 +121,17 @@
     void heapMinimize(in boolean immediate);
 
     /**
      * This predicate can be used to determine if we're in a low-memory
      * situation (what constitutes low-memory is platform dependent). This
      * can be used to trigger the memory pressure observers.
      */
     boolean isLowMemory();
+
+    /**
+     * This can setup lowmemory situation from third party instance
+     * @param isLowMem - enable or disable internal lowmem flag
+     */
+    void setLowMemory(in long lowMemState);
+
 };
 
Index: mozilla/xpcom/base/nsMemoryImpl.h
===================================================================
--- mozilla.orig/xpcom/base/nsMemoryImpl.h
+++ mozilla/xpcom/base/nsMemoryImpl.h
@@ -66,11 +66,13 @@
     struct FlushEvent : public nsIRunnable {
         NS_DECL_ISUPPORTS_INHERITED
         NS_DECL_NSIRUNNABLE
         const PRUnichar* mReason;
     };
 
     static PRInt32    sIsFlushing;
     static FlushEvent sFlushEvent;
+private:
+    static PRInt32    sLowMemState;
 };
 
 #endif // nsMemoryImpl_h__
Index: mozilla/xpcom/ds/nsRecyclingAllocator.cpp
===================================================================
--- mozilla.orig/xpcom/ds/nsRecyclingAllocator.cpp
+++ mozilla/xpcom/ds/nsRecyclingAllocator.cpp
@@ -323,14 +323,21 @@
 NS_IMETHODIMP
 nsRecyclingAllocatorImpl::HeapMinimize(PRBool immediate)
 {
     // XXX Not yet implemented
     return NS_ERROR_NOT_IMPLEMENTED;
 }
 
 NS_IMETHODIMP
+nsRecyclingAllocatorImpl::SetLowMemory(PRInt32 aLowMemState)
+{
+    // XXX Not yet implemented
+    return NS_ERROR_NOT_IMPLEMENTED;
+}
+
+NS_IMETHODIMP
 nsRecyclingAllocatorImpl::IsLowMemory(PRBool *lowmemoryb_ptr)
 {
     // XXX Not yet implemented
     return NS_ERROR_NOT_IMPLEMENTED;
 }
 

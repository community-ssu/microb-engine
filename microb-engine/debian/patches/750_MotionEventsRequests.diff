--- mozilla/widget/src/gtk2/mozdrawingarea.c.orig	2006-06-02 06:47:34.000000000 +0300
+++ mozilla/widget/src/gtk2/mozdrawingarea.c	2007-10-05 14:53:48.000000000 +0300
@@ -157,21 +157,21 @@ moz_drawingarea_create_windows (MozDrawi
     gdk_window_set_user_data(drawingarea->clip_window, widget);
 
     /* set the default pixmap to None so that you don't end up with the
        gtk default which is BlackPixel. */
     gdk_window_set_back_pixmap(drawingarea->clip_window, NULL, FALSE);
 
     attributes.event_mask = (GDK_EXPOSURE_MASK | GDK_STRUCTURE_MASK |
                              GDK_VISIBILITY_NOTIFY_MASK |
                              GDK_ENTER_NOTIFY_MASK | GDK_LEAVE_NOTIFY_MASK |
                              GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK |
-                             GDK_POINTER_MOTION_MASK);
+                             GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK);
     /* create the inner window */
     drawingarea->inner_window = gdk_window_new (drawingarea->clip_window,
                                                 &attributes, attributes_mask);
     gdk_window_set_user_data(drawingarea->inner_window, widget);
 
     /* set the default pixmap to None so that you don't end up with the
        gtk default which is BlackPixel. */
     gdk_window_set_back_pixmap(drawingarea->inner_window, NULL, FALSE);
 
     if (visual) {
--- mozilla/widget/src/gtk2/nsWindow.cpp.orig	2007-10-05 08:42:37.000000000 +0300
+++ mozilla/widget/src/gtk2/nsWindow.cpp	2007-10-05 17:25:58.000000000 +0300
@@ -3613,21 +3613,23 @@ nsWindow::GrabPointer(void)
 
     if (!mDrawingarea)
         return;
 
     gint retval;
     retval = gdk_pointer_grab(mDrawingarea->inner_window, TRUE,
                               (GdkEventMask)(GDK_BUTTON_PRESS_MASK |
                                              GDK_BUTTON_RELEASE_MASK |
                                              GDK_ENTER_NOTIFY_MASK |
                                              GDK_LEAVE_NOTIFY_MASK |
-                                             GDK_POINTER_MOTION_MASK),
+                                             GDK_POINTER_MOTION_MASK
+                                             | GDK_POINTER_MOTION_HINT_MASK
+                                             ),
                               (GdkWindow *)NULL, NULL, GDK_CURRENT_TIME);
 
     if (retval != GDK_GRAB_SUCCESS) {
         LOG(("GrabPointer: pointer grab failed\n"));
         mRetryPointerGrab = PR_TRUE;
     }
 }
 
 void
 nsWindow::GrabKeyboard(void)
@@ -4409,20 +4411,21 @@ leave_notify_event_cb(GtkWidget *widget,
 
 /* static */
 gboolean
 motion_notify_event_cb(GtkWidget *widget, GdkEventMotion *event)
 {
     nsRefPtr<nsWindow> window = get_window_for_gdk_window(event->window);
     if (!window)
         return TRUE;
 
     window->OnMotionNotifyEvent(widget, event);
+    gdk_event_request_motions(event);
 
     return TRUE;
 }
 
 /* static */
 gboolean
 button_press_event_cb(GtkWidget *widget, GdkEventButton *event)
 {
     LOG(("button_press_event_cb\n"));
     nsWindow *window = get_window_for_gdk_window(event->window);

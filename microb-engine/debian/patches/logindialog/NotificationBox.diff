Index: mozilla/toolkit/components/passwordmgr/src/nsLoginManagerPrompter.js
===================================================================
--- mozilla.orig/toolkit/components/passwordmgr/src/nsLoginManagerPrompter.js
+++ mozilla/toolkit/components/passwordmgr/src/nsLoginManagerPrompter.js
@@ -613,17 +613,17 @@
         // The page we're going to hasn't loaded yet, so we want to persist
         // across the first location change.
         newBar.persistence++;
 
         // Sites like Gmail perform a funky redirect dance before you end up
         // at the post-authentication page. I don't see a good way to
         // heuristically determine when to ignore such location changes, so
         // we'll try ignoring location changes based on a time interval.
-        newBar.timeout = Date.now() + 20000; // 20 seconds
+        //newBar.timeout = Date.now() + 20000; // 20 seconds
 
         if (oldBar) {
             this.log("(...and removing old " + aName + " notification bar)");
             aNotifyBox.removeNotification(oldBar);
         }
     },
 
 
@@ -678,49 +678,81 @@
                                         [brandShortName, displayHost]);
         }
 
         // The callbacks in |buttons| have a closure to access the variables
         // in scope here; set one to |this._pwmgr| so we can get back to pwmgr
         // without a getService() call.
         var pwmgr = this._pwmgr;
 
-
-        var buttons = [
-            // "Remember" button
-            {
-                label:     rememberButtonText,
-                accessKey: rememberButtonAccessKey,
-                popup:     null,
-                callback: function(aNotificationBar, aButton) {
-                    pwmgr.addLogin(aLogin);
-                }
-            },
-
-            // "Never for this site" button
-            {
-                label:     neverButtonText,
-                accessKey: neverButtonAccessKey,
-                popup:     null,
-                callback: function(aNotificationBar, aButton) {
-                    pwmgr.setLoginSavingEnabled(aLogin.hostname, false);
+        // Is the notification box a XUL box or Maemo box?
+        if (!aNotifyBox.QueryInterface(Ci.nsINotificationBox)) {
+            var buttons = [
+                // "Remember" button
+                {
+                    label:     rememberButtonText,
+                    accessKey: rememberButtonAccessKey,
+                    popup:     null,
+                    callback: function(aNotificationBar, aButton) {
+                        pwmgr.addLogin(aLogin);
+                    }
+                },
+
+                // "Never for this site" button
+                {
+                    label:     neverButtonText,
+                    accessKey: neverButtonAccessKey,
+                    popup:     null,
+                    callback: function(aNotificationBar, aButton) {
+                        pwmgr.setLoginSavingEnabled(aLogin.hostname, false);
+                    }
+                },
+
+                // "Not now" button
+                {
+                    label:     notNowButtonText,
+                    accessKey: notNowButtonAccessKey,
+                    popup:     null,
+                    callback:  function() { /* NOP */ }
                 }
-            },
-
-            // "Not now" button
-            {
-                label:     notNowButtonText,
-                accessKey: notNowButtonAccessKey,
-                popup:     null,
-                callback:  function() { /* NOP */ } 
-            }
-        ];
+            ];
+        }
+        else {
+            var buttons = Cc["@mozilla.org/array;1"]
+                            .createInstance(Ci.nsIMutableArray);
+
+            var button1 = Cc["@browser.garage.maemo.org/microb/notificationbutton;1"]
+                            .createInstance(Ci.nsINotificationButton);
+            var button2 = Cc["@browser.garage.maemo.org/microb/notificationbutton;1"]
+                            .createInstance(Ci.nsINotificationButton);
+            var button3 = Cc["@browser.garage.maemo.org/microb/notificationbutton;1"]
+                            .createInstance(Ci.nsINotificationButton);
+            button1.label = rememberButtonText;
+            button1.accessKey = rememberButtonAccessKey;
+            button1.popup = null;
+            button1.callback = function(aNotificationBar, aButton) { pwmgr.addLogin(aLogin); };
+
+            button2.label = neverButtonText;
+            button2.accessKey = neverButtonAccessKey;
+            button2.popup = null;
+            button2.callback = function(aNotificationBar, aButton) { pwmgr.setLoginSavingEnabled(aLogin.hostname, false); };
+
+            button3.label = notNowButtonText;
+            button3.accessKey = notNowButtonAccessKey;
+            button3.popup = null;
+            button3.callback = function() { /* NO-OP */ };
+
+            buttons.appendElement(button1, false);
+            buttons.appendElement(button2, false);
+            buttons.appendElement(button3, false);
+        }
+
 
         this._showLoginNotification(aNotifyBox, "password-save",
-             notificationText, buttons);
+                notificationText, buttons);
     },
 
 
     /*
      * _removeLoginNotifications
      *
      */
     _removeLoginNotifications : function (aNotifyBox) {
@@ -1018,18 +1050,26 @@
             var chromeWin = getChromeWindow(notifyWindow).wrappedJSObject;
 
             if (chromeWin.getNotificationBox)
                 notifyBox = chromeWin.getNotificationBox(notifyWindow);
             else
                 this.log("getNotificationBox() not available on window");
 
         } catch (e) {
-            // If any errors happen, just assume no notification box.
-            this.log("No notification box available: " + e)
+            // No Mozilla notification box available
+            this.log("No notification box available: " + e);
+            // Use our own implementation if possible
+            notifyBox = Cc["@browser.garage.maemo.org/microb/notificationbox;1"]
+                               .getService(Ci.nsINotificationBox);
+
+            if (notifyBox) {
+                this.log("Using Maemo implementation of notifybox");
+            }
+            return notifyBox;
         }
 
         return notifyBox;
     },
 
 
     /*
      * _repickSelectedLogin

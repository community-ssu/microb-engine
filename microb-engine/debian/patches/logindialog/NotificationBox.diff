--- mozilla/toolkit/locales/en-US/chrome/passwordmgr/passwordmgr.properties.orig	2008-11-12 11:24:07.000000000 +0200
+++ mozilla/toolkit/locales/en-US/chrome/passwordmgr/passwordmgr.properties	2008-11-12 11:24:21.000000000 +0200
@@ -34,38 +34,38 @@
 # the provisions above, a recipient may use your version of this file under
 # the terms of any one of the MPL, the GPL or the LGPL.
 #
 # ***** END LICENSE BLOCK *****
 
 rememberValue = Use Password Manager to remember this value.
 rememberPassword = Use Password Manager to remember this password.
 savePasswordTitle = Confirm
 # 1st string is product name, 2nd is the username for the login, 3rd is the
 #   login's hostname. Note that long usernames may be truncated.
-saveLoginText = Do you want %1$S to remember the password for "%2$S" on %3$S?
+saveLoginText = Remember credentials for this site?
 # 1st string is product name, 2nd is the login's hostname
-saveLoginTextNoUsername = Do you want %1$S to remember this password on %2$S?
+saveLoginTextNoUsername = Remember credentials for this site?
 notNowButtonText = &Not Now
 notifyBarNotNowButtonText = Not Now
 notifyBarNotNowButtonAccessKey = N
 neverForSiteButtonText = Ne&ver for This Site
-notifyBarNeverForSiteButtonText = Never for This Site
+notifyBarNeverForSiteButtonText = Never
 notifyBarNeverForSiteButtonAccessKey = e
 rememberButtonText = &Remember
-notifyBarRememberButtonText = Remember
+notifyBarRememberButtonText = Yes
 notifyBarRememberButtonAccessKey = R
 passwordChangeTitle = Confirm Password Change
 passwordChangeText = Would you like to change the stored password for %S?
 passwordChangeTextNoUser = Would you like to change the stored password for this login?
-notifyBarChangeButtonText = Change
+notifyBarChangeButtonText = Yes
 notifyBarChangeButtonAccessKey = C
-notifyBarDontChangeButtonText = Don't Change
+notifyBarDontChangeButtonText = No
 notifyBarDontChangeButtonAccessKey = D
 userSelectText = Please confirm which user you are changing the password for
 hidePasswords=Hide Passwords
 hidePasswordsAccessKey=P
 showPasswords=Show Passwords
 showPasswordsAccessKey=P
 noMasterPasswordPrompt=Are you sure you wish to show your passwords?
 removeAllPasswordsPrompt=Are you sure you wish to remove all passwords?
 removeAllPasswordsTitle=Remove all passwords
 loginsSpielAll=Passwords for the following sites are stored on your computer:
--- mozilla/toolkit/components/passwordmgr/src/nsLoginManagerPrompter.js.orig	2008-11-12 11:30:42.000000000 +0200
+++ mozilla/toolkit/components/passwordmgr/src/nsLoginManagerPrompter.js	2008-11-12 11:29:17.000000000 +0200
@@ -611,21 +611,21 @@ LoginManagerPrompter.prototype = {
                                 priority, aButtons);
 
         // The page we're going to hasn't loaded yet, so we want to persist
         // across the first location change.
         newBar.persistence++;
 
         // Sites like Gmail perform a funky redirect dance before you end up
         // at the post-authentication page. I don't see a good way to
         // heuristically determine when to ignore such location changes, so
         // we'll try ignoring location changes based on a time interval.
-        newBar.timeout = Date.now() + 20000; // 20 seconds
+        //newBar.timeout = Date.now() + 20000; // 20 seconds
 
         if (oldBar) {
             this.log("(...and removing old " + aName + " notification bar)");
             aNotifyBox.removeNotification(oldBar);
         }
     },
 
 
     /*
      * _showSaveLoginNotification
@@ -667,53 +667,85 @@ LoginManagerPrompter.prototype = {
             notificationText  = this._getLocalizedString(
                                         "saveLoginTextNoUsername",
                                         [brandShortName, displayHost]);
         }
 
         // The callbacks in |buttons| have a closure to access the variables
         // in scope here; set one to |this._pwmgr| so we can get back to pwmgr
         // without a getService() call.
         var pwmgr = this._pwmgr;
 
-
-        var buttons = [
-            // "Remember" button
-            {
-                label:     rememberButtonText,
-                accessKey: rememberButtonAccessKey,
-                popup:     null,
-                callback: function(aNotificationBar, aButton) {
-                    pwmgr.addLogin(aLogin);
-                }
-            },
-
-            // "Never for this site" button
-            {
-                label:     neverButtonText,
-                accessKey: neverButtonAccessKey,
-                popup:     null,
-                callback: function(aNotificationBar, aButton) {
-                    pwmgr.setLoginSavingEnabled(aLogin.hostname, false);
+        // Is the notification box a XUL box or Maemo box?
+        if (!aNotifyBox.QueryInterface(Ci.nsINotificationBox)) {
+            var buttons = [
+                // "Remember" button
+                {
+                    label:     rememberButtonText,
+                    accessKey: rememberButtonAccessKey,
+                    popup:     null,
+                    callback: function(aNotificationBar, aButton) {
+                        pwmgr.addLogin(aLogin);
+                    }
+                },
+
+                // "Never for this site" button
+                {
+                    label:     neverButtonText,
+                    accessKey: neverButtonAccessKey,
+                    popup:     null,
+                    callback: function(aNotificationBar, aButton) {
+                        pwmgr.setLoginSavingEnabled(aLogin.hostname, false);
+                    }
+                },
+
+                // "Not now" button
+                {
+                    label:     notNowButtonText,
+                    accessKey: notNowButtonAccessKey,
+                    popup:     null,
+                    callback:  function() { /* NOP */ }
                 }
-            },
+            ];
+        }
+        else {
+            var buttons = Cc["@mozilla.org/array;1"]
+                            .createInstance(Ci.nsIMutableArray);
+
+            var button1 = Cc["@browser.garage.maemo.org/microb/notificationbutton;1"]
+                            .createInstance(Ci.nsINotificationButton);
+            var button2 = Cc["@browser.garage.maemo.org/microb/notificationbutton;1"]
+                            .createInstance(Ci.nsINotificationButton);
+            var button3 = Cc["@browser.garage.maemo.org/microb/notificationbutton;1"]
+                            .createInstance(Ci.nsINotificationButton);
+            button1.label = rememberButtonText;
+            button1.accessKey = rememberButtonAccessKey;
+            button1.popup = null;
+            button1.callback = function(aNotificationBar, aButton) { pwmgr.addLogin(aLogin); };
+
+            button2.label = neverButtonText;
+            button2.accessKey = neverButtonAccessKey;
+            button2.popup = null;
+            button2.callback = function(aNotificationBar, aButton) { pwmgr.setLoginSavingEnabled(aLogin.hostname, false); };
+
+            button3.label = notNowButtonText;
+            button3.accessKey = notNowButtonAccessKey;
+            button3.popup = null;
+            button3.callback = function() { /* NO-OP */ };
+
+            buttons.appendElement(button1, false);
+            buttons.appendElement(button2, false);
+            buttons.appendElement(button3, false);
+        }
 
-            // "Not now" button
-            {
-                label:     notNowButtonText,
-                accessKey: notNowButtonAccessKey,
-                popup:     null,
-                callback:  function() { /* NOP */ } 
-            }
-        ];
 
         this._showLoginNotification(aNotifyBox, "password-save",
-             notificationText, buttons);
+                notificationText, buttons);
     },
 
 
     /*
      * _removeLoginNotifications
      *
      */
     _removeLoginNotifications : function (aNotifyBox) {
         var oldBar = aNotifyBox.getNotificationWithValue("password-save");
         if (oldBar) {
@@ -830,41 +862,68 @@ LoginManagerPrompter.prototype = {
         var dontChangeButtonText =
               this._getLocalizedString("notifyBarDontChangeButtonText");
         var dontChangeButtonAccessKey =
               this._getLocalizedString("notifyBarDontChangeButtonAccessKey");
 
         // The callbacks in |buttons| have a closure to access the variables
         // in scope here; set one to |this._pwmgr| so we can get back to pwmgr
         // without a getService() call.
         var pwmgr = this._pwmgr;
 
+        // Is the notification box a XUL box or Maemo box?
+        if (!aNotifyBox.QueryInterface(Ci.nsINotificationBox)) {
         var buttons = [
-            // "Yes" button
-            {
-                label:     changeButtonText,
-                accessKey: changeButtonAccessKey,
-                popup:     null,
-                callback:  function(aNotificationBar, aButton) {
-                    pwmgr.modifyLogin(aOldLogin, aNewLogin);
+                // "Yes" button
+                {
+                    label:     changeButtonText,
+                    accessKey: changeButtonAccessKey,
+                    popup:     null,
+                    callback:  function(aNotificationBar, aButton) {
+                        pwmgr.modifyLogin(aOldLogin, aNewLogin);
+                    }
+                },
+
+                // "No" button
+                {
+                    label:     dontChangeButtonText,
+                    accessKey: dontChangeButtonAccessKey,
+                    popup:     null,
+                    callback:  function(aNotificationBar, aButton) {
+                        // do nothing
+                    }
                 }
-            },
+            ];
+        }
+        else {
+            var buttons = Cc["@mozilla.org/array;1"]
+                            .createInstance(Ci.nsIMutableArray);
+
+            var button1 = Cc["@browser.garage.maemo.org/microb/notificationbutton;1"]
+                            .createInstance(Ci.nsINotificationButton);
+            var button2 = Cc["@browser.garage.maemo.org/microb/notificationbutton;1"]
+                            .createInstance(Ci.nsINotificationButton);
+            button1.label = changeButtonText;
+            button1.accessKey = changeButtonAccessKey;
+            button1.popup = null;
+            button1.callback = function(aNotificationBar, aButton) {
+                    pwmgr.modifyLogin(aOldLogin, aNewLogin);
+            };
 
-            // "No" button
-            {
-                label:     dontChangeButtonText,
-                accessKey: dontChangeButtonAccessKey,
-                popup:     null,
-                callback:  function(aNotificationBar, aButton) {
-                    // do nothing
-                }
-            }
-        ];
+            button2.label = dontChangeButtonText;
+            button2.accessKey = dontChangeButtonAccessKey;
+            button2.popup = null;
+            button2.callback =  function(aNotificationBar, aButton) {
+                        // do nothing
+            };
+            buttons.appendElement(button1, false);
+            buttons.appendElement(button2, false);
+        }
 
         this._showLoginNotification(aNotifyBox, "password-change",
              notificationText, buttons);
     },
 
 
     /*
      * _showChangeLoginDialog
      *
      * Shows the Change Password dialog.
@@ -998,22 +1057,30 @@ LoginManagerPrompter.prototype = {
             // Get the chrome window for the content window we're using.
             // .wrappedJSObject needed here -- see bug 422974 comment 5.
             var chromeWin = getChromeWindow(notifyWindow).wrappedJSObject;
 
             if (chromeWin.getNotificationBox)
                 notifyBox = chromeWin.getNotificationBox(notifyWindow);
             else
                 this.log("getNotificationBox() not available on window");
 
         } catch (e) {
-            // If any errors happen, just assume no notification box.
-            this.log("No notification box available: " + e)
+            // No Mozilla notification box available
+            this.log("No notification box available: " + e);
+            // Use our own implementation if possible
+            notifyBox = Cc["@browser.garage.maemo.org/microb/notificationbox;1"]
+                               .getService(Ci.nsINotificationBox);
+
+            if (notifyBox) {
+                this.log("Using Maemo implementation of notifybox");
+            }
+            return notifyBox;
         }
 
         return notifyBox;
     },
 
 
     /*
      * _repickSelectedLogin
      *
      * The user might enter a login that isn't the one we prefilled, but

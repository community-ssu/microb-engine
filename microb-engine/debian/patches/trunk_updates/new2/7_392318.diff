Index: content/base/src/nsDocument.h
===================================================================
RCS file: /cvsroot/mozilla/content/base/src/nsDocument.h,v
retrieving revision 3.345
diff -u -p -d -8 -r3.345 nsDocument.h
--- mozilla/content/base/src/nsDocument.h	8 Jul 2007 07:08:07 -0000	3.345
+++ mozilla/content/base/src/nsDocument.h	17 Aug 2007 02:57:24 -0000
@@ -724,16 +724,21 @@ protected:
 
   // Array of owning references to all children
   nsAttrAndChildArray mChildren;
 
   // Pointer to our parser if we're currently in the process of being
   // parsed into.
   nsCOMPtr<nsIParser> mParser;
 
+  // Weak reference to our sink for in case we no longer have a parser.  This
+  // will allow us to flush out any pending stuff from the sink even if
+  // EndLoad() has already happened.
+  nsWeakPtr mWeakSink;
+
   nsCOMArray<nsIStyleSheet> mStyleSheets;
   nsCOMArray<nsIStyleSheet> mCatalogSheets;
 
   // Array of observers
   nsTObserverArray<nsIDocumentObserver> mObservers;
 
   // The document's script global object, the object from which the
   // document can get its script context and scope. This is the
Index: content/base/src/nsDocument.cpp
===================================================================
RCS file: /cvsroot/mozilla/content/base/src/nsDocument.cpp,v
retrieving revision 3.750
diff -u -p -d -8 -r3.750 nsDocument.cpp
--- mozilla/content/base/src/nsDocument.cpp	27 Jul 2007 02:49:18 -0000	3.750
+++ mozilla/content/base/src/nsDocument.cpp	17 Aug 2007 03:01:37 -0000
@@ -2789,17 +2792,20 @@ nsDocument::DispatchContentLoadedEvents(
     }
   }
 }
 
 void
 nsDocument::EndLoad()
 {
   // Drop the ref to our parser, if any
-  mParser = nsnull;
+  if (mParser) {
+    mWeakSink = do_GetWeakReference(mParser->GetContentSink());
+    mParser = nsnull;
+  }
   
   NS_DOCUMENT_NOTIFY_OBSERVERS(EndLoad, (this));
 
   DispatchContentLoadedEvents();
   UnblockOnload(PR_TRUE);
 }
 
 void
@@ -4779,24 +4785,27 @@ nsDocument::CreateEventGroup(nsIDOMEvent
   NS_ADDREF(*aInstancePtrResult);
 
   return NS_OK;
 }
 
 void
 nsDocument::FlushPendingNotifications(mozFlushType aType)
 {
+  nsCOMPtr<nsIContentSink> sink;
+  if (mParser) {
+    sink = mParser->GetContentSink();
+  } else {
+    sink = do_QueryReferent(mWeakSink);
+  }
   // Determine if it is safe to flush the sink notifications
   // by determining if it safe to flush all the presshells.
-  if ((aType & Flush_Content) && mParser &&
+  if ((aType & Flush_Content) && sink &&
       (!(aType & Flush_SinkNotifications) || IsSafeToFlush())) {
-    nsCOMPtr<nsIContentSink> sink = mParser->GetContentSink();
-    if (sink) {
-      sink->FlushPendingNotifications(aType);
-    }
+    sink->FlushPendingNotifications(aType);
   }
 
   // Should we be flushing pending binding constructors in here?
 
   nsPIDOMWindow *window = GetWindow();
 
   if (aType == (aType & (Flush_Content | Flush_SinkNotifications)) ||
       !window) {

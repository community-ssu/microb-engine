# Bug 384809  Various JS engine crashes/leaks in OOM conditions
===================================================================
RCS file: /cvsroot/mozilla/js/src jsatom.c,v
retrieving revision 3.96
retrieving revision 3.97
diff -u -r3.96 -r3.97
--- mozilla/js/src/jsatom.c	2007/06/12 19:33:40	3.96
+++ mozilla/js/src/jsatom.c	2007/06/19 04:10:03	3.97
@@ -697,6 +697,8 @@
 
         he = JS_HashTableRawAdd(table, hep, keyHash, (void *)key, NULL);
         if (!he) {
+            if (flags & ATOM_NOCOPY)
+                str->chars = NULL;
             JS_ReportOutOfMemory(cx);
             atom = NULL;
             goto out;
===================================================================
RCS file: /cvsroot/mozilla/js/src jsopcode.c,v
retrieving revision 3.251
retrieving revision 3.252
diff -u -r3.251 -r3.252
--- mozilla/js/src/jsopcode.c	2007/06/18 19:33:21	3.251
+++ mozilla/js/src/jsopcode.c	2007/06/19 04:10:03	3.252
@@ -3329,10 +3329,8 @@
                 ok = JS_TRUE;
                 for (i = argc; i > 0; i--) {
                     argv[i] = JS_strdup(cx, POP_STR());
-                    if (!argv[i]) {
+                    if (!argv[i])
                         ok = JS_FALSE;
-                        break;
-                    }
                 }
 
                 /* Skip the JSOP_PUSHOBJ-created empty string. */
===================================================================
RCS file: /cvsroot/mozilla/js/src jsparse.c,v
retrieving revision 3.288
retrieving revision 3.289
diff -u -r3.288 -r3.289
--- mozilla/js/src/jsparse.c	2007/06/04 23:03:03	3.288
+++ mozilla/js/src/jsparse.c	2007/06/19 04:10:03	3.289
@@ -222,15 +222,15 @@
             break;
         }
     }
-#ifdef METER_PARSENODES
     if (pn) {
+#ifdef METER_PARSENODES
         parsenodes++;
         if (parsenodes - recyclednodes > maxparsenodes)
             maxparsenodes = parsenodes - recyclednodes;
-    }
 #endif
-    memset(&pn->pn_u, 0, sizeof pn->pn_u);
-    pn->pn_next = NULL;
+        memset(&pn->pn_u, 0, sizeof pn->pn_u);
+        pn->pn_next = NULL;
+    }
     return pn;
 }
 
===================================================================
RCS file: /cvsroot/mozilla/js/src jsstr.c,v
retrieving revision 3.146
retrieving revision 3.147
diff -u -r3.146 -r3.147
--- mozilla/js/src/jsstr.c	2007/06/18 21:38:31	3.146
+++ mozilla/js/src/jsstr.c	2007/06/19 04:10:03	3.147
@@ -2369,6 +2369,8 @@
     return JS_TRUE;
 
   bad:
+    if (empty)
+        js_UnlockGCThingRT(rt, empty);
 #ifdef JS_THREADSAFE
     JS_DESTROY_LOCK(rt->deflatedStringCacheLock);
     rt->deflatedStringCacheLock = NULL;
===================================================================
RCS file: /cvsroot/mozilla/js/src jsxml.c,v
retrieving revision 3.157
retrieving revision 3.158
diff -u -r3.157 -r3.158
--- mozilla/js/src/jsxml.c	2007/06/06 22:06:16	3.157
+++ mozilla/js/src/jsxml.c	2007/06/19 04:10:03	3.158
@@ -1954,13 +1954,13 @@
     size_t urilen, srclen, length, offset, dstlen;
     jschar *chars;
     const jschar *srcp, *endp;
+    JSXML *xml;
     void *mark;
     JSTokenStream *ts;
     uintN lineno;
     JSStackFrame *fp;
     JSOp op;
     JSParseNode *pn;
-    JSXML *xml;
     JSXMLArray nsarray;
     uintN flags;
 
@@ -2000,10 +2000,11 @@
                              &dstlen);
     chars [offset + dstlen] = 0;
 
+    xml = NULL;
     mark = JS_ARENA_MARK(&cx->tempPool);
     ts = js_NewBufferTokenStream(cx, chars, length);
     if (!ts)
-        return NULL;
+        goto out;
     for (fp = cx->fp; fp && !fp->pc; fp = fp->down)
         continue;
     if (fp) {
@@ -2020,7 +2021,6 @@
 
     JS_KEEP_ATOMS(cx->runtime);
     pn = js_ParseXMLTokenStream(cx, cx->fp->scopeChain, ts, JS_FALSE);
-    xml = NULL;
     if (pn && XMLArrayInit(cx, &nsarray, 1)) {
         if (GetXMLSettingFlags(cx, &flags))
             xml = ParseNodeToXML(cx, pn, &nsarray, flags);
@@ -2029,6 +2029,7 @@
     }
     JS_UNKEEP_ATOMS(cx->runtime);
 
+out:
     JS_ARENA_RELEASE(&cx->tempPool, mark);
     JS_free(cx, chars);
     return xml;
@@ -2334,8 +2335,10 @@
     js_AppendCString(sb, "=\"");
     valstr = js_EscapeAttributeValue(cx, valstr);
     if (!valstr) {
-        free(sb->base);
-        sb->base = STRING_BUFFER_ERROR_BASE;
+        if (STRING_BUFFER_OK(sb)) {
+            free(sb->base);
+            sb->base = STRING_BUFFER_ERROR_BASE;
+        }
         return;
     }
     js_AppendJSString(sb, valstr);
@@ -2682,8 +2685,14 @@
         return NULL;
 
     js_InitStringBuffer(&sb);
-    if (pretty)
+    if (pretty) {
         js_RepeatChar(&sb, ' ', indentLevel);
+
+        if (!STRING_BUFFER_OK(&sb)) {
+            JS_ReportOutOfMemory(cx);
+            return NULL;
+        }
+    }
     str = NULL;
 
     switch (xml->xml_class) {
@@ -2729,17 +2738,17 @@
         if (kid)
             goto list_out;
 
-        if (!sb.base) {
-            if (!STRING_BUFFER_OK(&sb)) {
-                JS_ReportOutOfMemory(cx);
-                return NULL;
-            }
+        if (!sb.base)
             return cx->runtime->emptyString;
+
+        if (!STRING_BUFFER_OK(&sb)) {
+            JS_ReportOutOfMemory(cx);
+            return NULL;
         }
 
         str = js_NewString(cx, sb.base, STRING_BUFFER_OFFSET(&sb), 0);
       list_out:
-        if (!str)
+        if (!str && STRING_BUFFER_OK(&sb))
             js_FinishStringBuffer(&sb);
         return str;
 
@@ -7124,7 +7133,8 @@
         return ToXMLString(cx, OBJECT_TO_JSVAL(xml->object));
 
     str = cx->runtime->emptyString;
-    js_EnterLocalRootScope(cx);
+    if (!js_EnterLocalRootScope(cx))
+        return NULL;
     XMLArrayCursorInit(&cursor, &xml->xml_kids);
     while ((kid = (JSXML *) XMLArrayCursorNext(&cursor)) != NULL) {
         if (kid->xml_class != JSXML_CLASS_COMMENT &&


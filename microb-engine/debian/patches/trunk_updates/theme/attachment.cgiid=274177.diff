# Bug 389754  button themeing goes away when applying full page zoom
Index: mozilla/widget/src/xpwidgets/nsNativeTheme.cpp
===================================================================
--- mozilla.orig/widget/src/xpwidgets/nsNativeTheme.cpp
+++ mozilla/widget/src/xpwidgets/nsNativeTheme.cpp
@@ -179,24 +179,29 @@
       return checked;
     }
   }
 
   return CheckBooleanAttr(aFrame, aCheckSelected ? nsWidgetAtoms::selected
                                                  : nsWidgetAtoms::checked);
 }
 
+// Copied from nsStyleStruct.h
+#define NS_ROUND_BORDER_TO_PIXELS(l,tpp) \
+  ((l) == 0) ? 0 : PR_MAX((tpp), ((l) + ((tpp) / 2)) / (tpp) * (tpp))
+
 static void
-ConvertMarginToAppUnits(const nsMargin &aSource, nsMargin &aDest)
+ConvertBorderToAppUnits(nsPresContext* aPresContext, const nsMargin &aSource, nsMargin &aDest)
 {
-  PRInt32 p2a = nsPresContext::AppUnitsPerCSSPixel();
-  aDest.top = NSIntPixelsToAppUnits(aSource.top, p2a);
-  aDest.left = NSIntPixelsToAppUnits(aSource.left, p2a);
-  aDest.bottom = NSIntPixelsToAppUnits(aSource.bottom, p2a);
-  aDest.right = NSIntPixelsToAppUnits(aSource.right, p2a);
+  PRInt32 cp2a = nsPresContext::AppUnitsPerCSSPixel();
+  PRInt32 dp2a = aPresContext->AppUnitsPerDevPixel();
+  aDest.top = NS_ROUND_BORDER_TO_PIXELS(NSIntPixelsToAppUnits(aSource.top, cp2a), dp2a);
+  aDest.left = NS_ROUND_BORDER_TO_PIXELS(NSIntPixelsToAppUnits(aSource.left, cp2a), dp2a);
+  aDest.bottom = NS_ROUND_BORDER_TO_PIXELS(NSIntPixelsToAppUnits(aSource.bottom, cp2a), dp2a);
+  aDest.right = NS_ROUND_BORDER_TO_PIXELS(NSIntPixelsToAppUnits(aSource.right, cp2a), dp2a);;
 }
 
 PRBool
 nsNativeTheme::IsWidgetStyled(nsPresContext* aPresContext, nsIFrame* aFrame,
                               PRUint8 aWidgetType)
 {
   // Check for specific widgets to see if HTML has overridden the style.
   if (aFrame && (aWidgetType == NS_THEME_BUTTON ||
@@ -212,65 +217,65 @@
       nsMargin defaultBorderSize;
       PRBool defaultBGTransparent = PR_FALSE;
 
       nsILookAndFeel *lookAndFeel = aPresContext->LookAndFeel();
 
       switch (aWidgetType) {
       case NS_THEME_BUTTON:
         if (IsDisabled(aFrame)) {
-          ConvertMarginToAppUnits(sButtonDisabledBorderSize, defaultBorderSize);
+          ConvertBorderToAppUnits(aPresContext, sButtonDisabledBorderSize, defaultBorderSize);
           defaultBorderStyle = sButtonInactiveBorderStyle;
           lookAndFeel->GetColor(sButtonDisabledBorderColorID,
                                 defaultBorderColor);
           lookAndFeel->GetColor(sButtonDisabledBGColorID,
                                 defaultBGColor);
         } else {
           PRInt32 contentState = GetContentState(aFrame, aWidgetType);
-          ConvertMarginToAppUnits(sButtonBorderSize, defaultBorderSize);
+          ConvertBorderToAppUnits(aPresContext, sButtonBorderSize, defaultBorderSize);
           if (contentState & NS_EVENT_STATE_HOVER &&
               contentState & NS_EVENT_STATE_ACTIVE)
             defaultBorderStyle = sButtonActiveBorderStyle;
           else
             defaultBorderStyle = sButtonInactiveBorderStyle;
           lookAndFeel->GetColor(sButtonBorderColorID,
                                 defaultBorderColor);
           lookAndFeel->GetColor(sButtonBGColorID,
                                 defaultBGColor);
         }
         break;
 
       case NS_THEME_TEXTFIELD:
       case NS_THEME_TEXTFIELD_MULTILINE:
         defaultBorderStyle = sTextfieldBorderStyle;
-        ConvertMarginToAppUnits(sTextfieldBorderSize, defaultBorderSize);
+        ConvertBorderToAppUnits(aPresContext, sTextfieldBorderSize, defaultBorderSize);
         lookAndFeel->GetColor(sTextfieldBorderColorID, defaultBorderColor);
         if (!(defaultBGTransparent = sTextfieldBGTransparent)) {
           if (IsDisabled(aFrame))
             lookAndFeel->GetColor(sTextfieldDisabledBGColorID, defaultBGColor);
           else
             lookAndFeel->GetColor(sTextfieldBGColorID, defaultBGColor);
         }
         break;
 
       case NS_THEME_LISTBOX:
         defaultBorderStyle = sListboxBorderStyle;
-        ConvertMarginToAppUnits(sListboxBorderSize, defaultBorderSize);
+        ConvertBorderToAppUnits(aPresContext, sListboxBorderSize, defaultBorderSize);
         lookAndFeel->GetColor(sListboxBorderColorID, defaultBorderColor);
         if (!(defaultBGTransparent = sListboxBGTransparent)) {
           if (IsDisabled(aFrame))
             lookAndFeel->GetColor(sListboxDisabledBGColorID, defaultBGColor);
           else
             lookAndFeel->GetColor(sListboxBGColorID, defaultBGColor);
         }
         break;
 
       case NS_THEME_DROPDOWN:
         defaultBorderStyle = sComboboxBorderStyle;
-        ConvertMarginToAppUnits(sComboboxBorderSize, defaultBorderSize);
+        ConvertBorderToAppUnits(aPresContext, sComboboxBorderSize, defaultBorderSize);
         lookAndFeel->GetColor(sComboboxBorderColorID, defaultBorderColor);
         defaultBGTransparent = sComboboxBGTransparent;
         if (!defaultBGTransparent) {
           if (IsDisabled(aFrame))
             lookAndFeel->GetColor(sComboboxDisabledBGColorID, defaultBGColor);
           else
             lookAndFeel->GetColor(sComboboxBGColorID, defaultBGColor);
         }

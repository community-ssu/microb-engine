# Additional fix for using more less normal font in ENABLE_XFT_FAST_PATH_ALWAYS mode
# added bool preference "gfx.pango.force.one.font" to setup Always fast mode
# export MOZ_PANGO_FONT_NAME="your font" to choose more proper font
# nsFontMetricsXft::SetupFCPattern should be implemented with ENABLE_XFT_FAST_PATH_ALWAYS 
Index: mozilla/gfx/thebes/src/gfxPangoFonts.cpp
===================================================================
--- mozilla.orig/gfx/thebes/src/gfxPangoFonts.cpp
+++ mozilla/gfx/thebes/src/gfxPangoFonts.cpp
@@ -62,16 +62,17 @@
 #include "nsPromiseFlatString.h"
 
 #include "gfxContext.h"
 #include "gfxPangoFonts.h"
 
 #include "nsCRT.h"
 
 #include "cairo.h"
+#include "prenv.h"
 
 #ifndef THEBES_USE_PANGO_CAIRO
 #include <gdk/gdk.h>
 #include <gdk/gdkx.h>
 #include <gdk/gdkpango.h>
 
 
 #include <freetype/tttables.h>
@@ -93,16 +94,18 @@
 #include <math.h>
 
 #define FLOAT_PANGO_SCALE ((gfxFloat)PANGO_SCALE)
 
 #define IS_MISSING_GLYPH(g) (((g) & 0x10000000) || (g) == 0x0FFFFFFF)
 
 static PangoLanguage *GetPangoLanguage(const nsACString& aLangGroup);
 static void GetMozLanguage(const PangoLanguage *aLang, nsACString &aMozLang);
+static PRBool sForceOneFont = PR_TRUE;
+static char *sForceOneFontName = "Arial";
 
 /* static */ gfxPangoFontCache* gfxPangoFontCache::sPangoFontCache = nsnull;
 /* static */ gfxPangoFontNameMap* gfxPangoFontNameMap::sPangoFontNameMap = nsnull;
 
 /**
  ** gfxPangoFontGroup
  **/
 
@@ -206,17 +209,30 @@
 {
     static PRBool initialized = PR_FALSE;
     if (initialized)
         return;
     initialized = PR_TRUE;
 
     g_type_init();
 
-    PRLibrary *pangoLib = nsnull;
+    nsCOMPtr<nsIPrefBranch> prefs =
+             do_GetService(NS_PREFSERVICE_CONTRACTID);
+    if (!prefs)
+			return;
+
+		prefs->GetBoolPref("gfx.pango.force.one.font",
+		 									 &sForceOneFont);
+
+		char *forceOneFontName = PR_GetEnv("MOZ_PANGO_FONT_NAME");
+		if (forceOneFontName)
+			sForceOneFontName = forceOneFontName;
+
+		gPangoLib = PR_LoadLibrary("libpango-1.0.so");
+		PRLibrary *pangoLib = nsnull;
     PTR_pango_font_description_set_absolute_size =
         (void (*)(PangoFontDescription*, double))
         PR_FindFunctionSymbolAndLibrary("pango_font_description_set_absolute_size",
                                         &pangoLib);
     if (pangoLib)
         PR_UnloadLibrary(pangoLib);
 
     PRLibrary *xftLib = nsnull;
@@ -243,16 +259,31 @@
         pango_font_description_set_size(desc,
                                         (gint)(size * 72.0 /
                                                gfxPlatformGtk::DPI()));
     }
 }
 #else
 static inline void InitPangoLib()
 {
+    static PRBool initialized = PR_FALSE;
+    if (initialized)
+        return;
+    initialized = PR_TRUE;
+    nsCOMPtr<nsIPrefBranch> prefs =
+             do_GetService(NS_PREFSERVICE_CONTRACTID);
+    if (!prefs)
+        return;
+
+    prefs->GetBoolPref("gfx.pango.force.one.font",
+                       &sForceOneFont);
+
+    char *forceOneFontName = PR_GetEnv("MOZ_PANGO_FONT_NAME");
+    if (forceOneFontName)
+        sForceOneFontName = forceOneFontName;
 }
 
 static inline void ShutdownPangoLib()
 {
 }
 
 static inline void
 MOZ_pango_font_description_set_absolute_size(PangoFontDescription *desc, double size)
@@ -376,17 +407,24 @@
         g_object_unref(mPangoFont);
         mPangoFont = nsnull;
         mXftFont = nsnull;
         // XXX we don't need to reset mGlyphTestingFont
     }
 
     mPangoFontDesc = pango_font_description_new();
 
-    pango_font_description_set_family(mPangoFontDesc, NS_ConvertUTF16toUTF8(mName).get());
+#if defined(ENABLE_XFT_FAST_PATH_ALWAYS)
+    pango_font_description_set_family(mPangoFontDesc, sForceOneFontName);
+#else
+    if (sForceOneFont)
+        pango_font_description_set_family(mPangoFontDesc, sForceOneFontName);
+    else
+        pango_font_description_set_family(mPangoFontDesc, NS_ConvertUTF16toUTF8(mName).get());
+#endif
     gfxFloat size = mAdjustedSize ? mAdjustedSize : GetStyle()->size;
     MOZ_pango_font_description_set_absolute_size(mPangoFontDesc, size * PANGO_SCALE);
     pango_font_description_set_style(mPangoFontDesc, ThebesStyleToPangoStyle(GetStyle()));
     pango_font_description_set_weight(mPangoFontDesc, ThebesStyleToPangoWeight(GetStyle()));
 
     //printf ("%s, %f, %d, %d\n", NS_ConvertUTF16toUTF8(mName).get(), GetStyle()->size, ThebesStyleToPangoStyle(GetStyle()), ThebesStyleToPangoWeight(GetStyle()));
 #ifndef THEBES_USE_PANGO_CAIRO
     mPangoCtx = pango_xft_get_context(GDK_DISPLAY(), 0);
@@ -853,17 +891,17 @@
 void
 gfxPangoFontGroup::InitTextRun(gfxTextRun *aTextRun, const gchar *aUTF8Text,
                                PRUint32 aUTF8Length, PRUint32 aUTF8HeaderLength)
 {
 #if defined(ENABLE_XFT_FAST_PATH_ALWAYS)
     CreateGlyphRunsXft(aTextRun, aUTF8Text + aUTF8HeaderLength, aUTF8Length - aUTF8HeaderLength);
 #else
 #if defined(ENABLE_XFT_FAST_PATH_8BIT)
-    if (aTextRun->GetFlags() & gfxTextRunFactory::TEXT_IS_8BIT) {
+    if (aTextRun->GetFlags() & gfxTextRunFactory::TEXT_IS_8BIT || sForceOneFont) {
         CreateGlyphRunsXft(aTextRun, aUTF8Text + aUTF8HeaderLength, aUTF8Length - aUTF8HeaderLength);
         return;
     }
 #endif
 
     pango_context_set_base_dir(GetFontAt(0)->GetPangoContext(),
                                (aTextRun->IsRightToLeft()
                                   ? PANGO_DIRECTION_RTL : PANGO_DIRECTION_LTR));
--- mozilla/gfx/thebes/src/gfxPangoFonts.cpp.orig	2007-06-01 02:41:16.000000000 +0300
+++ mozilla/gfx/thebes/src/gfxPangoFonts.cpp	2007-06-01 03:07:42.000000000 +0300
@@ -219,21 +219,20 @@ static void InitPangoLib()
     if (!prefs)
 			return;
 
 		prefs->GetBoolPref("gfx.pango.force.one.font",
 		 									 &sForceOneFont);
 
 		char *forceOneFontName = PR_GetEnv("MOZ_PANGO_FONT_NAME");
 		if (forceOneFontName)
 			sForceOneFontName = forceOneFontName;
 
-		gPangoLib = PR_LoadLibrary("libpango-1.0.so");
 		PRLibrary *pangoLib = nsnull;
     PTR_pango_font_description_set_absolute_size =
         (void (*)(PangoFontDescription*, double))
         PR_FindFunctionSymbolAndLibrary("pango_font_description_set_absolute_size",
                                         &pangoLib);
     if (pangoLib)
         PR_UnloadLibrary(pangoLib);
 
     PRLibrary *xftLib = nsnull;
     int *xft_max_freetype_files_ptr = nsnull;

--- mozilla/content/html/document/src/nsImageDocument.cpp.orig	2007-08-30 14:17:57.000000000 +0300
+++ mozilla/content/html/document/src/nsImageDocument.cpp	2007-08-30 14:46:25.000000000 +0300
@@ -139,20 +139,21 @@ protected:
 
   PRPackedBool                  mResizeImageByDefault;
   PRPackedBool                  mImageIsOverflowing;
   // mImageIsResized is true if the image is currently resized
   PRPackedBool                  mImageIsResized;
   // mShouldResize is true if the image should be resized when it doesn't fit
   // mImageIsResized cannot be true when this is false, but mImageIsResized
   // can be false when this is true
   PRPackedBool                  mShouldResize;
   PRPackedBool                  mFirstResize;
+  float                         mStoredZoom;
 };
 
 NS_IMPL_ADDREF_INHERITED(ImageListener, nsMediaDocumentStreamListener)
 NS_IMPL_RELEASE_INHERITED(ImageListener, nsMediaDocumentStreamListener)
 
 NS_INTERFACE_MAP_BEGIN(ImageListener)
 NS_INTERFACE_MAP_END_INHERITING(nsMediaDocumentStreamListener)
 
 ImageListener::ImageListener(nsImageDocument* aDocument)
   : nsMediaDocumentStreamListener(aDocument)
@@ -246,20 +247,21 @@ ImageListener::OnStopRequest(nsIRequest*
   return nsMediaDocumentStreamListener::OnStopRequest(request, ctxt, status);
 }
 
 
   // NOTE! nsDocument::operator new() zeroes out all members, so don't
   // bother initializing members to 0.
 
 nsImageDocument::nsImageDocument()
 {
 
+  mStoredZoom = 1.0f;
   // NOTE! nsDocument::operator new() zeroes out all members, so don't
   // bother initializing members to 0.
 
 }
 
 nsImageDocument::~nsImageDocument()
 {
 }
 
 NS_IMPL_ADDREF_INHERITED(nsImageDocument, nsMediaDocument)
@@ -412,20 +414,33 @@ nsImageDocument::ShrinkToFit()
   image->SetWidth(PR_MAX(1, NSToCoordFloor(GetRatio() * mImageWidth)));
   image->SetHeight(PR_MAX(1, NSToCoordFloor(GetRatio() * mImageHeight)));
   
   imageContent->SetAttr(kNameSpaceID_None, nsGkAtoms::style,
                         NS_LITERAL_STRING("cursor: -moz-zoom-in"), PR_TRUE);
   
   mImageIsResized = PR_TRUE;
   
   UpdateTitleAndCharset();
 
+  nsIPresShell *shell = GetPrimaryShell();
+  NS_ENSURE_TRUE(shell, NS_OK);
+  nsPresContext* context = shell->GetPresContext();
+  NS_ENSURE_TRUE(context, NS_OK);
+  mStoredZoom = context->FullZoom();
+  if (mStoredZoom != 1.0)
+    context->SetFullZoom(1.0, PR_FALSE);
+  nsIViewManager* vm = context->GetViewManager();
+  NS_ENSURE_TRUE(vm, NS_OK);
+  nsIScrollableView* view;
+  vm->GetRootScrollableView(&view);
+  NS_ENSURE_TRUE(view, NS_OK);
+  view->ScrollTo(0, 0, NS_VMREFRESH_IMMEDIATE);
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsImageDocument::RestoreImageTo(PRInt32 aX, PRInt32 aY)
 {
   float ratio = GetRatio();
 
   RestoreImage();
   FlushPendingNotifications(Flush_Layout);
@@ -470,21 +485,29 @@ nsImageDocument::RestoreImage()
     imageContent->SetAttr(kNameSpaceID_None, nsGkAtoms::style,
                           NS_LITERAL_STRING("cursor: -moz-zoom-out"), PR_TRUE);
   }
   else {
     imageContent->UnsetAttr(kNameSpaceID_None, nsGkAtoms::style, PR_TRUE);
   }
   
   mImageIsResized = PR_FALSE;
   
   UpdateTitleAndCharset();
+  
+  if (mStoredZoom == 1.0)
+    return NS_OK;
 
+  nsIPresShell *shell = GetPrimaryShell();
+  NS_ENSURE_TRUE(shell, NS_OK);
+  nsPresContext* context = shell->GetPresContext();
+  NS_ENSURE_TRUE(context, NS_OK);
+  context->SetFullZoom(mStoredZoom, PR_FALSE);
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsImageDocument::ToggleImageSize()
 {
   mShouldResize = PR_TRUE;
   if (mImageIsResized) {
     mShouldResize = PR_FALSE;
     RestoreImage();

# Fix for correct drawing/scaling checkbox and radio buttons in Native GtkTheme
# Probably not required in trunk
Index: mozilla/widget/src/gtk2/nsNativeThemeGTK.cpp
===================================================================
--- mozilla.orig/widget/src/gtk2/nsNativeThemeGTK.cpp
+++ mozilla/widget/src/gtk2/nsNativeThemeGTK.cpp
@@ -872,17 +872,17 @@
         moz_gtk_checkbox_get_metrics(&indicator_size, &indicator_spacing);
       } else {
         moz_gtk_radio_get_metrics(&indicator_size, &indicator_spacing);
       }
 
       // Include space for the indicator and the padding around it.
       aResult->width = indicator_size + 3 * indicator_spacing;
       aResult->height = indicator_size + 2 * indicator_spacing;
-      *aIsOverridable = PR_FALSE;
+      *aIsOverridable = PR_TRUE;
     }
     break;
 
   case NS_THEME_CHECKBOX_CONTAINER:
   case NS_THEME_RADIO_CONTAINER:
   case NS_THEME_CHECKBOX_LABEL:
   case NS_THEME_RADIO_LABEL:
   case NS_THEME_BUTTON:
Index: mozilla/widget/src/gtk2/gtk2drawing.c
===================================================================
--- mozilla.orig/widget/src/gtk2/gtk2drawing.c
+++ mozilla/widget/src/gtk2/gtk2drawing.c
@@ -105,16 +105,17 @@
 static gint
 setup_widget_prototype(GtkWidget* widget)
 {
     static GtkWidget* protoLayout;
     ensure_window_widget();
     if (!protoLayout) {
         protoLayout = gtk_fixed_new();
         gtk_container_add(GTK_CONTAINER(gProtoWindow), protoLayout);
+        gtk_widget_set_name(protoLayout, "GtkMozLayout");
     }
 
     gtk_container_add(GTK_CONTAINER(protoLayout), widget);
     gtk_widget_realize(widget);
     return MOZ_GTK_SUCCESS;
 }
 
 static gint
@@ -602,16 +603,18 @@
         moz_gtk_radio_get_metrics(&indicator_size, &indicator_spacing);
         w = gRadiobuttonWidget;
     } else {
         moz_gtk_checkbox_get_metrics(&indicator_size, &indicator_spacing);
         w = gCheckboxWidget;
     }
 
     /* offset by indicator_spacing, and centered vertically within the rect */
+    indicator_size = rect->width < rect->height ? rect->width : rect->height;
+    indicator_size -= indicator_spacing;
     x = rect->x + indicator_spacing;
     y = rect->y + (rect->height - indicator_size) / 2;
     width = indicator_size;
     height = indicator_size;
   
     style = w->style;
     TSOffsetStyleGCs(style, x, y);
 

# Building --enable-debug  with buggy gcc CodeSourcery 3.4.4
# workarround
Index: mozilla/layout/style/nsROCSSPrimitiveValue.cpp
===================================================================
--- mozilla.orig/layout/style/nsROCSSPrimitiveValue.cpp
+++ mozilla/layout/style/nsROCSSPrimitiveValue.cpp
@@ -70,16 +70,44 @@ NS_INTERFACE_MAP_BEGIN(nsROCSSPrimitiveV
   NS_INTERFACE_MAP_ENTRY(nsIDOMCSSValue)
   NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIDOMCSSPrimitiveValue)
   NS_INTERFACE_MAP_ENTRY_CONTENT_CLASSINFO(ROCSSPrimitiveValue)
 NS_INTERFACE_MAP_END
 
 
 // nsIDOMCSSValue
 
+#if !defined(__arm__) && defined(CSGCC)
+void
+nsROCSSPrimitiveValue::Reset(void)
+{
+  switch (mType) {
+    case CSS_IDENT:
+      break;
+    case CSS_STRING:
+    case CSS_ATTR:
+    case CSS_COUNTER: // FIXME: Counter should use an object
+      NS_ASSERTION(mValue.mString, "Null string should never happen");
+      nsMemory::Free(mValue.mString);
+      mValue.mString = nsnull;
+      break;
+    case CSS_URI:
+      NS_IF_RELEASE(mValue.mURI);
+      break;
+    case CSS_RECT:
+      NS_ASSERTION(mValue.mRect, "Null Rect should never happen");
+      NS_RELEASE(mValue.mRect);
+      break;
+    case CSS_RGBCOLOR:
+      NS_ASSERTION(mValue.mColor, "Null RGBColor should never happen");
+      NS_RELEASE(mValue.mColor);
+      break;
+  }
+}
+#endif
 
 NS_IMETHODIMP
 nsROCSSPrimitiveValue::GetCssText(nsAString& aCssText)
 {
   nsAutoString tmpStr;
   aCssText.Truncate();
   nsresult result = NS_OK;
 
Index: mozilla/layout/style/nsROCSSPrimitiveValue.h
===================================================================
--- mozilla.orig/layout/style/nsROCSSPrimitiveValue.h
+++ mozilla/layout/style/nsROCSSPrimitiveValue.h
@@ -177,16 +177,19 @@ public:
       NS_ADDREF(mValue.mRect);
       mType = CSS_RECT;
     }
     else {
       mType = CSS_UNKNOWN;
     }
   }
 
+#if !defined(__arm__) && defined(CSGCC)
+  inline void Reset(void);
+#else
   void Reset(void)
   {
     switch (mType) {
       case CSS_IDENT:
         break;
       case CSS_STRING:
       case CSS_ATTR:
       case CSS_COUNTER: // FIXME: Counter should use an object
@@ -202,16 +205,17 @@ public:
         NS_RELEASE(mValue.mRect);
         break;
       case CSS_RGBCOLOR:
         NS_ASSERTION(mValue.mColor, "Null RGBColor should never happen");
         NS_RELEASE(mValue.mColor);
         break;
     }
   }
+#endif
 
 private:
   PRUint16 mType;
 
   union {
     nscoord         mAppUnits;
     float           mFloat;
     nsDOMCSSRGBColor* mColor;

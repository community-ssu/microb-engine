# revert for 
# Bug 469091 - Removes an unused method from the geolocation provider api. r/sr=jst
# Bug 469715 - Geolocation Coordinates interface. r/sr=jst
# because maemo provider not updated
diff -r d9672ee1888a dom/public/idl/geolocation/Makefile.in
--- a/dom/public/idl/geolocation/Makefile.in	Fri Jan 09 11:19:52 2009 +0200
+++ b/dom/public/idl/geolocation/Makefile.in	Fri Jan 09 11:20:09 2009 +0200
@@ -44,17 +44,16 @@ include $(DEPTH)/config/autoconf.mk
 
 MODULE         = dom
 XPIDL_MODULE   = dom_geolocation
 GRE_MODULE     = 1
 
 XPIDLSRCS =                                    \
             nsIDOMGeoGeolocation.idl           \
             nsIDOMGeoPosition.idl              \
-            nsIDOMGeoPositionCoords.idl        \
             nsIDOMGeoPositionCallback.idl      \
             nsIDOMGeoPositionError.idl         \
             nsIDOMGeoPositionErrorCallback.idl \
             nsIDOMGeoPositionOptions.idl       \
             nsIDOMNavigatorGeolocation.idl     \
             nsIGeolocationProvider.idl         \
             $(NULL)
 
diff -r d9672ee1888a dom/public/idl/geolocation/nsIDOMGeoPosition.idl
--- a/dom/public/idl/geolocation/nsIDOMGeoPosition.idl	Fri Jan 09 11:19:52 2009 +0200
+++ b/dom/public/idl/geolocation/nsIDOMGeoPosition.idl	Fri Jan 09 11:20:09 2009 +0200
@@ -31,16 +31,21 @@
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 
 #include "domstubs.idl"
-#include "nsIDOMGeoPositionCoords.idl"
 
-[scriptable, uuid(76888EB0-5EAB-4BE6-BFE0-489EC4095358)]
+[scriptable, uuid(B31702D0-6DAC-4FA0-B93B-F043E71C8F9A)]
 interface nsIDOMGeoPosition : nsISupports
 {
-  readonly attribute nsIDOMGeoPositionCoords coords;
+  readonly attribute double latitude;
+  readonly attribute double longitude;
+  readonly attribute double altitude;
+  readonly attribute double accuracy;
+  readonly attribute double altitudeAccuracy;
+  readonly attribute double heading;
+  readonly attribute double speed;
   readonly attribute DOMTimeStamp timestamp;
 };
diff -r d9672ee1888a dom/public/idl/geolocation/nsIGeolocationProvider.idl
--- a/dom/public/idl/geolocation/nsIGeolocationProvider.idl	Fri Jan 09 11:19:52 2009 +0200
+++ b/dom/public/idl/geolocation/nsIGeolocationProvider.idl	Fri Jan 09 11:20:09 2009 +0200
@@ -87,17 +87,17 @@ interface nsIGeolocationUpdate : nsISupp
 
 
 /**
  * Interface provides location information to the nsGeolocator
  * via the nsIDOMGeolocationCallback interface.  After
  * startup is called, any geo location change should call
  * callback.onRequest().
  */
-[scriptable, uuid(5C819505-8804-496E-9CB2-53089B3DD4EF)]
+[scriptable, uuid(E319BE2D-B1D1-4CA6-AEF4-66178589B63D)]
 interface nsIGeolocationProvider : nsISupports {
 
   /**
    * Start up the provider.  This is called before any other
    * method.  may be called multiple times.
    */
   void startup();
 
@@ -109,16 +109,22 @@ interface nsIGeolocationProvider : nsISu
 
   /**
    * watch
    * When a location change is observed, notify the callback
    */
   void watch(in nsIGeolocationUpdate callback);
 
   /**
+   * currentLocation return the current location as seen by
+   * the provider.  may be null.
+   */
+  readonly attribute nsIDOMGeoPosition currentPosition;
+  
+  /**
    * shutdown
    * Shuts down the location device.
    */
   void shutdown();
 };
 
 %{C++
 /*  
diff -r d9672ee1888a dom/tests/mochitest/geolocation/geolocation_common.js
--- a/dom/tests/mochitest/geolocation/geolocation_common.js	Fri Jan 09 11:19:52 2009 +0200
+++ b/dom/tests/mochitest/geolocation/geolocation_common.js	Fri Jan 09 11:20:09 2009 +0200
@@ -1,13 +1,19 @@
 // defines for prompt - button position
 const ACCEPT = 0;
 const ACCEPT_FUZZ = 1;
 const DECLINE = 2;
 
+/* Set if testLocationProvider is registered as geolocation provider.
+ * To register, copy testLocationProvider.js to components directory 
+ * and remove from directory when done. 
+ */
+var TEST_PROVIDER = 0; 
+
 // set if there should be a delay before prompt is accepted
 var DELAYED_PROMPT = 0;
 
 var prompt_delay = timeout * 2;
 
 // the prompt that was registered at runtime
 var old_prompt;
 
@@ -26,41 +32,41 @@ var slack = 500;
 
 // time needed for provider to make position changes
 var timeout = num_pos_changes * timer_interval + slack;
 
 function check_geolocation(location) {
 
   ok(location, "Check to see if this location is non-null");
 
+  ok("latitude" in location, "Check to see if there is a latitude");
+  ok("longitude" in location, "Check to see if there is a longitude");
+  ok("altitude" in location, "Check to see if there is a altitude");
+  ok("accuracy" in location, "Check to see if there is a accuracy");
+  ok("altitudeAccuracy" in location, "Check to see if there is a alt accuracy");
+  ok("heading" in location, "Check to see if there is a heading");
+  ok("speed" in location, "Check to see if there is a speed");
   ok("timestamp" in location, "Check to see if there is a timestamp");
 
-  // eventually, coords may be optional (eg, when civic addresses are supported)
-  ok("coords" in location, "Check to see if this location has a coords");
-
-  var coords = location.coords;
-
-  ok("latitude" in coords, "Check to see if there is a latitude");
-  ok("longitude" in coords, "Check to see if there is a longitude");
-  ok("altitude" in coords, "Check to see if there is a altitude");
-  ok("accuracy" in coords, "Check to see if there is a accuracy");
-  ok("altitudeAccuracy" in coords, "Check to see if there is a alt accuracy");
-  ok("heading" in coords, "Check to see if there is a heading");
-  ok("speed" in coords, "Check to see if there is a speed");
 }
 
 //TODO: test for fuzzed location when this is implemented
 function check_fuzzed_geolocation(location) {
   check_geolocation(location);
 }
 
 function check_no_geolocation(location) {
    ok(!location, "Check to see if this location is null");
 }
 
+function checkFlags(flags, value, isExact) {
+  for(var i = 0; i < flags.length; i++)
+    ok(isExact ? flags[i] == value : flags[i] >= value, "ensure callbacks called " + value + " times");
+}
+
 function success_callback(position) {
   if(prompted == 0)
     ok(0, "Should not call success callback before prompt accepted");
   if(position == null)
     ok(1, "No geolocation available");
   else {
     switch(promptOption) {
       case ACCEPT:
diff -r d9672ee1888a dom/tests/mochitest/geolocation/testLocationProvider.js
--- a/dom/tests/mochitest/geolocation/testLocationProvider.js	Fri Jan 09 11:19:52 2009 +0200
+++ b/dom/tests/mochitest/geolocation/testLocationProvider.js	Fri Jan 09 11:20:09 2009 +0200
@@ -59,16 +59,17 @@ MyLocation.prototype = {
                         watchCallback.parent = this;
 
                         if(!this.timer)
                            this.timer = Cc["@mozilla.org/timer;1"].createInstance(Ci.nsITimer);
                         this.timer.initWithCallback(watchCallback, this.timerInterval, 
                            Ci.nsITimer.TYPE_REPEATING_SLACK);
                      },
 
+    currentLocation: new GeopositionObject(),
     shutdown:        function() { 
                        dump("shutdown"); 
                        if(this.timer)
                          this.timer.cancel();
                      },
 };
 
 var components = [MyLocation];
diff -r d9672ee1888a dom/tests/mochitest/geolocation/test_allowCurrent.html
--- a/dom/tests/mochitest/geolocation/test_allowCurrent.html	Fri Jan 09 11:19:52 2009 +0200
+++ b/dom/tests/mochitest/geolocation/test_allowCurrent.html	Fri Jan 09 11:20:09 2009 +0200
@@ -29,16 +29,18 @@ for(var i = 0; i < numCallbacks; i++) {
   eval("function successCallback" + i + "(position) {" +
           "callbackCounter[" + i + "]++;" +
           "success_callback(position);" +
        "}"
   );
 }
 
 function testAccepted() {
+  if(TEST_PROVIDER)
+    checkFlags(callbackCounter, 1, true);
   removePrompt();
   SimpleTest.finish();
 }
 
 /** Test for Bug  **/
 
 SimpleTest.waitForExplicitFinish();
 
diff -r d9672ee1888a dom/tests/mochitest/geolocation/test_allowWatch.html
--- a/dom/tests/mochitest/geolocation/test_allowWatch.html	Fri Jan 09 11:19:52 2009 +0200
+++ b/dom/tests/mochitest/geolocation/test_allowWatch.html	Fri Jan 09 11:20:09 2009 +0200
@@ -51,16 +51,18 @@ function registerWatches() {
 }
 
 function clearWatches() {
   for(var i = 0; i < numCallbacks; i++)
     navigator.geolocation.clearWatch(watchID[i]);
 }
 
 function testAccepted() {
+  if(TEST_PROVIDER)
+    checkFlags(callbackCounter, num_pos_changes, false);
   clearWatches();
   removePrompt();
   SimpleTest.finish();
 }
 
 /** Test for Bug  **/
 
 SimpleTest.waitForExplicitFinish();
diff -r d9672ee1888a dom/tests/mochitest/geolocation/test_clearWatch.html
--- a/dom/tests/mochitest/geolocation/test_clearWatch.html	Fri Jan 09 11:19:52 2009 +0200
+++ b/dom/tests/mochitest/geolocation/test_clearWatch.html	Fri Jan 09 11:20:09 2009 +0200
@@ -50,27 +50,30 @@ function registerWatches() {
 }
 
 function clearWatches() {
   for(var i = 0; i < numCallbacks; i++)
     navigator.geolocation.clearWatch(watchID[i]);
 }
 
 function testAccepted() {
+  if(TEST_PROVIDER)
+    checkFlags(callbackCounter, num_pos_changes, false);
   clearWatches();
   setTimeout(clearAll, timeout); // now clear flags
 }
 
 function clearAll() {
   for(var i = 0; i < numCallbacks; i++)
     callbackCounter[i] = 0;
   setTimeout(testCleared, timeout); // check to see if watches were cleared
 }
 
 function testCleared() {
+  checkFlags(callbackCounter, 0, true);
   removePrompt();
   SimpleTest.finish();
 }
 
 
 
 /** Test for Bug  **/
 

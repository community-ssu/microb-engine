## Patches for microb-engine
## Oleg Romashin <ext-oleg.2.romashin@nokia.com>
##
## DP: Stripping not used components

Index: embedding/browser/build/nsWebBrowserModule.cpp
===================================================================
--- embedding/browser/build/nsWebBrowserModule.cpp.orig
+++ embedding/browser/build/nsWebBrowserModule.cpp
@@ -41,24 +41,28 @@
 #include "nsIServiceManager.h"
 #include "nsIGenericFactory.h"
 #include "nsICategoryManager.h"
 #include "nsXPIDLString.h"
 
 #include "nsEmbedCID.h"
 
 #include "nsWebBrowser.h"
+#ifndef MOZ_MICROB
 #include "nsCommandHandler.h"
+#endif
 #include "nsWebBrowserContentPolicy.h"
 
 // Factory Constructors
 
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsWebBrowser)
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsWebBrowserContentPolicy)
+#ifndef MOZ_MICROB
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsCommandHandler)
+#endif
 
 static NS_METHOD
 RegisterContentPolicy(nsIComponentManager *aCompMgr, nsIFile *aPath,
                       const char *registryLocation, const char *componentType,
                       const nsModuleComponentInfo *info)
 {
     nsresult rv;
     nsCOMPtr<nsICategoryManager> catman =
@@ -87,18 +91,20 @@ UnregisterContentPolicy(nsIComponentMana
 }
 
 // Component Table
 
 static const nsModuleComponentInfo components[] =
 {
    { "WebBrowser Component", NS_WEBBROWSER_CID, 
      NS_WEBBROWSER_CONTRACTID, nsWebBrowserConstructor },
+#ifndef MOZ_MICROB
    { "CommandHandler Component", NS_COMMANDHANDLER_CID,
      NS_COMMANDHANDLER_CONTRACTID, nsCommandHandlerConstructor },
+#endif
    { "nsIWebBrowserSetup content policy enforcer", 
      NS_WEBBROWSERCONTENTPOLICY_CID,
      NS_WEBBROWSERCONTENTPOLICY_CONTRACTID,
      nsWebBrowserContentPolicyConstructor,
      RegisterContentPolicy, UnregisterContentPolicy }
 };
 
 
Index: embedding/browser/webBrowser/Makefile.in
===================================================================
--- embedding/browser/webBrowser/Makefile.in.orig
+++ embedding/browser/webBrowser/Makefile.in
@@ -75,44 +75,56 @@ ifdef MOZ_PHOENIX
 REQUIRES	+= toolkitcomps
 endif
 
 EXPORTS         = \
                 nsCTooltipTextProvider.h \
                 $(NULL)
 
 SDK_XPIDLSRCS   = \
-		nsIContextMenuListener.idl  \
 		nsIEmbeddingSiteWindow.idl  \
-		nsITooltipListener.idl	    \
-		nsITooltipTextProvider.idl  \
 		nsIWebBrowser.idl	    \
 		nsIWebBrowserChrome.idl	    \
 		nsIWebBrowserChromeFocus.idl \
 		nsIWebBrowserFocus.idl	    \
 		nsIWebBrowserSetup.idl	    \
 		nsIWebBrowserStream.idl	    \
                 $(NULL)
 
 XPIDLSRCS	= \
 		nsCWebBrowser.idl			\
-		nsICommandHandler.idl			\
 		nsIEmbeddingSiteWindow2.idl \
 		nsIContextMenuListener2.idl \
 		nsIWebBrowserChrome2.idl	    \
 		$(NULL)
 
 CPPSRCS		= \
 		nsDocShellTreeOwner.cpp		\
 		nsWebBrowser.cpp		\
+	        nsWebBrowserContentPolicy.cpp   \
+		nsEmbedStream.cpp		\
+		$(NULL)
+
+ifndef MOZ_MICROB
+SDK_XPIDLSRCS   += \
+		nsIContextMenuListener.idl  \
+		nsITooltipListener.idl	    \
+		nsITooltipTextProvider.idl  \
+                $(NULL)
+
+XPIDLSRCS	+= \
+		nsICommandHandler.idl       \
+		nsIContextMenuListener2.idl \
+		$(NULL)
+
+CPPSRCS		+= \
 		nsCommandHandler.cpp		\
-        nsWebBrowserContentPolicy.cpp   \
 		nsContextMenuInfo.cpp		\
-		nsEmbedStream.cpp		\
 		$(NULL)
+endif
 
 ifdef NS_PRINTING
 SDK_XPIDLSRCS += nsIWebBrowserPrint.idl
 XPIDLSRCS     += nsIPrintingPrompt.idl nsIPrintingPromptService.idl
 endif
 
 # we don't want the shared lib, but we want to force the creation of a
 # static lib.
Index: embedding/browser/webBrowser/nsDocShellTreeOwner.cpp
===================================================================
--- embedding/browser/webBrowser/nsDocShellTreeOwner.cpp.orig
+++ embedding/browser/webBrowser/nsDocShellTreeOwner.cpp
@@ -54,19 +54,21 @@
 #include "nsXPIDLString.h"
 #include "nsIAtom.h"
 #include "nsReadableUtils.h"
 #include "nsUnicharUtils.h"
 #include "nsISimpleEnumerator.h"
 
 // Interfaces needed to be included
 #include "nsPresContext.h"
+#ifndef MOZ_MICROB
 #include "nsIContextMenuListener.h"
 #include "nsIContextMenuListener2.h"
 #include "nsITooltipListener.h"
+#endif
 #include "nsIPrivateDOMEvent.h"
 #include "nsIDOMNode.h"
 #include "nsIDOMNodeList.h"
 #include "nsIDOMDocument.h"
 #include "nsIDOMDocumentType.h"
 #include "nsIDOMElement.h"
 #include "nsIDOMEvent.h"
 #include "nsIDOMMouseEvent.h"
@@ -132,25 +134,30 @@ GetPIDOMEventTarget( nsWebBrowser* inBro
 //*****************************************************************************
 
 nsDocShellTreeOwner::nsDocShellTreeOwner() :
    mWebBrowser(nsnull), 
    mTreeOwner(nsnull),
    mPrimaryContentShell(nsnull),
    mWebBrowserChrome(nsnull),
    mOwnerWin(nsnull),
-   mOwnerRequestor(nsnull),
+   mOwnerRequestor(nsnull)
+#ifndef MOZ_MICROB
+   ,
    mChromeTooltipListener(nsnull),
    mChromeContextMenuListener(nsnull)
+#endif
 {
 }
 
 nsDocShellTreeOwner::~nsDocShellTreeOwner()
 {
+#ifndef MOZ_MICROB
   RemoveChromeListeners();
+#endif
 }
 
 //*****************************************************************************
 // nsDocShellTreeOwner::nsISupports
 //*****************************************************************************   
 
 NS_IMPL_ADDREF(nsDocShellTreeOwner)
 NS_IMPL_RELEASE(nsDocShellTreeOwner)
@@ -736,17 +743,21 @@ nsDocShellTreeOwner::OnProgressChange(ns
                                       PRInt32 aCurSelfProgress,
                                       PRInt32 aMaxSelfProgress, 
                                       PRInt32 aCurTotalProgress,
                                       PRInt32 aMaxTotalProgress)
 {
     // In the absence of DOM document creation event, this method is the
     // most convenient place to install the mouse listener on the
     // DOM document.
+#ifndef MOZ_MICROB
     return AddChromeListeners();
+#else
+    return NS_OK;
+#endif
 }
 
 NS_IMETHODIMP
 nsDocShellTreeOwner::OnStateChange(nsIWebProgress* aProgress,
                                    nsIRequest* aRequest,
                                    PRUint32 aProgressStateFlags,
                                    nsresult aStatus)
 {
@@ -785,18 +796,20 @@ nsDocShellTreeOwner::OnSecurityChange(ns
 
 //*****************************************************************************
 // nsDocShellTreeOwner: Accessors
 //*****************************************************************************   
 
 void
 nsDocShellTreeOwner::WebBrowser(nsWebBrowser* aWebBrowser)
 {
+#ifndef MOZ_MICROB
   if ( !aWebBrowser )
     RemoveChromeListeners();
+#endif
   if (aWebBrowser != mWebBrowser) {
     mPrompter = 0;
     mAuthPrompter = 0;
   }
 
   mWebBrowser = aWebBrowser;
 }
 
@@ -846,17 +859,17 @@ nsDocShellTreeOwner::SetWebBrowserChrome
       mWebBrowserChrome = aWebBrowserChrome;
       mOwnerWin = ownerWin;
       mOwnerRequestor = requestor;
     }
   }
   return NS_OK;
 }
 
-
+#ifndef MOZ_MICROB
 //
 // AddChromeListeners
 //
 // Hook up things to the chrome like context menus and tooltips, if the chrome
 // has implemented the right interfaces.
 //
 NS_IMETHODIMP
 nsDocShellTreeOwner::AddChromeListeners()
@@ -929,16 +942,17 @@ nsDocShellTreeOwner::RemoveChromeListene
     mChromeContextMenuListener->RemoveChromeListeners();
     NS_RELEASE(mChromeContextMenuListener);
   }
   if ( mChromeDragHandler )
     mChromeDragHandler->Detach();
 
   return NS_OK;
 }
+#endif
 
 already_AddRefed<nsIWebBrowserChrome>
 nsDocShellTreeOwner::GetWebBrowserChrome()
 {
   nsIWebBrowserChrome* chrome = nsnull;
   if (mWebBrowserChromeWeak != nsnull) {
     mWebBrowserChromeWeak->
                         QueryReferent(NS_GET_IID(nsIWebBrowserChrome),
@@ -983,17 +997,17 @@ nsDocShellTreeOwner::GetOwnerRequestor()
   return req;
 }
 
 
 #ifdef XP_MAC
 #pragma mark -
 #endif
 
-
+#ifndef MOZ_MICROB
 ///////////////////////////////////////////////////////////////////////////////
 // DefaultTooltipTextProvider
 
 class DefaultTooltipTextProvider : public nsITooltipTextProvider
 {
 public:
     DefaultTooltipTextProvider();
 
@@ -1835,8 +1849,10 @@ ChromeContextMenuListener::ContextMenu(n
     nsCOMPtr<nsIContextMenuListener> menuListener(do_QueryInterface(mWebBrowserChrome));
     if ( menuListener )
       menuListener->OnShowContextMenu(flags, aMouseEvent, targetDOMnode);
   }
 
   return NS_OK;
 
 } // MouseDown
+
+#endif
Index: embedding/browser/webBrowser/nsDocShellTreeOwner.h
===================================================================
--- embedding/browser/webBrowser/nsDocShellTreeOwner.h.orig
+++ embedding/browser/webBrowser/nsDocShellTreeOwner.h
@@ -57,26 +57,30 @@
 #include "nsIWebProgressListener.h"
 #include "nsWeakReference.h"
 #include "nsIDOMKeyListener.h"
 #include "nsIDOMMouseMotionListener.h"
 #include "nsIDOMContextMenuListener.h"
 #include "nsITimer.h"
 #include "nsIPrompt.h"
 #include "nsIAuthPrompt.h"
+#ifndef MOZ_MICROB
 #include "nsITooltipListener.h"
 #include "nsITooltipTextProvider.h"
 #include "nsCTooltipTextProvider.h"
 #include "nsIDragDropHandler.h"
-#include "nsPIDOMEventTarget.h"
 #include "nsCommandHandler.h"
+#endif
+#include "nsPIDOMEventTarget.h"
 
 class nsWebBrowser;
+#ifndef MOZ_MICROB
 class ChromeTooltipListener;
 class ChromeContextMenuListener;
+#endif
 
 // {6D10C180-6888-11d4-952B-0020183BF181}
 #define NS_ICDOCSHELLTREEOWNER_IID \
 { 0x6d10c180, 0x6888, 0x11d4, { 0x95, 0x2b, 0x0, 0x20, 0x18, 0x3b, 0xf1, 0x81 } }
 
 /*
  * This is a fake 'hidden' interface that nsDocShellTreeOwner implements.
  * Classes such as nsCommandHandler can QI for this interface to be
@@ -115,18 +119,20 @@ protected:
     virtual ~nsDocShellTreeOwner();
 
     void WebBrowser(nsWebBrowser* aWebBrowser);
     
     nsWebBrowser* WebBrowser();
     NS_IMETHOD SetTreeOwner(nsIDocShellTreeOwner* aTreeOwner);
     NS_IMETHOD SetWebBrowserChrome(nsIWebBrowserChrome* aWebBrowserChrome);
 
+#ifndef MOZ_MICROB
     NS_IMETHOD AddChromeListeners();
     NS_IMETHOD RemoveChromeListeners();
+#endif
 
     nsresult   FindChildWithName(const PRUnichar *aName, 
                  PRBool aRecurse, nsIDocShellTreeItem* aRequestor,
                  nsIDocShellTreeItem* aOriginalRequestor,
                  nsIDocShellTreeItem **aFoundItem);
     nsresult   FindItemWithNameAcrossWindows(const PRUnichar* aName,
                  nsIDocShellTreeItem* aRequestor,
                  nsIDocShellTreeItem* aOriginalRequestor,
@@ -155,28 +161,31 @@ protected:
    nsIDocShellTreeItem*    mPrimaryContentShell; 
 
    nsIWebBrowserChrome*    mWebBrowserChrome;
    nsIEmbeddingSiteWindow* mOwnerWin;
    nsIInterfaceRequestor*  mOwnerRequestor;
 
    nsWeakPtr               mWebBrowserChromeWeak;   // nsIWebBrowserChrome
 
+#ifndef MOZ_MICROB
     // the objects that listen for chrome events like context menus and tooltips. 
     // They are separate objects to avoid circular references between |this|
     // and the DOM. These are strong, owning refs.
    ChromeTooltipListener*         mChromeTooltipListener;
    ChromeContextMenuListener*     mChromeContextMenuListener;
    nsCOMPtr<nsIDragDropHandler>   mChromeDragHandler;
+#endif
 
    nsCOMPtr<nsIPrompt>     mPrompter;
    nsCOMPtr<nsIAuthPrompt> mAuthPrompter;
 };
 
 
+#ifndef MOZ_MICROB
 //
 // class ChromeTooltipListener
 //
 // The class that listens to the chrome events and tells the embedding
 // chrome to show tooltips, as appropriate. Handles registering itself
 // with the DOM with AddChromeListeners() and removing itself with
 // RemoveChromeListeners().
 //
@@ -294,16 +303,17 @@ private:
 
   PRPackedBool mContextMenuListenerInstalled;
 
   nsWebBrowser* mWebBrowser;
   nsCOMPtr<nsPIDOMEventTarget> mEventTarget;
   nsCOMPtr<nsIWebBrowserChrome> mWebBrowserChrome;
 
 }; // class ChromeContextMenuListener
+#endif
 
 
 
 #endif /* nsDocShellTreeOwner_h__ */
 
 
 
 
Index: embedding/browser/webBrowser/nsWebBrowser.cpp
===================================================================
--- embedding/browser/webBrowser/nsWebBrowser.cpp.orig
+++ embedding/browser/webBrowser/nsWebBrowser.cpp
@@ -1273,17 +1273,19 @@ NS_IMETHODIMP nsWebBrowser::Create()
        // (nsSecureBrowserUIImpl) gets a docShell from the domWindow,
        // and calls docShell->SetSecurityUI(this);
        nsCOMPtr<nsISecureBrowserUI> securityUI =
            do_CreateInstance(NS_SECURE_BROWSER_UI_CONTRACTID, &rv);
        if (NS_SUCCEEDED(rv)) securityUI->Init(domWindow);
    }
 
    mDocShellTreeOwner->AddToWatcher(); // evil twin of Remove in SetDocShell(0)
+#ifndef MOZ_MICROB
    mDocShellTreeOwner->AddChromeListeners();
+#endif
 
    delete mInitInfo;
    mInitInfo = nsnull;
 
    return NS_OK; 
 }
 
 NS_IMETHODIMP nsWebBrowser::Destroy()

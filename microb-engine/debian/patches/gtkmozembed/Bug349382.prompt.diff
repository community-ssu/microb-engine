Index: src/EmbedGtkTools.cpp
===================================================================
--- mozilla/embedding/browser/gtk/src.orig/EmbedGtkTools.cpp
+++ mozilla/embedding/browser/gtk/src/EmbedGtkTools.cpp
@@ -33,44 +33,46 @@
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "EmbedGtkTools.h"
-#ifndef MOZILLA_INTERNAL_API
 #include "nsServiceManagerUtils.h"
-#endif
 #include "EmbedPrivate.h"
 
 GtkWidget * GetGtkWidgetForDOMWindow(nsIDOMWindow* aDOMWindow)
 {
   nsCOMPtr<nsIWindowWatcher> wwatch = do_GetService("@mozilla.org/embedcomp/window-watcher;1");
-  if (!aDOMWindow)
-    return NULL;
   nsCOMPtr<nsIWebBrowserChrome> chrome;
-  wwatch->GetChromeForWindow(aDOMWindow, getter_AddRefs(chrome));
-  if (!chrome) {
-    return GTK_WIDGET(EmbedCommon::GetAnyLiveWidget());
+  if (wwatch) {
+    if (!aDOMWindow) {
+      nsCOMPtr <nsIDOMWindow> DOMWindow;
+      wwatch->GetActiveWindow(getter_AddRefs(DOMWindow));
+      wwatch->GetChromeForWindow(DOMWindow, getter_AddRefs(chrome));
+    } else
+      wwatch->GetChromeForWindow(aDOMWindow, getter_AddRefs(chrome));
   }
 
+  if (!chrome)
+    return GTK_WIDGET(GetAnyLiveWidget());
+
   nsCOMPtr<nsIEmbeddingSiteWindow> siteWindow = nsnull;
   siteWindow = do_QueryInterface(chrome);
 
-  if (!siteWindow) {
-    return GTK_WIDGET(EmbedCommon::GetAnyLiveWidget());
-  }
+  if (!siteWindow)
+    return GTK_WIDGET(GetAnyLiveWidget());
 
   GtkWidget* parentWidget;
   siteWindow->GetSiteWindow((void**)&parentWidget);
   if (GTK_IS_WIDGET(parentWidget))
     return parentWidget;
-  return NULL;
+  return GTK_WIDGET(GetAnyLiveWidget());
 }
 
 GtkWindow * GetGtkWindowForDOMWindow(nsIDOMWindow* aDOMWindow)
 {
   GtkWidget* parentWidget = GetGtkWidgetForDOMWindow(aDOMWindow);
   if (!parentWidget)
     return NULL;
   GtkWidget* gtkWin = gtk_widget_get_toplevel(parentWidget);
@@ -81,8 +83,29 @@
 
 nsresult GetContentViewer(nsIWebBrowser *webBrowser, nsIContentViewer **aViewer)
 {
   g_return_val_if_fail(webBrowser, NS_ERROR_FAILURE);
   nsCOMPtr<nsIDocShell> docShell(do_GetInterface((nsISupports*)webBrowser));
   NS_ENSURE_TRUE(docShell, NS_ERROR_FAILURE);
   return docShell->GetContentViewer(aViewer);
 }
+
+GtkWidget* GetAnyLiveWidget(void)
+{
+  if (!EmbedPrivate::sWidgetCount || !EmbedPrivate::sWindowList)
+    return nsnull;
+
+  // Get the number of browser windows.
+  PRInt32 count = EmbedPrivate::sWindowList->Count();
+  // This function doesn't get called very often at all (only when
+  // creating a new window) so it's OK to walk the list of open
+  // windows.
+  //FIXME need to choose right window
+  GtkWidget *ret = nsnull;
+  for (int i = 0; i < count; i++) {
+    EmbedPrivate *tmpPrivate = static_cast<EmbedPrivate *>
+      (EmbedPrivate::sWindowList->ElementAt(i));
+    ret = GTK_WIDGET(tmpPrivate->mOwningWidget);
+  }
+  return ret;
+}
+
Index: src/gtkmozembed2.cpp
===================================================================
--- mozilla/embedding/browser/gtk/src.orig/gtkmozembed2.cpp
+++ mozilla/embedding/browser/gtk/src/gtkmozembed2.cpp
@@ -399,16 +399,96 @@
   moz_embed_signals[DOM_FOCUS_OUT] =
     g_signal_new ("dom_focus_out",
                   G_TYPE_FROM_CLASS (klass),
                   G_SIGNAL_RUN_LAST,
                   G_STRUCT_OFFSET(GtkMozEmbedClass, dom_focus_out),
                   NULL, NULL,
                   gtk_marshal_BOOL__POINTER,
                   G_TYPE_BOOLEAN, 1, G_TYPE_POINTER);
+  moz_embed_signals[ALERT] =
+    g_signal_new ("alert",
+                  G_TYPE_FROM_CLASS (klass),
+                  G_SIGNAL_RUN_FIRST,
+                  G_STRUCT_OFFSET(GtkMozEmbedClass, alert),
+                  NULL, NULL,
+                  gtkmozembed_VOID__STRING_STRING_BOOL_STRING_POINTER,
+                  G_TYPE_NONE, 5,
+                  G_TYPE_STRING,
+                  G_TYPE_STRING,
+                  G_TYPE_BOOLEAN,
+                  G_TYPE_STRING,
+                  G_TYPE_POINTER);
+  moz_embed_signals[CONFIRM] =
+    g_signal_new ("confirm",
+                  G_TYPE_FROM_CLASS (klass),
+                  G_SIGNAL_RUN_LAST,
+                  G_STRUCT_OFFSET(GtkMozEmbedClass, confirm),
+                  NULL, NULL,
+                  gtkmozembed_BOOL__STRING_STRING_STRING_POINTER,
+                  G_TYPE_BOOLEAN, 4,
+                  G_TYPE_STRING,
+                  G_TYPE_STRING,
+                  G_TYPE_STRING,
+                  G_TYPE_POINTER);
+  moz_embed_signals[CONFIRM_EX] =
+    g_signal_new ("confirm_ex",
+                  G_TYPE_FROM_CLASS (klass),
+                  G_SIGNAL_RUN_LAST,
+                  G_STRUCT_OFFSET(GtkMozEmbedClass, confirm_ex),
+                  NULL, NULL,
+                  gtkmozembed_INT__STRING_STRING_UINT_STRING_STRING_STRING_STRING_POINTER,
+                  G_TYPE_INT, 8,
+                  G_TYPE_STRING,
+                  G_TYPE_STRING,
+                  G_TYPE_UINT,
+                  G_TYPE_STRING,
+                  G_TYPE_STRING,
+                  G_TYPE_STRING,
+                  G_TYPE_STRING,
+                  G_TYPE_POINTER);
+  moz_embed_signals[PROMPT] =
+    g_signal_new ("prompt",
+                  G_TYPE_FROM_CLASS (klass),
+                  G_SIGNAL_RUN_LAST,
+                  G_STRUCT_OFFSET(GtkMozEmbedClass, prompt),
+                  NULL, NULL,
+                  gtkmozembed_BOOL__STRING_STRING_POINTER_STRING_POINTER,
+                  G_TYPE_BOOLEAN, 5,
+                  G_TYPE_STRING,
+                  G_TYPE_STRING,
+                  G_TYPE_POINTER,
+                  G_TYPE_STRING,
+                  G_TYPE_POINTER);
+  moz_embed_signals[PROMPT_AUTH] =
+    g_signal_new ("prompt_auth",
+                  G_TYPE_FROM_CLASS (klass),
+                  G_SIGNAL_RUN_LAST,
+                  G_STRUCT_OFFSET(GtkMozEmbedClass, prompt_auth),
+                  NULL, NULL,
+                  gtkmozembed_BOOL__STRING_STRING_POINTER_POINTER_STRING_POINTER,
+                  G_TYPE_BOOLEAN, 6,
+                  G_TYPE_STRING,
+                  G_TYPE_STRING,
+                  G_TYPE_POINTER,
+                  G_TYPE_POINTER,
+                  G_TYPE_STRING,
+                  G_TYPE_POINTER);
+  moz_embed_signals[SELECT] =
+    g_signal_new ("select",
+                  G_TYPE_FROM_CLASS (klass),
+                  G_SIGNAL_RUN_LAST,
+                  G_STRUCT_OFFSET(GtkMozEmbedClass, select),
+                  NULL, NULL,
+                  gtkmozembed_BOOL__STRING_STRING_POINTER_INT,
+                  G_TYPE_BOOLEAN, 4,
+                  G_TYPE_STRING,
+                  G_TYPE_STRING,
+                  G_TYPE_POINTER,
+                  G_TYPE_INT);
 }
 
 static void
 gtk_moz_embed_init(GtkMozEmbed *embed)
 {
   EmbedPrivate *priv = new EmbedPrivate();
   embed->data = priv;
   gtk_widget_set_name(GTK_WIDGET(embed), "gtkmozembed");
Index: src/gtkmozembed.h
===================================================================
--- mozilla/embedding/browser/gtk/src.orig/gtkmozembed.h
+++ mozilla/embedding/browser/gtk/src/gtkmozembed.h
@@ -131,16 +131,32 @@
   gint (* dom_mouse_out)       (GtkMozEmbed *embed, gpointer dom_event);
   void (* security_change)     (GtkMozEmbed *embed, gpointer request,
                                 guint state);
   void (* status_change)       (GtkMozEmbed *embed, gpointer request,
                                 gint status, gpointer message);
   gint (* dom_activate)        (GtkMozEmbed *embed, gpointer dom_event);
   gint (* dom_focus_in)        (GtkMozEmbed *embed, gpointer dom_event);
   gint (* dom_focus_out)       (GtkMozEmbed *embed, gpointer dom_event);
+  void (* alert)               (GtkMozEmbed *embed, const char *title, const char *text, gboolean is_blocking,
+                                const char *check_msg, gboolean *check_val);
+  gboolean (* confirm)         (GtkMozEmbed *embed, const char *title, const char *text,
+                                const char *check_msg, gboolean *check_val);
+  gint     (* confirm_ex)      (GtkMozEmbed *embed, const char *title, const char *text, guint bt_flags,
+                                const char *button1, const char *button2, const char *button3,
+                                const char *check_msg, gboolean *check_val);
+/* In prompt[_auth] callbacks please free old values by using g_free(*value|*user|*pass)
+   before allocating new values, it will be freed inside gtkmozembed automatically */
+  gboolean (* prompt)          (GtkMozEmbed *embed, const char *title, const char *text,
+                                char **value, const char *check_msg, gboolean *check_val);
+  gboolean (* prompt_auth)     (GtkMozEmbed *embed, const char *title, const char *text,
+                                char **user, char **pass, const char *check_msg, gboolean *check_val);
+
+  gboolean (* select)          (GtkMozEmbed *embed, const char *title, const char *text,
+                                GList *list, gint *selected_item);
 };
 
 GTKMOZEMBED_API(GType,      gtk_moz_embed_get_type,        (void))
 GTKMOZEMBED_API(GtkWidget*, gtk_moz_embed_new,             (void))
 GTKMOZEMBED_API(void,       gtk_moz_embed_push_startup,    (void))
 GTKMOZEMBED_API(void,       gtk_moz_embed_pop_startup,     (void))
 
 /* Tell gtkmozembed where the gtkmozembed libs live. If this is not specified,
@@ -174,16 +190,39 @@
 GTKMOZEMBED_API(char*,  gtk_moz_embed_get_title,        (GtkMozEmbed *embed))
 GTKMOZEMBED_API(char*,  gtk_moz_embed_get_location,     (GtkMozEmbed *embed))
 GTKMOZEMBED_API(void,   gtk_moz_embed_reload,           (GtkMozEmbed *embed,
                                                          gint32 flags))
 GTKMOZEMBED_API(void,   gtk_moz_embed_set_chrome_mask,  (GtkMozEmbed *embed, 
                                                          guint32 flags))
 GTKMOZEMBED_API(guint32, gtk_moz_embed_get_chrome_mask, (GtkMozEmbed *embed))
 
+/* These are straight out of nsIPromptService.h */
+
+typedef enum
+{
+  GTK_MOZ_EMBED_BUTTON_POS_0 = 1U,
+  GTK_MOZ_EMBED_BUTTON_POS_1 = 256U,
+  GTK_MOZ_EMBED_BUTTON_POS_2 = 65536U,
+  GTK_MOZ_EMBED_BUTTON_TITLE_OK = 1U,
+  GTK_MOZ_EMBED_BUTTON_TITLE_CANCEL = 2U,
+  GTK_MOZ_EMBED_BUTTON_TITLE_YES = 3U,
+  GTK_MOZ_EMBED_BUTTON_TITLE_NO = 4U,
+  GTK_MOZ_EMBED_BUTTON_TITLE_SAVE = 5U,
+  GTK_MOZ_EMBED_BUTTON_TITLE_DONT_SAVE = 6U,
+  GTK_MOZ_EMBED_BUTTON_TITLE_REVERT = 7U,
+  GTK_MOZ_EMBED_BUTTON_TITLE_IS_STRING = 127U,
+  GTK_MOZ_EMBED_BUTTON_POS_0_DEFAULT = 0U,
+  GTK_MOZ_EMBED_BUTTON_POS_1_DEFAULT = 16777216U,
+  GTK_MOZ_EMBED_BUTTON_POS_2_DEFAULT = 33554432U,
+  GTK_MOZ_EMBED_BUTTON_DELAY_ENABLE = 67108864U,
+  GTK_MOZ_EMBED_BUTTON_STD_OK_CANCEL_BUTTONS = 513U,
+  GTK_MOZ_EMBED_BUTTON_STD_YES_NO_BUTTONS = 1027U
+} GtkMozEmbedDialogButtonsFlags;
+
 /* These are straight out of nsIWebProgressListener.h */
 
 typedef enum
 {
   GTK_MOZ_EMBED_FLAG_START = 1,
   GTK_MOZ_EMBED_FLAG_REDIRECTING = 2,
   GTK_MOZ_EMBED_FLAG_TRANSFERRING = 4,
   GTK_MOZ_EMBED_FLAG_NEGOTIATING = 8,
Index: src/gtkmozembedprivate.h
===================================================================
--- mozilla/embedding/browser/gtk/src.orig/gtkmozembedprivate.h
+++ mozilla/embedding/browser/gtk/src/gtkmozembedprivate.h
@@ -71,16 +71,22 @@
   DOM_MOUSE_DBL_CLICK,
   DOM_MOUSE_OVER,
   DOM_MOUSE_OUT,
   SECURITY_CHANGE,
   STATUS_CHANGE,
   DOM_ACTIVATE,
   DOM_FOCUS_IN,
   DOM_FOCUS_OUT,
+  ALERT,
+  CONFIRM,
+  CONFIRM_EX,
+  PROMPT,
+  PROMPT_AUTH,
+  SELECT,
   EMBED_LAST_SIGNAL
 };
 
 extern guint moz_embed_signals[EMBED_LAST_SIGNAL];
 
 extern void gtk_moz_embed_single_create_window(GtkMozEmbed **aNewEmbed,
 					       guint aChromeFlags);
 
Index: src/GtkPromptService.cpp
===================================================================
--- mozilla/embedding/browser/gtk/src.orig/GtkPromptService.cpp
+++ mozilla/embedding/browser/gtk/src/GtkPromptService.cpp
@@ -33,316 +33,281 @@
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "GtkPromptService.h"
-#include "EmbedPrompter.h"
 #include "nsString.h"
 #include "nsIWindowWatcher.h"
 #include "nsIWebBrowserChrome.h"
 #include "nsIEmbeddingSiteWindow.h"
 #include "nsCOMPtr.h"
 #include "nsIServiceManager.h"
+#include "EmbedGtkTools.h"
+#include "gtkmozembedprivate.h"
 
 GtkPromptService::GtkPromptService()
 {
 }
 
 GtkPromptService::~GtkPromptService()
 {
 }
 
-NS_IMPL_ISUPPORTS1(GtkPromptService, nsIPromptService)
+NS_IMPL_ISUPPORTS2(GtkPromptService, nsIPromptService, nsINonBlockingAlertService)
 
 NS_IMETHODIMP
 GtkPromptService::Alert(nsIDOMWindow* aParent, const PRUnichar* aDialogTitle, 
                         const PRUnichar* aDialogText)
 {
-    EmbedPrompter prompter;
-    prompter.SetTitle(aDialogTitle ? aDialogTitle : NS_LITERAL_STRING("Alert").get());
-    prompter.SetMessageText(aDialogText);
-    prompter.Create(EmbedPrompter::TYPE_ALERT, 
-                    GetGtkWindowForDOMWindow(aParent));
-    prompter.Run();
+    GtkWidget* parentWidget = GetGtkWidgetForDOMWindow(aParent);
+
+    g_signal_emit (GTK_OBJECT(parentWidget),
+                   moz_embed_signals[ALERT], 0,
+                   NS_ConvertUTF16toUTF8(aDialogTitle).get(),
+                   NS_ConvertUTF16toUTF8(aDialogText).get(),
+                   TRUE,
+                   nsnull,
+                   nsnull);
+
+    return NS_OK;
+}
+
+NS_IMETHODIMP
+GtkPromptService::ShowNonBlockingAlert(nsIDOMWindow* aParent, const PRUnichar* aDialogTitle,
+                                       const PRUnichar* aDialogText)
+{
+    GtkWidget* parentWidget = GetGtkWidgetForDOMWindow(aParent);
+
+    g_signal_emit (GTK_OBJECT(parentWidget),
+                   moz_embed_signals[ALERT], 0,
+                   NS_ConvertUTF16toUTF8(aDialogTitle).get(),
+                   NS_ConvertUTF16toUTF8(aDialogText).get(),
+                   FALSE,
+                   nsnull,
+                   nsnull);
+
     return NS_OK;
 }
 
 NS_IMETHODIMP
 GtkPromptService::AlertCheck(nsIDOMWindow* aParent,
                              const PRUnichar* aDialogTitle,
                              const PRUnichar* aDialogText,
                              const PRUnichar* aCheckMsg, PRBool* aCheckValue)
 {
     NS_ENSURE_ARG_POINTER(aCheckValue);
 
-    EmbedPrompter prompter;
-    prompter.SetTitle(aDialogTitle ? aDialogTitle : NS_LITERAL_STRING("Alert").get());
-    prompter.SetMessageText(aDialogText);
-    prompter.SetCheckMessage(aCheckMsg);
-    prompter.SetCheckValue(*aCheckValue);
-    prompter.Create(EmbedPrompter::TYPE_ALERT_CHECK,
-                    GetGtkWindowForDOMWindow(aParent));
-    prompter.Run();
-    prompter.GetCheckValue(aCheckValue);
+    GtkWidget* parentWidget = GetGtkWidgetForDOMWindow(aParent);
+
+    g_signal_emit (GTK_OBJECT(parentWidget),
+                   moz_embed_signals[ALERT], 0,
+                   NS_ConvertUTF16toUTF8(aDialogTitle).get(),
+                   NS_ConvertUTF16toUTF8(aDialogText).get(),
+                   FALSE,
+                   NS_ConvertUTF16toUTF8(aCheckMsg).get(),
+                   &aCheckValue);
+
     return NS_OK;
 }
 
 NS_IMETHODIMP
 GtkPromptService::Confirm(nsIDOMWindow* aParent,
                           const PRUnichar* aDialogTitle,
                           const PRUnichar* aDialogText, PRBool* aConfirm)
 {
-    EmbedPrompter prompter;
-    prompter.SetTitle(aDialogTitle ? aDialogTitle : NS_LITERAL_STRING("Confirm").get());
-    prompter.SetMessageText(aDialogText);
-    prompter.Create(EmbedPrompter::TYPE_CONFIRM,
-                    GetGtkWindowForDOMWindow(aParent));
-    prompter.Run();
-    prompter.GetConfirmValue(aConfirm);
+    GtkWidget* parentWidget = GetGtkWidgetForDOMWindow(aParent);
+
+    g_signal_emit (GTK_OBJECT(parentWidget),
+                   moz_embed_signals[CONFIRM], 0,
+                   NS_ConvertUTF16toUTF8(aDialogTitle).get(),
+                   NS_ConvertUTF16toUTF8(aDialogText).get(),
+                   nsnull,
+                   nsnull,
+                   &aConfirm);
+
     return NS_OK;
 }
 
 NS_IMETHODIMP
 GtkPromptService::ConfirmCheck(nsIDOMWindow* aParent,
                                const PRUnichar* aDialogTitle,
                                const PRUnichar* aDialogText,
                                const PRUnichar* aCheckMsg,
                                PRBool* aCheckValue, PRBool* aConfirm)
 {
     NS_ENSURE_ARG_POINTER(aCheckValue);
 
-    EmbedPrompter prompter;
-    prompter.SetTitle(aDialogTitle ? aDialogTitle : NS_LITERAL_STRING("Confirm").get());
-    prompter.SetMessageText(aDialogText);
-    prompter.SetCheckMessage(aCheckMsg);
-    prompter.SetCheckValue(*aCheckValue);
-    prompter.Create(EmbedPrompter::TYPE_CONFIRM_CHECK,
-                    GetGtkWindowForDOMWindow(aParent));
-    prompter.Run();
-    prompter.GetCheckValue(aCheckValue);
-    prompter.GetConfirmValue(aConfirm);
+    GtkWidget* parentWidget = GetGtkWidgetForDOMWindow(aParent);
+
+    gboolean checkValue = *aCheckValue ? TRUE : FALSE;
+    gboolean confirm = *aConfirm ? TRUE : FALSE;
+
+    g_signal_emit (GTK_OBJECT(parentWidget),
+                   moz_embed_signals[CONFIRM], 0,
+                   NS_ConvertUTF16toUTF8(aDialogTitle).get(),
+                   NS_ConvertUTF16toUTF8(aDialogTitle).get(),
+                   NS_ConvertUTF16toUTF8(aCheckMsg).get(),
+                   aCheckValue,
+                   &aConfirm);
+
+    *aCheckValue = checkValue ? PR_TRUE : PR_FALSE;
+    *aConfirm = confirm ? PR_TRUE : PR_FALSE;
     return NS_OK;
 }
 
 NS_IMETHODIMP
 GtkPromptService::ConfirmEx(nsIDOMWindow* aParent,
                             const PRUnichar* aDialogTitle,
                             const PRUnichar* aDialogText,
                             PRUint32 aButtonFlags,
                             const PRUnichar* aButton0Title,
                             const PRUnichar* aButton1Title,
                             const PRUnichar* aButton2Title,
                             const PRUnichar* aCheckMsg, PRBool* aCheckValue,
                             PRInt32* aRetVal)
 {
-    EmbedPrompter prompter;
-    prompter.SetTitle(aDialogTitle ? aDialogTitle : NS_LITERAL_STRING("Confirm").get());
-    prompter.SetMessageText(aDialogText);
-
-    nsAutoString button0Label, button1Label, button2Label;
-    GetButtonLabel(aButtonFlags, BUTTON_POS_0, aButton0Title, button0Label);
-    GetButtonLabel(aButtonFlags, BUTTON_POS_1, aButton1Title, button1Label);
-    GetButtonLabel(aButtonFlags, BUTTON_POS_2, aButton2Title, button2Label);
-    prompter.SetButtons(button0Label.get(), button1Label.get(),
-                        button2Label.get());
-
-    if (aCheckMsg)
-        prompter.SetCheckMessage(aCheckMsg);
-    if (aCheckValue)
-        prompter.SetCheckValue(*aCheckValue);
-
-    prompter.Create(EmbedPrompter::TYPE_UNIVERSAL,
-                    GetGtkWindowForDOMWindow(aParent));
-    prompter.Run();
+    GtkWidget* parentWidget = GetGtkWidgetForDOMWindow(aParent);
 
-    if (aCheckValue)
-        prompter.GetCheckValue(aCheckValue);
-
-    prompter.GetButtonPressed(aRetVal);
+    g_signal_emit (GTK_OBJECT(parentWidget),
+                   moz_embed_signals[CONFIRM_EX], 0,
+                   NS_ConvertUTF16toUTF8(aDialogTitle).get(),
+                   NS_ConvertUTF16toUTF8(aDialogText).get(),
+                   aButtonFlags, /* GtkMozEmbedDialogButtonsFlags */
+                   NS_ConvertUTF16toUTF8(aButton0Title).get(),
+                   NS_ConvertUTF16toUTF8(aButton1Title).get(),
+                   NS_ConvertUTF16toUTF8(aButton2Title).get(),
+                   NS_ConvertUTF16toUTF8(aCheckMsg).get(),
+                   NS_ConvertUTF16toUTF8(aCheckMsg).get(),
+                   &aCheckValue, &aRetVal);
 
     return NS_OK;
 }
 
 NS_IMETHODIMP
 GtkPromptService::Prompt(nsIDOMWindow* aParent, const PRUnichar* aDialogTitle,
                          const PRUnichar* aDialogText, PRUnichar** aValue,
                          const PRUnichar* aCheckMsg, PRBool* aCheckValue,
                          PRBool* aConfirm)
 {
-    EmbedPrompter prompter;
-    prompter.SetTitle(aDialogTitle ? aDialogTitle : NS_LITERAL_STRING("Prompt").get());
-    prompter.SetMessageText(aDialogText);
-    prompter.SetTextValue(*aValue);
-    if (aCheckMsg)
-        prompter.SetCheckMessage(aCheckMsg);
-    if (aCheckValue)
-        prompter.SetCheckValue(*aCheckValue);
-
-    prompter.Create(EmbedPrompter::TYPE_PROMPT,
-                    GetGtkWindowForDOMWindow(aParent));
-    prompter.Run();
-    if (aCheckValue)
-        prompter.GetCheckValue(aCheckValue);
-    prompter.GetConfirmValue(aConfirm);
+    GtkWidget* parentWidget = GetGtkWidgetForDOMWindow(aParent);
+
+    gchar * aGValue = ToNewCString(NS_ConvertUTF16toUTF8(*aValue));
+
+    g_signal_emit (GTK_OBJECT(parentWidget),
+                   moz_embed_signals[PROMPT], 0,
+                   NS_ConvertUTF16toUTF8(aDialogTitle).get(),
+                   NS_ConvertUTF16toUTF8(aDialogText).get(),
+                   &aGValue,
+                   NS_ConvertUTF16toUTF8(aCheckMsg).get(),
+                   aCheckValue, aConfirm);
+
     if (*aConfirm) {
-        if (*aValue)
-            nsMemory::Free(*aValue);
-        prompter.GetTextValue(aValue);
+      if (*aValue)
+        NS_Free(*aValue);
+      *aValue = ToNewUnicode(NS_ConvertUTF8toUTF16(aGValue));
     }
+    g_free(aGValue);
     return NS_OK;
 }
 
 NS_IMETHODIMP
 GtkPromptService::PromptUsernameAndPassword(nsIDOMWindow* aParent,
                                             const PRUnichar* aDialogTitle,
                                             const PRUnichar* aDialogText,
                                             PRUnichar** aUsername,
                                             PRUnichar** aPassword,
                                             const PRUnichar* aCheckMsg,
                                             PRBool* aCheckValue,
                                             PRBool* aConfirm)
 {
-    EmbedPrompter prompter;
-    prompter.SetTitle(aDialogTitle ? aDialogTitle : NS_LITERAL_STRING("Prompt").get());
-    prompter.SetMessageText(aDialogText);
-    prompter.SetUser(*aUsername);
-    prompter.SetPassword(*aPassword);
-    if (aCheckMsg)
-        prompter.SetCheckMessage(aCheckMsg);
-    if (aCheckValue)
-        prompter.SetCheckValue(*aCheckValue);
-
-    prompter.Create(EmbedPrompter::TYPE_PROMPT_USER_PASS,
-                    GetGtkWindowForDOMWindow(aParent));
-    prompter.Run();
-    if (aCheckValue)
-        prompter.GetCheckValue(aCheckValue);
-    prompter.GetConfirmValue(aConfirm);
+    GtkWidget* parentWidget = GetGtkWidgetForDOMWindow(aParent);
+
+    gchar * aGUsername = ToNewCString(NS_ConvertUTF16toUTF8(*aUsername));
+    gchar * aGPassword = ToNewCString(NS_ConvertUTF16toUTF8(*aPassword));
+
+    g_signal_emit (GTK_OBJECT(parentWidget),
+                   moz_embed_signals[PROMPT_AUTH], 0,
+                   NS_ConvertUTF16toUTF8(aDialogTitle).get(),
+                   NS_ConvertUTF16toUTF8(aDialogText).get(),
+                   &aGUsername,
+                   &aGPassword,
+                   NS_ConvertUTF16toUTF8(aCheckMsg).get(),
+                   aCheckValue, aConfirm);
+
     if (*aConfirm) {
-        if (*aUsername)
-            nsMemory::Free(*aUsername);
-        prompter.GetUser(aUsername);
-
-        if (*aPassword)
-            nsMemory::Free(*aPassword);
-        prompter.GetPassword(aPassword);
+      if (*aUsername)
+        NS_Free(*aUsername);
+      *aUsername = ToNewUnicode(NS_ConvertUTF8toUTF16(aGUsername));
+
+      if (*aPassword)
+        NS_Free(*aPassword);
+      *aPassword = ToNewUnicode(NS_ConvertUTF8toUTF16(aGPassword));
     }
+    g_free(aGUsername);
+    g_free(aGPassword);
     return NS_OK;
 }
 
 NS_IMETHODIMP
 GtkPromptService::PromptPassword(nsIDOMWindow* aParent,
                                  const PRUnichar* aDialogTitle,
                                  const PRUnichar* aDialogText,
                                  PRUnichar** aPassword,
                                  const PRUnichar* aCheckMsg,
                                  PRBool* aCheckValue, PRBool* aConfirm)
 {
-    EmbedPrompter prompter;
-    prompter.SetTitle(aDialogTitle ? aDialogTitle : NS_LITERAL_STRING("Prompt").get());
-    prompter.SetMessageText(aDialogText);
-    prompter.SetPassword(*aPassword);
-    if (aCheckMsg)
-        prompter.SetCheckMessage(aCheckMsg);
-    if (aCheckValue)
-        prompter.SetCheckValue(*aCheckValue);
-
-    prompter.Create(EmbedPrompter::TYPE_PROMPT_PASS,
-                    GetGtkWindowForDOMWindow(aParent));
-    prompter.Run();
-    if (aCheckValue)
-        prompter.GetCheckValue(aCheckValue);
-    prompter.GetConfirmValue(aConfirm);
+    GtkWidget* parentWidget = GetGtkWidgetForDOMWindow(aParent);
+
+    gchar * aGPassword = ToNewCString(NS_ConvertUTF16toUTF8(*aPassword));
+
+    g_signal_emit (GTK_OBJECT(parentWidget),
+                   moz_embed_signals[PROMPT_AUTH], 0,
+                   NS_ConvertUTF16toUTF8(aDialogTitle).get(),
+                   NS_ConvertUTF16toUTF8(aDialogText).get(),
+                   NULL,
+                   &aGPassword,
+                   NS_ConvertUTF16toUTF8(aCheckMsg).get(),
+                   aCheckValue, aConfirm);
+
     if (*aConfirm) {
-        if (*aPassword)
-            nsMemory::Free(*aPassword);
-        prompter.GetPassword(aPassword);
+      if (*aPassword)
+        NS_Free(*aPassword);
+      *aPassword = ToNewUnicode(NS_ConvertUTF8toUTF16(aGPassword));
     }
+    g_free(aGPassword);
     return NS_OK;
 }
 
 NS_IMETHODIMP
 GtkPromptService::Select(nsIDOMWindow* aParent, const PRUnichar* aDialogTitle,
                          const PRUnichar* aDialogText, PRUint32 aCount,
                          const PRUnichar** aSelectList, PRInt32* outSelection,
                          PRBool* aConfirm)
 {
-    EmbedPrompter prompter;
-    prompter.SetTitle(aDialogTitle ? aDialogTitle : NS_LITERAL_STRING("Select").get());
-    prompter.SetMessageText(aDialogText);
-    prompter.SetItems(aSelectList, aCount);
-    prompter.Create(EmbedPrompter::TYPE_SELECT,
-                    GetGtkWindowForDOMWindow(aParent));
-    prompter.Run();
-    prompter.GetSelectedItem(outSelection);
-    prompter.GetConfirmValue(aConfirm);
-    return NS_OK;
-}
-
-GtkWindow*
-GtkPromptService::GetGtkWindowForDOMWindow(nsIDOMWindow* aDOMWindow)
-{
-    nsCOMPtr<nsIWindowWatcher> wwatch = do_GetService("@mozilla.org/embedcomp/window-watcher;1");
+    GtkWidget* parentWidget = GetGtkWidgetForDOMWindow(aParent);
+    GList * list = NULL;
 
-    if (!aDOMWindow)
-        return NULL;
+    nsCString *itemList = new nsCString[aCount];
+    NS_ENSURE_TRUE(itemList, NS_ERROR_OUT_OF_MEMORY);
 
-    nsCOMPtr<nsIWebBrowserChrome> chrome;
-    wwatch->GetChromeForWindow(aDOMWindow, getter_AddRefs(chrome));
-    nsCOMPtr<nsIEmbeddingSiteWindow> siteWindow = do_QueryInterface(chrome);
-
-    if (!siteWindow)
-        return NULL;
-
-    GtkWidget* parentWidget;
-    siteWindow->GetSiteWindow((void**)&parentWidget);
-
-    if (!parentWidget)
-        return NULL;
-
-    GtkWidget* gtkWin = gtk_widget_get_toplevel(parentWidget);
-    if (GTK_WIDGET_TOPLEVEL(gtkWin))
-        return GTK_WINDOW(gtkWin);
-
-    return NULL;
-}
-
-void
-GtkPromptService::GetButtonLabel(PRUint32 aFlags, PRUint32 aPos,
-                                 const PRUnichar* aStringValue,
-                                 nsAString& aLabel)
-{
-    PRUint32 posFlag = (aFlags & (255 * aPos)) / aPos;
-    switch (posFlag) {
-    case 0:
-        break;
-    case BUTTON_TITLE_OK:
-        aLabel.AssignLiteral(GTK_STOCK_OK);
-        break;
-    case BUTTON_TITLE_CANCEL:
-        aLabel.AssignLiteral(GTK_STOCK_CANCEL);
-        break;
-    case BUTTON_TITLE_YES:
-        aLabel.AssignLiteral(GTK_STOCK_YES);
-        break;
-    case BUTTON_TITLE_NO:
-        aLabel.AssignLiteral(GTK_STOCK_NO);
-        break;
-    case BUTTON_TITLE_SAVE:
-        aLabel.AssignLiteral(GTK_STOCK_SAVE);
-        break;
-    case BUTTON_TITLE_DONT_SAVE:
-        aLabel.AssignLiteral("Don't Save");
-        break;
-    case BUTTON_TITLE_REVERT:
-        aLabel.AssignLiteral("Revert");
-        break;
-    case BUTTON_TITLE_IS_STRING:
-        aLabel = aStringValue;
-        break;
-    default:
-        NS_WARNING("Unexpected button flags");
+    for (PRUint32 i = 0; i < aCount; ++i) {
+        itemList[i] = ToNewCString(NS_ConvertUTF16toUTF8(aSelectList[i]));
+        list = g_list_append(list, (gpointer)itemList[i].get());
     }
+
+    guint outselection = *outSelection;
+
+    g_signal_emit (GTK_OBJECT(parentWidget),
+                   moz_embed_signals[SELECT], 0,
+                   NS_ConvertUTF16toUTF8(aDialogTitle).get(),
+                   NS_ConvertUTF16toUTF8(aDialogText).get(),
+                   (const GList*)list, &outselection, &aConfirm);
+
+    *outSelection = outselection;
+
+    delete[] itemList;
+    g_list_free(list);
+    return NS_OK;
 }
Index: src/GtkPromptService.h
===================================================================
--- mozilla/embedding/browser/gtk/src.orig/GtkPromptService.h
+++ mozilla/embedding/browser/gtk/src/GtkPromptService.h
@@ -33,27 +33,25 @@
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "nsIPromptService.h"
+#include "nsINonBlockingAlertService.h"
 #include "nsString.h"
 #include <gtk/gtk.h>
 
 class nsIDOMWindow;
 
 class GtkPromptService : public nsIPromptService
+                       , public nsINonBlockingAlertService
 {
 public:
     GtkPromptService();
     virtual ~GtkPromptService();
 
     NS_DECL_ISUPPORTS
     NS_DECL_NSIPROMPTSERVICE
-
-private:
-    GtkWindow* GetGtkWindowForDOMWindow(nsIDOMWindow* aDOMWindow);
-    void GetButtonLabel(PRUint32 aFlags, PRUint32 aPos,
-                        const PRUnichar* aStringValue, nsAString &aLabel);
+    NS_DECL_NSINONBLOCKINGALERTSERVICE
 };
Index: src/gtkmozembedmarshal.list
===================================================================
--- mozilla/embedding/browser/gtk/src.orig/gtkmozembedmarshal.list
+++ mozilla/embedding/browser/gtk/src/gtkmozembedmarshal.list
@@ -15,17 +15,17 @@
 VOID:INT,STRING
 VOID:INT,STRING,STRING
 VOID:INT,UINT
 VOID:POINTER,INT,POINTER
 VOID:POINTER,INT,STRING,STRING,STRING,STRING,STRING,BOOLEAN,INT
 VOID:POINTER,STRING,BOOL,BOOL
 VOID:STRING,INT,INT
 VOID:STRING,INT,UINT
-VOID:STRING,STRING
+VOID:STRING,STRING,BOOL,STRING,POINTER
 VOID:STRING,STRING,POINTER
 VOID:STRING,STRING,STRING,ULONG,INT
 VOID:STRING,STRING,STRING,POINTER
 VOID:UINT,INT,INT,STRING,STRING,STRING,STRING
 VOID:ULONG,ULONG,ULONG
 BOOL:POINTER,UINT
 VOID:POINTER
 BOOL:STRING,STRING,POINTER
Index: src/Makefile.in
===================================================================
--- mozilla/embedding/browser/gtk/src.orig/Makefile.in
+++ mozilla/embedding/browser/gtk/src/Makefile.in
@@ -80,17 +80,17 @@
 		EmbedEventListener.cpp \
 		EmbedWindowCreator.cpp \
 		$(NULL)
 
 ifdef MOZ_ENABLE_GTK2
 CSRCS           = \
 		gtkmozembedmarshal.c
 CPPSRCS         += \
-		EmbedPrompter.cpp \
+		EmbedGtkTools.cpp \
 		GtkPromptService.cpp
 endif
 
 LOCAL_INCLUDES += \
 		  -I. \
 		  $(NULL)
 
 include $(topsrcdir)/config/config.mk
Index: src/EmbedGtkTools.h
===================================================================
--- mozilla/embedding/browser/gtk/src.orig/EmbedGtkTools.h
+++ mozilla/embedding/browser/gtk/src/EmbedGtkTools.h
@@ -59,9 +59,11 @@
 GetGtkWidgetForDOMWindow(nsIDOMWindow* aDOMWindow);
 
 GtkWindow*
 GetGtkWindowForDOMWindow(nsIDOMWindow* aDOMWindow);
 
 nsresult
 GetContentViewer(nsIWebBrowser *webBrowser, nsIContentViewer **aViewer);
 
+GtkWidget* GetAnyLiveWidget(void);
+
 #endif /* __EmbedTools_h */

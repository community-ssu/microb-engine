Index: src/EmbedPrivate.cpp
===================================================================
RCS file: /cvsroot/mozilla/embedding/browser/gtk/src/EmbedPrivate.cpp,v
retrieving revision 1.93
diff -p -u -5 -r1.93 EmbedPrivate.cpp
--- mozilla/embedding/browser/gtk/src/EmbedPrivate.cpp	30 Jan 2008 04:28:26 -0000	1.93
+++ mozilla/embedding/browser/gtk/src/EmbedPrivate.cpp	17 Jun 2008 08:06:06 -0000
@@ -486,10 +487,11 @@ EmbedPrivate::ApplyChromeMask()
 
 void
 EmbedPrivate::SetChromeMask(PRUint32 aChromeMask)
 {
    mChromeMask = aChromeMask;
+   mIsChrome = (mChromeMask & nsIWebBrowserChrome::CHROME_OPENAS_CHROME);
 
    ApplyChromeMask();
 }
 
 
Index: src/EmbedWindow.cpp
===================================================================
RCS file: /cvsroot/mozilla/embedding/browser/gtk/src/EmbedWindow.cpp,v
retrieving revision 1.44
diff -p -u -5 -r1.44 EmbedWindow.cpp
--- mozilla/embedding/browser/gtk/src/EmbedWindow.cpp	30 Jan 2008 04:28:26 -0000	1.44
+++ mozilla/embedding/browser/gtk/src/EmbedWindow.cpp	17 Jun 2008 10:22:31 -0000
@@ -40,10 +40,11 @@
 
 #include "nsCWebBrowser.h"
 #include "nsIComponentManager.h"
 #include "nsIDocShellTreeItem.h"
 #include "nsIWidget.h"
+#include "nsThreadUtils.h"
 
 #include "EmbedWindow.h"
 #include "EmbedPrivate.h"
 #include "EmbedPrompter.h"
 
@@ -73,11 +74,12 @@ EmbedWindow::Init(EmbedPrivate *aOwner)
     return NS_ERROR_FAILURE;
 
   mWebBrowser->SetContainerWindow(static_cast<nsIWebBrowserChrome *>(this));
   
   nsCOMPtr<nsIDocShellTreeItem> item = do_QueryInterface(mWebBrowser);
-  item->SetItemType(nsIDocShellTreeItem::typeContentWrapper);
+  item->SetItemType(mOwner->mIsChrome ? nsIDocShellTreeItem::typeChromeWrapper
+                                      : nsIDocShellTreeItem::typeContentWrapper);
 
   return NS_OK;
 }
 
 nsresult
@@ -201,18 +203,30 @@ EmbedWindow::SizeBrowserTo(PRInt32 aCX, 
   g_signal_emit(G_OBJECT(mOwner->mOwningWidget),
                 moz_embed_signals[SIZE_TO], 0, aCX, aCY);
   return NS_OK;
 }
 
+static gboolean
+ProcessEvents(void *data)
+{
+    return TRUE;
+}
+
 NS_IMETHODIMP
 EmbedWindow::ShowAsModal(void)
 {
   mIsModal = PR_TRUE;
   GtkWidget *toplevel;
   toplevel = gtk_widget_get_toplevel(GTK_WIDGET(mOwner->mOwningWidget));
   gtk_grab_add(toplevel);
-  gtk_main();
+  nsIThread *thread = NS_GetCurrentThread();
+  gulong nativeSource = g_timeout_add(100, ProcessEvents, NULL);
+  while (mIsModal) {
+    if (!NS_ProcessNextEvent(thread))
+      break;
+  }
+  g_source_remove(nativeSource);
   return NS_OK;
 }
 
 NS_IMETHODIMP
 EmbedWindow::IsWindowModal(PRBool *_retval)
@@ -227,11 +241,10 @@ EmbedWindow::ExitModalEventLoop(nsresult
   if (mIsModal) {
     GtkWidget *toplevel;
     toplevel = gtk_widget_get_toplevel(GTK_WIDGET(mOwner->mOwningWidget));
     gtk_grab_remove(toplevel);
     mIsModal = PR_FALSE;
-    gtk_main_quit();
   }
   return NS_OK;
 }
 
 // nsIWebBrowserChromeFocus

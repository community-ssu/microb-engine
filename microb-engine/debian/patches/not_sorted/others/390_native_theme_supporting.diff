# Support native gtk widgets: 
# - scaling widgets
# - drawing according native theme
# - fixed some stuff related to forms.css
# contact: Anton Rogaynis ext-anton(.)rogaynis(@)nokia.com
Index: mozilla/widget/src/gtk2/nsNativeThemeGTK.cpp
===================================================================
--- mozilla.orig/widget/src/gtk2/nsNativeThemeGTK.cpp
+++ mozilla/widget/src/gtk2/nsNativeThemeGTK.cpp
Index: mozilla/widget/src/gtk2/gtk2drawing.c
===================================================================
--- mozilla.orig/widget/src/gtk2/gtk2drawing.c
+++ mozilla/widget/src/gtk2/gtk2drawing.c
@@ -438,18 +438,18 @@
         } else {
             x -= focus_width + focus_pad;
             y -= focus_width + focus_pad;
             width += 2 * (focus_width + focus_pad);
             height += 2 * (focus_width + focus_pad);
         }
 
         TSOffsetStyleGCs(style, x, y);
-        gtk_paint_focus(style, drawable, button_state, cliprect,
-                        widget, "button", x, y, width, height);
+        // gtk_paint_focus(style, drawable, button_state, cliprect,
+        //                widget, "button", x, y, width, height);
     }
 
     GTK_WIDGET_UNSET_FLAGS(widget, GTK_HAS_DEFAULT);
     return MOZ_GTK_SUCCESS;
 }
 
 gint
 moz_gtk_init()
@@ -758,16 +762,17 @@
                               GdkDrawable* drawable, GdkRectangle* rect,
                               GdkRectangle* cliprect, GtkWidgetState* state)
 {
     GtkStateType state_type = (state->inHover || state->active) ?
         GTK_STATE_PRELIGHT : GTK_STATE_NORMAL;
     GtkStyle* style;
     GtkScrollbar *scrollbar;
     GtkAdjustment *adj;
+    GtkShadowType shadow_type = GTK_SHADOW_OUT;
 
     ensure_scrollbar_widget();
 
     if (widget == MOZ_GTK_SCROLLBAR_THUMB_HORIZONTAL)
         scrollbar = GTK_SCROLLBAR(gHorizScrollbarWidget);
     else
         scrollbar = GTK_SCROLLBAR(gVertScrollbarWidget);
 
@@ -799,17 +804,22 @@
     adj->value = state->curpos;
     adj->upper = state->maxpos;
     gtk_adjustment_changed(adj);
 
     style = GTK_WIDGET(scrollbar)->style;
 
     TSOffsetStyleGCs(style, rect->x, rect->y);
 
-    gtk_paint_slider(style, drawable, state_type, GTK_SHADOW_OUT, cliprect,
+    if (state->active) {
+      state_type = GTK_STATE_ACTIVE;
+      shadow_type = GTK_SHADOW_IN;
+    }
+
+    gtk_paint_slider(style, drawable, state_type, shadow_type, cliprect,
                      GTK_WIDGET(scrollbar), "slider", rect->x, rect->y,
                      rect->width,  rect->height,
                      (widget == MOZ_GTK_SCROLLBAR_THUMB_HORIZONTAL) ?
                      GTK_ORIENTATION_HORIZONTAL : GTK_ORIENTATION_VERTICAL);
 
     return MOZ_GTK_SUCCESS;
 }
 
@@ -998,19 +1008,19 @@
 
     TSOffsetStyleGCs(style, x, y);
     gtk_paint_shadow(style, drawable, GTK_STATE_NORMAL, GTK_SHADOW_IN,
                      cliprect, gEntryWidget, "entry", x, y, width, height);
 
     if (state->focused && !state->disabled) {
         if (!interior_focus) {
             TSOffsetStyleGCs(style, rect->x, rect->y);
-            gtk_paint_focus(style, drawable,  GTK_STATE_NORMAL, cliprect,
-                            gEntryWidget, "entry",
-                            rect->x, rect->y, rect->width, rect->height);
+            // gtk_paint_focus(style, drawable,  GTK_STATE_NORMAL, cliprect,
+            //                 gEntryWidget, "entry",
+            //                 rect->x, rect->y, rect->width, rect->height);
         }
 
         /* Now unset the focus flag. We don't want other entries to look like they're focused too! */
         GTK_WIDGET_UNSET_FLAGS(gEntryWidget, GTK_HAS_FOCUS);
     }
 
     return MOZ_GTK_SUCCESS;
 }
@@ -1150,25 +1160,25 @@
     /* this is for drawing a prelight box */
     if (state_type == GTK_STATE_PRELIGHT || state_type == GTK_STATE_ACTIVE) {
         gtk_paint_flat_box(style, drawable, GTK_STATE_PRELIGHT, GTK_SHADOW_ETCHED_OUT,
                            cliprect, gCheckboxWidget,
                            "checkbutton",
                            rect->x, rect->y, rect->width, rect->height);
     }
 
-    if (state_type != GTK_STATE_NORMAL && state_type != GTK_STATE_PRELIGHT)
+    /*if (state_type != GTK_STATE_NORMAL && state_type != GTK_STATE_PRELIGHT)
         state_type = GTK_STATE_NORMAL;
 
     if (state->focused && !interior_focus) {
         gtk_paint_focus(style, drawable, state_type, cliprect, gCheckboxWidget,
                         "checkbutton",
                         rect->x, rect->y, rect->width, rect->height);
     }
-
+    */
     return MOZ_GTK_SUCCESS;
 }
 
 static gint
 moz_gtk_toggle_label_paint(GdkDrawable* drawable, GdkRectangle* rect,
                            GdkRectangle* cliprect, GtkWidgetState* state, 
                            gboolean isradio)
 {
Index: mozilla/widget/src/gtk2/nsLookAndFeel.cpp
===================================================================
--- mozilla.orig/widget/src/gtk2/nsLookAndFeel.cpp
+++ mozilla/widget/src/gtk2/nsLookAndFeel.cpp
@@ -51,17 +51,17 @@
 nscolor   nsLookAndFeel::sMenuText = 0;
 nscolor   nsLookAndFeel::sMenuHover = 0;
 nscolor   nsLookAndFeel::sMenuHoverText = 0;
 nscolor   nsLookAndFeel::sMenuBackground = 0;
 nscolor   nsLookAndFeel::sButtonBackground = 0;
 nscolor   nsLookAndFeel::sTextDisabled = 0;
 nscolor   nsLookAndFeel::sButtonText = 0;
 nscolor   nsLookAndFeel::sButtonOuterLightBorder = 0;
-nscolor   nsLookAndFeel::sButtonInnerDarkBorder = 0;
+nscolor   nsLookAndFeel::sButtonInnerDarkBorder = NS_RGB(0xb3,0xb3,0xb3); // forms.css
 PRUnichar nsLookAndFeel::sInvisibleCharacter = PRUnichar('*');
 
 //-------------------------------------------------------------------------
 //
 // Query interface implementation
 //
 //-------------------------------------------------------------------------
 nsLookAndFeel::nsLookAndFeel() : nsXPLookAndFeel()
Index: mozilla/layout/style/forms.css
===================================================================
--- mozilla.orig/layout/style/forms.css
+++ mozilla/layout/style/forms.css
@@ -298,17 +298,17 @@
 
 input[disabled],
 textarea[disabled],
 option[disabled],
 optgroup[disabled],
 select[disabled] {
   -moz-user-input: disabled;
   -moz-user-focus: ignore;
-  color: GrayText;
+  color: GrayText !important;
   background-color: ThreeDFace;
   cursor: inherit;
 }
 
 option[disabled],
 optgroup[disabled] {
   background-color: transparent;
 }

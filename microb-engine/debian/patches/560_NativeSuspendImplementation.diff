# Implementation of SuspendNative Event like in mac
--- mozilla/widget/src/gtk2/nsAppShell.cpp.orig	2007-05-13 21:12:26.000000000 +0300
+++ mozilla/widget/src/gtk2/nsAppShell.cpp	2007-05-16 19:57:18.239886500 +0300
@@ -68,24 +68,42 @@ nsAppShell::EventProcessorCallback(GIOCh
 
 /* XXX mRunWasCalled should be protected not private! */
 #ifdef NSBASEAPPSHELL_PROTECTED_RUNWASCALLED
     if (self->mExiting)
         return FALSE;
 #else
     if (!self->mTag)
         return FALSE;
 #endif
 
-    self->NativeEventCallback();
+    if (self->mSuspendNativeCount <= 0) {
+      self->NativeEventCallback();
+    }
+    else {
+      self->mSkippedNativeCallback = PR_TRUE;
+    }
     return TRUE;
 }
 
+NS_IMETHODIMP
+nsAppShell::ResumeNative(void)
+{
+  nsresult retval = nsBaseAppShell::ResumeNative();
+  if (NS_SUCCEEDED(retval) && (mSuspendNativeCount == 0) &&
+      mSkippedNativeCallback)
+  {
+    mSkippedNativeCallback = PR_FALSE;
+    ScheduleNativeEventCallback();
+  }
+  return retval;
+}
+
 nsAppShell::~nsAppShell()
 {
     if (mTag) {
         g_source_remove(mTag);
         mTag = 0;
     }
     if (mPipeFDs[0]) {
         close(mPipeFDs[0]);
         mPipeFDs[0] = 0;
     }
--- mozilla/widget/src/gtk2/nsAppShell.h.orig	2006-05-10 20:30:05.000000000 +0300
+++ mozilla/widget/src/gtk2/nsAppShell.h	2007-05-16 19:53:37.082065000 +0300
@@ -38,31 +38,34 @@
 
 #ifndef nsAppShell_h__
 #define nsAppShell_h__
 
 #include <glib.h>
 #include "nsBaseAppShell.h"
 #include "nsCOMPtr.h"
 
 class nsAppShell : public nsBaseAppShell {
 public:
-    nsAppShell() : mTag(0) {
+    NS_IMETHODIMP ResumeNative(void);
+
+    nsAppShell() : mTag(0), mSkippedNativeCallback(PR_FALSE) {
         mPipeFDs[0] = mPipeFDs[1] = 0;
     }
 
     // nsBaseAppShell overrides:
     nsresult Init();
     virtual void ScheduleNativeEventCallback();
     virtual PRBool ProcessNextNativeEvent(PRBool mayWait);
 
 private:
     virtual ~nsAppShell();
 
     static gboolean EventProcessorCallback(GIOChannel *source,
                                            GIOCondition condition,
                                            gpointer data);
 
     int mPipeFDs[2];
     PRUintn mTag;
+    PRPackedBool       mSkippedNativeCallback;
 };
 
 #endif /* nsAppShell_h__ */

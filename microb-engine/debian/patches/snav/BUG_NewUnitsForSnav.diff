Index: mozilla/extensions/spatialnavigation/src/nsSpatialNavigation.cpp
===================================================================
--- mozilla.orig/extensions/spatialnavigation/src/nsSpatialNavigation.cpp
+++ mozilla/extensions/spatialnavigation/src/nsSpatialNavigation.cpp
@@ -537,29 +537,33 @@
     
     // deflate the rect to avoid overlapping with other
     // rects.
     frameRect.Deflate(gRectFudge, gRectFudge);
 
     if (!isRectInDirection(aDirection, aFocusedRect, frameRect))
       continue;
     
+    nsCOMPtr<nsIContent> content = frame->GetContent();
+    if (!content)
+      continue;
+
     d = spatialDistance(aDirection, aFocusedRect, frameRect);
     
     if ((*aDSoFar) >= d) 
     {
 #ifdef DEBUG_dougt
       if (d == 0)
       {
         printf("there is overlapping content;\n");
       }
 #endif
       (*aDSoFar) = d;
       NS_IF_RELEASE(*aCurrentContent);
-      NS_ADDREF(*aCurrentContent = frame->GetContent());
+      NS_ADDREF(*aCurrentContent = content);
     }
   }
   while(1);
 }
 
 inline void centerRect(int aDirection, nsRect& aRect)
 {
   if (aDirection == eNavLeft)
Index: mozilla/extensions/spatialnavigation/src/nsSpatialNavigationUtils.cpp
===================================================================
--- mozilla.orig/extensions/spatialnavigation/src/nsSpatialNavigationUtils.cpp
+++ mozilla/extensions/spatialnavigation/src/nsSpatialNavigationUtils.cpp
@@ -30,16 +30,18 @@
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "nsSpatialNavigationPrivate.h"
+#include "nsIDOMNSElement.h"
+#include "nsIDOMTextRectangle.h"
 
 #ifdef DEBUG_outputframes
 #include "nsIFrameDebug.h"
 #endif
 
 static PRBool is_space(char c)
 {
   return (c == ' '  || c == '\f' || c == '\n' ||
@@ -417,44 +419,29 @@
   if (textareaElement && NS_SUCCEEDED(textareaElement->GetDisabled(&disabled)) && NS_SUCCEEDED(textareaElement->GetType(textareaType)))
     return !disabled && (! textareaType.LowerCaseEqualsLiteral("hidden"));
 
   return PR_FALSE;
 }
 
 nsRect makeRectRelativeToGlobalView(nsIFrame *aFrame)
 {
-  nsRect result;
-  result.SetRect(0,0,0,0);
-
-  nsPoint offset;
-
-  if (!aFrame)
-    return result;
-
-  result = aFrame->GetRect();
-
-  nsIView* view;
-  aFrame->GetOffsetFromView(offset, &view);
-  
-  nsIView* rootView = nsnull;
-  if (view) {
-    nsIViewManager* viewManager = view->GetViewManager();
-    NS_ASSERTION(viewManager, "View must have a viewmanager");
-    viewManager->GetRootView(rootView);
-  }
-  while (view) {
-    offset  += view->GetPosition();
-    if (view == rootView) {
-      break;
-    }
-    view = view->GetParent();
-  }
+  nsRect result(0,0,0,0);
+  NS_ENSURE_TRUE(aFrame, result);
   
-  result.MoveTo(offset);
+  nsCOMPtr<nsIDOMNSElement> nsElem = do_QueryInterface(aFrame->GetContent());
+  NS_ENSURE_TRUE(nsElem, result);
+  nsCOMPtr<nsIDOMTextRectangle> domrect;
+  nsElem->GetBoundingClientRect(getter_AddRefs(domrect));
+  float pleft,pright,ptop,pbottom;
+  domrect->GetLeft(&pleft);
+  domrect->GetRight(&pright);
+  domrect->GetTop(&ptop);
+  domrect->GetBottom(&pbottom);
+  result = nsRect(pleft, ptop, pright - pleft, pbottom - ptop);
   return result;
 }
 
 
 void poly2Rect(int sides, nscoord* coord, nsRect* rect)
 {
   nscoord x1, x2, y1, y2, xtmp, ytmp;
   x1 = x2 = coord[0];

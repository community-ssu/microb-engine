--- /home/petejc/src/microb_latest/microb-engine/scratch_build_orig/build-tree/mozilla/extensions/spatialnavigation/src/nsSpatialNavigation.cpp	2008-03-31 13:47:00.000000000 -0600
+++ mozilla/extensions/spatialnavigation/src/nsSpatialNavigation.cpp	2008-03-31 13:21:16.000000000 -0600
@@ -65,6 +65,11 @@
   mNavigationFramesState = PR_FALSE;
   mKeyPressedState = 0;
   mKeyWasDown = PR_FALSE;
+  mSelectPopup = PR_FALSE;
+  mSelectPopupCount = 0;
+  mSelectMultiCount = 0;
+  mSelectControlSelected = PR_FALSE;
+  mSelectNavCount = 0;
 }
 
 // #ifdef DEBUG_romaxa
@@ -153,45 +158,61 @@
 {
   mKeyWasDown = PR_TRUE;
   mKeyPressedCount = 0;
-  if (!mService->mEnabled)
-    return NS_OK;
 
-/*if (!mKeyPressedState) {
+  if (!mService->mEnabled) return NS_OK;
+
+/****************
+  // if (!mKeyPressedState) 
+  {
     aEvent->StopPropagation();
     aEvent->PreventDefault();
-  }*/
+  }
+****************/
+
   return HandleKey(aEvent, PR_FALSE);
+
+  return NS_OK;
 }
 
 NS_IMETHODIMP
 nsSpatialNavigation::KeyPress(nsIDOMEvent* aEvent)
 {
-  if (!mService->mEnabled)
-    return NS_OK;
+  if (!mService->mEnabled) return NS_OK;
+
   mKeyPressedCount++;
+
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsSpatialNavigation::KeyUp(nsIDOMEvent* aEvent)
 {
-  if (!mService->mEnabled) {
+  if (mSelectPopupCount == 1)
+  {
+    mSelectPopupCount = 0;;
+    return NS_OK;
+  }
+
+  if (!mService->mEnabled) 
+  {
     mKeyWasDown = PR_FALSE;
     return NS_OK;
   }
 
-  if (mKeyPressedCount > 1) {
-    if (mKeyPressedState == 0) {
-      mKeyPressedState = 1;
-    }
+  if (mKeyPressedCount > 1) 
+  {
+    if (mKeyPressedState == 0) mKeyPressedState = 1;
     
     mKeyPressedCount = 0;
     mKeyWasDown = PR_FALSE;
+
     return NS_OK;
   }
+
   mKeyPressedCount = 0;
   nsresult rv = HandleKey(aEvent, PR_TRUE);
   mKeyWasDown = PR_FALSE;
+
   return rv;
 }
 
@@ -246,7 +267,7 @@
     designMode = DMode.EqualsLiteral("on");
     if (designMode) return NS_OK;
   }
-  
+
   if (targetContent->IsNodeOfType(nsINode::eHTML_FORM_CONTROL)) 
   {
       nsCOMPtr<nsIFormControl> formControl(do_QueryInterface(targetContent));
@@ -262,8 +283,107 @@
           return NS_OK;
         }
       }
-      if (formControlType == NS_FORM_SELECT && !mKeyWasDown && aReal)
-        return NS_OK;
+
+      if (formControlType == NS_FORM_SELECT)
+      {
+        if (!mSelectControlSelected)
+        {
+          aEvent->StopPropagation();
+          aEvent->PreventDefault();
+        }
+
+        PRUint32 keyCode;
+        nsCOMPtr<nsIDOMKeyEvent> keyEvent(do_QueryInterface(aEvent));
+  
+        if (!keyEvent) return NS_ERROR_FAILURE;
+
+        if (NS_FAILED(keyEvent->GetKeyCode(&keyCode)))
+          return NS_ERROR_FAILURE;
+
+
+        nsCOMPtr<nsIDOMHTMLSelectElement> element = do_QueryInterface(mLastContent);
+        if (element)
+        {
+          PRBool isMultiple = PR_FALSE;
+          element->GetMultiple(&isMultiple);
+
+          PRInt32 size  = 0;
+          PRUint32 len  = 0;
+          PRInt32 index = 0;
+
+          element->GetSize(&size);
+          element->GetLength(&len);
+          element->GetSelectedIndex(&index);
+
+          if (keyCode == nsIDOMKeyEvent::DOM_VK_RETURN)
+          {
+            if (isMultiple && !mSelectControlSelected) 
+            {
+              element->SetSelectedIndex(0);
+              mSelectMultiCount = 0;
+            }
+
+            mSelectControlSelected = isMultiple ? PR_TRUE : !mSelectControlSelected;
+
+            if (size < 2) 
+            {
+              mSelectPopup = !mSelectPopup;
+              ++mSelectPopupCount;
+            }
+          }
+
+          if (mSelectControlSelected && isMultiple) 
+          {
+            if (keyCode == nsIDOMKeyEvent::DOM_VK_DOWN) ++mSelectMultiCount;
+            if (keyCode == nsIDOMKeyEvent::DOM_VK_UP) --mSelectMultiCount;
+
+            if (mSelectMultiCount >= 0 && mSelectMultiCount <= len)
+            {
+              return NS_OK;
+            } 
+              else
+            {
+              if (mSelectMultiCount < 0) mSelectMultiCount = 0;
+              if (mSelectMultiCount > (PRInt32)len) mSelectMultiCount = len;
+
+              mSelectControlSelected = PR_FALSE;
+            }
+          }
+            else
+          {
+            if (mSelectPopup) 
+            {
+              aEvent->StopPropagation();
+              aEvent->PreventDefault();
+
+              return NS_OK;
+            }
+
+            if (mSelectControlSelected)
+            {
+              if (mSelectNavCount == len || mSelectNavCount < 0)
+              {
+                mSelectControlSelected = PR_FALSE;
+                mSelectNavCount = 0;
+              } 
+                else if (!mSelectPopup)
+              {
+                if (keyCode == nsIDOMKeyEvent::DOM_VK_DOWN) ++mSelectNavCount;
+          
+                if (keyCode == nsIDOMKeyEvent::DOM_VK_UP) --mSelectNavCount;
+
+                element->SetSelectedIndex(mSelectNavCount);
+
+                return NS_OK;
+              }
+            } 
+              else if (size > 1 && index < 0 && !mSelectControlSelected)
+            {
+              element->SetSelectedIndex(-1);
+            }
+          } 
+        }
+      }
   }
   else if (mService->mIgnoreTextFields && targetContent->IsNodeOfType(nsINode::eHTML)) 
   {
@@ -285,7 +405,7 @@
 
   if (NS_FAILED(keyEvent->GetKeyCode(&keyCode)))
   return NS_ERROR_FAILURE;
-  
+
   if (keyCode == nsIDOMKeyEvent::DOM_VK_RETURN && !aReal && formControlType != NS_FORM_TEXTAREA) {
     nsCOMPtr<nsIContent> focusedContent;
     getFocusedContent(0, getter_AddRefs(focusedContent));
@@ -431,7 +551,10 @@
       }
 
       if (textLength != 0 && selectionStart != 0)
-        return NS_OK;
+      {
+        printf("RETURNING ...\n");
+        // return NS_OK;
+      }
     }
 
     // We're using this key, no one else should
@@ -468,13 +591,17 @@
       }
 
       if (textLength  != selectionEnd)
-        return NS_OK;
+      {
+        printf("RETURNING ...\n");
+        // return NS_OK;
+      }
     }
 
     aEvent->StopPropagation();  // We're using this key, no one else should
     aEvent->PreventDefault();
     return aReal?Down():NS_OK;
   }
+
   return NS_OK;
 }
 
@@ -813,8 +940,6 @@
               aContent);
 
 
-  // debug_content(*aContent);
-
   if ( (hhElement || iFrameElement) && mNavigationFramesState)
   {
     mNavigationFramesState = PR_FALSE;
@@ -1145,22 +1270,28 @@
 
   nsPresContext* presContext = getPresContext(c);
   nsCOMPtr<nsIPresShell> presShell = presContext->PresShell();
-  //#ifdef OLDER_LAYOUT  
+  
   if (mService->mOrderLayout) 
   {
     // Google Spreadsheets works ugly with this call
-    presContext->EventStateManager()->SetContentState(c, NS_EVENT_STATE_FOCUS);  
+    // presContext->EventStateManager()->SetContentState(c, NS_EVENT_STATE_FOCUS);  
+
     presShell->ScrollContentIntoView(c, 
                                      NS_PRESSHELL_SCROLL_IF_NOT_VISIBLE,
                                      NS_PRESSHELL_SCROLL_IF_NOT_VISIBLE);
+
     presContext->EventStateManager()->MoveCaretToFocus();
   }
-  //#else
+
   nsCOMPtr<nsIDOMNSHTMLElement> nsElement = do_QueryInterface(element);
+
+  mLastContent = do_QueryInterface(nsElement);
+
   if (nsElement) 
     nsElement->Focus();
-  //#endif
 
+  return;
+  
   nsIFrame* focusedFrame;
   getFrameForContent(c, &focusedFrame);
   nsRect rect = makeRectRelativeToGlobalView(focusedFrame);
--- /home/petejc/src/microb_latest/microb-engine/scratch_build_orig/build-tree/mozilla/extensions/spatialnavigation/src/nsSpatialNavigationUtils.cpp	2008-03-31 13:46:52.000000000 -0600
+++ mozilla/extensions/spatialnavigation/src/nsSpatialNavigationUtils.cpp	2008-03-31 09:07:44.000000000 -0600
@@ -420,6 +420,16 @@
 
   PRBool disabled = PR_FALSE;
   
+  nsCOMPtr<nsIDOMNode> node;
+  node = do_QueryInterface(currentContent);
+  if (node)
+  {
+    nsAutoString str;
+    node->GetNodeName(str);
+
+    if (str.LowerCaseEqualsLiteral("option")) return PR_FALSE;
+  }
+
   nsCOMPtr<nsIDOMHTMLSelectElement> selectElement = do_QueryInterface(currentContent);
   if (selectElement && NS_SUCCEEDED(selectElement->GetDisabled(&disabled)))
     return !disabled;
@@ -1037,8 +1047,6 @@
   NS_IF_ADDREF(*aWindow = window);
 }
 
-
-
 PRBool IsPartiallyVisible(nsIPresShell* shell, nsIFrame* frame, PRBool aForce)
 {
    // We need to know if at least a kMinPixels around the object is visible
@@ -1114,8 +1122,9 @@
 
 void ScrollWindow(int direction, nsIDOMWindow* contentWindow)
 {
-  if (!contentWindow)
-    return;
+  printf("ScrollWindow ...\n");
+
+  if (!contentWindow) return;
   
   if (direction == eNavLeft)
     contentWindow->ScrollBy(-1* gScrollOffset, 0);
--- /home/petejc/src/microb_latest/microb-engine/scratch_build_orig/build-tree/mozilla/extensions/spatialnavigation/src/nsSpatialNavigationPrivate.h	2008-03-31 13:46:52.000000000 -0600
+++ mozilla/extensions/spatialnavigation/src/nsSpatialNavigationPrivate.h	2008-03-31 11:51:54.000000000 -0600
@@ -173,6 +173,13 @@
   PRUint32 mKeyPressedCount;
   PRUint16 mKeyPressedState;
   PRBool mKeyWasDown;
+
+  PRBool mSelectControlSelected;
+  PRBool mSelectPopup;
+  PRInt32 mSelectPopupCount;
+  PRInt32 mSelectNavCount;
+  PRInt32 mSelectMultiCount;
+  nsCOMPtr<nsIContent> mLastContent;
 };
 
 

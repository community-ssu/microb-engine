# Patches for microb-engine
# Oleg Romashin <oleg.romashin@nokia.com>
# DP: Timings for page loading on TestApplication
# Also part for building TestGtkEmbed with JPROF (should be separate patch 375_jprof_linking_fix.diff)

Index: mozilla/embedding/browser/gtk/tests/TestGtkEmbed.cpp
===================================================================
--- mozilla.orig/embedding/browser/gtk/tests/TestGtkEmbed.cpp
+++ mozilla/embedding/browser/gtk/tests/TestGtkEmbed.cpp
@@ -1,9 +1,10 @@
 /* ***** BEGIN LICENSE BLOCK *****
+ * vim:set ts=2 sw=2 sts=2 tw=80 et cindent:
  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
  *
  * The contents of this file are subject to the Mozilla Public License Version
  * 1.1 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * http://www.mozilla.org/MPL/
  *
  * Software distributed under the License is distributed on an "AS IS" basis,
@@ -44,16 +45,20 @@
 // mozilla specific headers
 #include "nsIDOMKeyEvent.h"
 #include "nsIDOMMouseEvent.h"
 #include "nsIDOMUIEvent.h"
 
 #include "nsStringAPI.h"
 #include "gtkmozembed_glue.cpp"
 
+#ifdef MOZ_JPROF
+#include "jprof/jprof.h"
+#endif
+
 #include "EmbedPrompter.h"
 #include "EmbedPrompter.cpp"
 
 typedef struct _TestGtkBrowser {
   GtkWidget  *topLevelWindow;
   GtkWidget  *topLevelVBox;
   GtkWidget  *menuBar;
   GtkWidget  *fileMenuItem;
@@ -83,20 +88,24 @@
   gboolean toolBarOn;
   gboolean locationBarOn;
   gboolean statusBarOn;
 
 } TestGtkBrowser;
 
 // the list of browser windows currently open
 GList *browser_list = g_list_alloc();
+static GTimer * timer = NULL;
+static gdouble timed = 0;
+static gchar * url = NULL;
+
 
 static TestGtkBrowser *new_gtk_browser    (guint32 chromeMask);
 static void            set_browser_visibility (TestGtkBrowser *browser,
-					       gboolean visibility);
+                                               gboolean visibility);
 
 static int num_browsers = 0;
 
 // callbacks from the UI
 static void     back_clicked_cb    (GtkButton   *button, 
 				    TestGtkBrowser *browser);
 static void     stop_clicked_cb    (GtkButton   *button,
 				    TestGtkBrowser *browser);
@@ -200,27 +209,56 @@
 				  gpointer data);
 
 // some utility functions
 static void update_status_bar_text  (TestGtkBrowser *browser);
 static void update_temp_message     (TestGtkBrowser *browser,
 				     const char *message);
 static void update_nav_buttons      (TestGtkBrowser *browser);
 
+void show_timeout(gchar * message, gchar *env, TestGtkBrowser *browser)
+{
+  if (timer) {
+    GTimeVal timeval;
+    g_get_current_time(&timeval);
+    gdouble timed2 = g_timer_elapsed(timer, NULL);;
+    if (message) {
+      printf("TIMER:%s: URL:'%s', Result: %f, CUR:%ld.%06ld\n", message, url, timed2 - timed, timeval.tv_sec, timeval.tv_usec);
+      if (env && g_strrstr(env, "result_exit")) {
+        g_timer_destroy (timer);
+        GList *tmp_list = browser_list;
+        TestGtkBrowser *tmpBrowser = (TestGtkBrowser *)tmp_list->data;
+        while (tmpBrowser) {
+          tmp_list = tmp_list->next;
+          gtk_widget_destroy(tmpBrowser->topLevelWindow);
+          tmpBrowser = (TestGtkBrowser *)tmp_list->data;
+        }
+      }
+    } else
+      printf("TIMER:Start:URL:'%s', CUR:%ld.%06ld\n", url, timeval.tv_sec, timeval.tv_usec);
+    timed = timed2;
+  }
+}
+
 int
 main(int argc, char **argv)
 {
   gtk_set_locale();
   gtk_init(&argc, &argv);
 
   static const GREVersionRange greVersion = {
     "1.9a", PR_TRUE,
     "2", PR_TRUE
   };
 
+  // Call the code to install our handler
+#ifdef MOZ_JPROF
+  setupProfilingStuff();
+#endif
+
   char xpcomPath[PATH_MAX];
 
   nsresult rv = GRE_GetGREPathWithProperties(&greVersion, 1, nsnull, 0,
                                              xpcomPath, sizeof(xpcomPath));
   if (NS_FAILED(rv)) {
     fprintf(stderr, "Couldn't find a compatible GRE.\n");
     return 1;
   }
@@ -250,25 +288,30 @@
     fprintf(stderr, "Failed to get HOME\n");
     exit(1);
   }
   
   full_path = g_strdup_printf("%s/%s", home_path, ".TestGtkEmbed");
   
   gtk_moz_embed_set_profile_path(full_path, "TestGtkEmbed");
 
+  timer = g_timer_new();
+  g_timer_start(timer);
+
   TestGtkBrowser *browser = new_gtk_browser(GTK_MOZ_EMBED_FLAG_DEFAULTCHROME);
 
   // set our minimum size
   gtk_widget_set_usize(browser->mozEmbed, 400, 400);
 
   set_browser_visibility(browser, TRUE);
 
-  if (argc > 1)
+  if (argc > 1) {
+    url = argv[1];
     gtk_moz_embed_load_url(GTK_MOZ_EMBED(browser->mozEmbed), argv[1]);
+  }
 
   // get the singleton object and hook up to its new window callback
   // so we can create orphaned windows.
 
   GtkMozEmbedSingle *single;
 
   single = gtk_moz_embed_single_get();
   if (!single) {
@@ -785,35 +828,41 @@
   }
   
 }
 
 void
 load_started_cb     (GtkMozEmbed *embed, TestGtkBrowser *browser)
 {
   g_print("load_started_cb\n");
+  show_timeout(NULL, NULL, browser);
   gtk_widget_set_sensitive(browser->stopButton, TRUE);
   gtk_widget_set_sensitive(browser->reloadButton, FALSE);
   browser->loadPercent = 0;
   browser->bytesLoaded = 0;
   browser->maxBytesLoaded = 0;
   update_status_bar_text(browser);
 }
 
 void
 load_finished_cb    (GtkMozEmbed *embed, TestGtkBrowser *browser)
 {
   g_print("load_finished_cb\n");
-  gtk_widget_set_sensitive(browser->stopButton, FALSE);
-  gtk_widget_set_sensitive(browser->reloadButton, TRUE);
-  browser->loadPercent = 0;
-  browser->bytesLoaded = 0;
-  browser->maxBytesLoaded = 0;
-  update_status_bar_text(browser);
-  gtk_progress_set_percentage(GTK_PROGRESS(browser->progressBar), 0);
+  gchar * env = getenv("TGE");
+  show_timeout("Finish loading", env, browser);
+
+  if ((env == NULL) || (g_strrstr(env, "result_exit") == NULL)) {
+    gtk_widget_set_sensitive(browser->stopButton, FALSE);
+    gtk_widget_set_sensitive(browser->reloadButton, TRUE);
+    browser->loadPercent = 0;
+    browser->bytesLoaded = 0;
+    browser->maxBytesLoaded = 0;
+    update_status_bar_text(browser);
+    gtk_progress_set_percentage(GTK_PROGRESS(browser->progressBar), 0);
+  }
 }
 
 
 void
 net_state_change_cb (GtkMozEmbed *embed, gint flags, guint status,
 		     TestGtkBrowser *browser)
 {
   g_print("net_state_change_cb %d\n", flags);

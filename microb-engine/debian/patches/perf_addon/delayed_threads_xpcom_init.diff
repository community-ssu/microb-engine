# Experimental patch which will allow to Initialize XPCOM in separate thread
# It will provide non frozen UI on engine initialization time
# export MOZ_XPCOM_NO_THREADS=1 and call XRE_InitThreads after XRE_InitEmbedding
--- mozilla/xpcom/stub/nsXPComStub.cpp.orig	2007-04-24 20:02:51.000000000 +0300
+++ mozilla/xpcom/stub/nsXPComStub.cpp	2007-09-05 12:33:44.000000000 +0300
@@ -155,20 +156,28 @@ EXPORT_XPCOM_API(nsresult)
 NS_InitXPCOM3(nsIServiceManager **result,
 	      nsIFile *binDirectory,
 	      nsIDirectoryServiceProvider *dirProvider,
 	      nsStaticModuleInfo const *staticComponents,
 	      PRUint32 componentCount)
 {
   return NS_InitXPCOM3_P(result, binDirectory, dirProvider,
                          staticComponents, componentCount);
 }
 
+#undef NS_InitXPCOM4
+EXPORT_XPCOM_API(nsresult)
+NS_InitXPCOM4(void)
+{
+  return NS_InitXPCOM4_P();
+}
+
+
 #undef NS_ShutdownXPCOM
 EXPORT_XPCOM_API(nsresult)
 NS_ShutdownXPCOM(nsIServiceManager *svcMgr)
 {
   return NS_ShutdownXPCOM_P(svcMgr);
 }
 
 #undef NS_GetServiceManager
 EXPORT_XPCOM_API(nsresult)
 NS_GetServiceManager(nsIServiceManager* *result)
--- mozilla/xpcom/build/nsXPCOM.h.orig	2007-09-05 12:29:15.000000000 +0300
+++ mozilla/xpcom/build/nsXPCOM.h	2007-09-05 12:29:52.000000000 +0300
@@ -36,20 +36,21 @@
  *
  * ***** END LICENSE BLOCK ***** */
 
 #ifndef nsXPCOM_h__
 #define nsXPCOM_h__
 
 /* Map frozen functions to private symbol names if not using strict API. */
 #ifdef MOZILLA_INTERNAL_API
 # define NS_InitXPCOM2               NS_InitXPCOM2_P
 # define NS_InitXPCOM3               NS_InitXPCOM3_P
+# define NS_InitXPCOM4               NS_InitXPCOM4_P
 # define NS_ShutdownXPCOM            NS_ShutdownXPCOM_P
 # define NS_GetServiceManager        NS_GetServiceManager_P
 # define NS_GetComponentManager      NS_GetComponentManager_P
 # define NS_GetComponentRegistrar    NS_GetComponentRegistrar_P
 # define NS_GetMemoryManager         NS_GetMemoryManager_P
 # define NS_NewLocalFile             NS_NewLocalFile_P
 # define NS_NewNativeLocalFile       NS_NewNativeLocalFile_P
 # define NS_GetDebug                 NS_GetDebug_P
 # define NS_GetTraceRefcnt           NS_GetTraceRefcnt_P
 # define NS_Alloc                    NS_Alloc_P
@@ -191,20 +192,23 @@ typedef struct nsStaticModuleInfo {
  *         shutdown. Other error codes indicate a failure during
  *         initialisation.
  */
 XPCOM_API(nsresult)
 NS_InitXPCOM3(nsIServiceManager* *result, 
               nsIFile* binDirectory,
               nsIDirectoryServiceProvider* appFileLocationProvider,
               nsStaticModuleInfo const *staticComponents,
               PRUint32 componentCount);
 
+XPCOM_API(nsresult)
+NS_InitXPCOM4(void);
+
 /**
  * Shutdown XPCOM. You must call this method after you are finished
  * using xpcom. 
  *
  * @status FROZEN
  *
  * @param servMgr           The service manager which was returned by NS_InitXPCOM.
  *                          This will release servMgr.  You may pass null.
  *
  * @return NS_OK for success;
--- mozilla/xpcom/build/nsXPComInit.cpp.orig	2007-03-27 12:49:06.000000000 +0300
+++ mozilla/xpcom/build/nsXPComInit.cpp	2007-09-05 14:14:00.000000000 +0300
@@ -477,20 +477,22 @@ NS_InitXPCOM(nsIServiceManager* *result,
 }
 
 EXPORT_XPCOM_API(nsresult)
 NS_InitXPCOM2(nsIServiceManager* *result,
                               nsIFile* binDirectory,
                               nsIDirectoryServiceProvider* appFileLocationProvider)
 {
     return NS_InitXPCOM3(result, binDirectory, appFileLocationProvider, nsnull, 0);
 }
 
+static PRBool gNS_InitXPCOM4 = PR_FALSE;
+
 EXPORT_XPCOM_API(nsresult)
 NS_InitXPCOM3(nsIServiceManager* *result,
                               nsIFile* binDirectory,
                               nsIDirectoryServiceProvider* appFileLocationProvider,
                               nsStaticModuleInfo const *staticComponents,
                               PRUint32 componentCount)
 {
     nsresult rv = NS_OK;
 
 #ifdef MOZ_ENABLE_LIBXUL
@@ -498,24 +500,20 @@ NS_InitXPCOM3(nsIServiceManager* *result
         staticComponents = kPStaticModules;
         componentCount = kStaticModuleCount;
     }
 #endif
 
      // We are not shutting down
     gXPCOMShuttingDown = PR_FALSE;
 
     NS_LogInit();
 
-    // Establish the main thread here.
-    rv = nsThreadManager::get()->Init();
-    if (NS_FAILED(rv)) return rv;
-
     // Set up the timer globals/timer thread
     rv = nsTimerImpl::Startup();
     NS_ENSURE_SUCCESS(rv, rv);
 
 #ifndef WINCE
     // If the locale hasn't already been setup by our embedder,
     // get us out of the "C" locale and into the system 
     if (strcmp(setlocale(LC_ALL, NULL), "C") == 0)
         setlocale(LC_ALL, "");
 #endif
@@ -631,48 +629,68 @@ NS_InitXPCOM3(nsIServiceManager* *result
                                        NS_INIPARSERFACTORY_CONTRACTID, 
                                        iniParserFactory);
 
         registrar->
           RegisterFactory(kSimpleUnicharStreamFactoryCID,
                           "nsSimpleUnicharStreamFactory",
                           NS_SIMPLE_UNICHAR_STREAM_FACTORY_CONTRACTID,
                           nsSimpleUnicharStreamFactory::GetInstance());
     }
 
-    // Pay the cost at startup time of starting this singleton.
-    nsIInterfaceInfoManager* iim =
-        xptiInterfaceInfoManager::GetInterfaceInfoManagerNoAddRef();
 
-    if (CheckUpdateFile() || NS_FAILED(
-        nsComponentManagerImpl::gComponentManager->ReadPersistentRegistry())) {
-        // If the component registry is out of date, malformed, or incomplete,
-        // autoregister the default component directories.
-        (void) iim->AutoRegisterInterfaces();
-        nsComponentManagerImpl::gComponentManager->AutoRegister(nsnull);
-    }
 
     // After autoreg, but before we actually instantiate any components,
     // add any services listed in the "xpcom-directory-providers" category
     // to the directory service.
     nsDirectoryService::gService->RegisterCategoryProviders();
 
     // Initialize memory flusher
     nsMemoryImpl::InitFlusher();
 
     // Notify observers of xpcom autoregistration start
     NS_CreateServicesFromCategory(NS_XPCOM_STARTUP_OBSERVER_ID, 
                                   nsnull,
                                   NS_XPCOM_STARTUP_OBSERVER_ID);
-    
+
+    // Pay the cost at startup time of starting this singleton.
+
+    if (!PR_GetEnv("MOZ_XPCOM_NO_THREADS"))
+        return NS_InitXPCOM4();
+
     return NS_OK;
 }
 
+EXPORT_XPCOM_API(nsresult)
+NS_InitXPCOM4(void)
+{
+    nsresult rv;
+
+    if (gNS_InitXPCOM4)
+      return NS_OK;
+
+    // Establish the main thread here.
+    if (CheckUpdateFile() || NS_FAILED(
+        nsComponentManagerImpl::gComponentManager->ReadPersistentRegistry())) {
+        nsIInterfaceInfoManager* iim =
+            xptiInterfaceInfoManager::GetInterfaceInfoManagerNoAddRef();
+        // If the component registry is out of date, malformed, or incomplete,
+        // autoregister the default component directories.
+        (void) iim->AutoRegisterInterfaces();
+        rv = nsThreadManager::get()->Init();
+        NS_ENSURE_SUCCESS(rv, rv);        
+        nsComponentManagerImpl::gComponentManager->AutoRegister(nsnull);
+    } else
+        rv = nsThreadManager::get()->Init();
+    
+    gNS_InitXPCOM4 = PR_TRUE;
+    return rv;
+}
 
 //
 // NS_ShutdownXPCOM()
 //
 // The shutdown sequence for xpcom would be
 //
 // - Notify "xpcom-shutdown" for modules to release primary (root) references
 // - Shutdown XPCOM timers
 // - Notify "xpcom-shutdown-threads" for thread joins
 // - Shutdown the event queues
--- mozilla/toolkit/library/dlldeps-xul.cpp.orig	2006-08-17 17:22:04.000000000 +0300
+++ mozilla/toolkit/library/dlldeps-xul.cpp	2007-09-05 12:50:38.000000000 +0300
@@ -37,16 +37,17 @@
 
 #include "nsXULAppAPI.h"
 
 void xxxNeverCalledXUL()
 {
   XRE_main(0, nsnull, nsnull);
   XRE_GetFileFromPath(nsnull, nsnull);
   XRE_GetStaticComponents(nsnull, nsnull);
   XRE_LockProfileDirectory(nsnull, nsnull);
   XRE_InitEmbedding(nsnull, nsnull, nsnull, nsnull, 0);
+  XRE_InitThreads();
   XRE_NotifyProfile();
   XRE_TermEmbedding();
   XRE_CreateAppData(nsnull, nsnull);
   XRE_ParseAppData(nsnull, nsnull);
   XRE_FreeAppData(nsnull);
 }
--- mozilla/toolkit/xre/nsEmbedFunctions.cpp.orig	2007-09-04 00:54:01.000000000 +0300
+++ mozilla/toolkit/xre/nsEmbedFunctions.cpp	2007-09-05 12:51:20.000000000 +0300
@@ -149,20 +149,26 @@ XRE_InitEmbedding(nsILocalFile *aLibXULD
   nsCOMPtr<nsIObserver> startupNotifier
     (do_CreateInstance(NS_APPSTARTUPNOTIFIER_CONTRACTID));
   if (!startupNotifier)
     return NS_ERROR_FAILURE;
 
   startupNotifier->Observe(nsnull, APPSTARTUP_TOPIC, nsnull);
 
   return NS_OK;
 }
 
+nsresult
+XRE_InitThreads()
+{
+  return NS_InitXPCOM4();
+}
+
 void
 XRE_NotifyProfile()
 {
   NS_ASSERTION(gDirServiceProvider, "XRE_InitEmbedding was not called!");
   gDirServiceProvider->DoStartup();
 }
 
 void
 XRE_TermEmbedding()
 {
--- mozilla/toolkit/xre/nsXULAppAPI.h.orig	2007-05-16 20:15:00.000000000 +0300
+++ mozilla/toolkit/xre/nsXULAppAPI.h	2007-09-05 12:51:33.000000000 +0300
@@ -293,20 +293,23 @@ XRE_API(nsresult,
  * resources allocated by XRE_InitEmbedding.
  */
 
 XRE_API(nsresult,
         XRE_InitEmbedding, (nsILocalFile *aLibXULDirectory,
                             nsILocalFile *aAppDirectory,
                             nsIDirectoryServiceProvider *aAppDirProvider,
                             nsStaticModuleInfo const *aStaticComponents,
                             PRUint32 aStaticComponentCount))
 
+XRE_API(nsresult,
+        XRE_InitThreads, ())
+
 /**
  * Fire notifications to inform the toolkit about a new profile. This
  * method should be called after XRE_InitEmbedding if the embedder
  * wishes to run with a profile. Normally the embedder should call
  * XRE_LockProfileDirectory to lock the directory before calling this
  * method.
  *
  * @note There are two possibilities for selecting a profile:
  *
  * 1) Select the profile before calling XRE_InitEmbedding. The aAppDirProvider
--- mozilla/xpcom/glue/standalone/nsXPCOMGlue.cpp.orig	2007-04-24 20:02:51.000000000 +0300
+++ mozilla/xpcom/glue/standalone/nsXPCOMGlue.cpp	2007-09-05 17:16:13.000000000 +0300
@@ -146,20 +146,26 @@ NS_InitXPCOM3(nsIServiceManager* *result
               nsStaticModuleInfo const *staticComponents,
               PRUint32 componentCount)
 {
     if (!xpcomFunctions.init3)
         return NS_ERROR_NOT_INITIALIZED;
     return xpcomFunctions.init3(result, binDirectory, appFileLocationProvider,
                                 staticComponents, componentCount);
 }
 
 XPCOM_API(nsresult)
+NS_InitXPCOM4(void)
+{
+    return NS_ERROR_NOT_INITIALIZED;
+}
+
+XPCOM_API(nsresult)
 NS_ShutdownXPCOM(nsIServiceManager* servMgr)
 {
     if (!xpcomFunctions.shutdown)
         return NS_ERROR_NOT_INITIALIZED;
     return xpcomFunctions.shutdown(servMgr);
 }
 
 XPCOM_API(nsresult)
 NS_GetServiceManager(nsIServiceManager* *result)
 {

# Probably big improvement in gmail loading.
Index: content/html/document/src/nsHTMLDocument.h
===================================================================
RCS file: /cvsroot/mozilla/content/html/document/src/nsHTMLDocument.h,v
retrieving revision 3.218
diff -u -r3.218 nsHTMLDocument.h
--- content/html/document/src/nsHTMLDocument.h	10 Aug 2007 13:19:14 -0000	3.218
+++ content/html/document/src/nsHTMLDocument.h	3 Oct 2007 06:14:39 -0000
@@ -272,6 +272,12 @@
   /** # of forms in the document, synchronously set */
   PRInt32 mNumForms;
 
+  //XXXpete
+  PRUint32 mLineNum;
+  PRBool mLineMatch;
+  nsCAutoString mURI;
+  nsAutoString mWriteData;
+
   static PRUint32 gWyciwygSessionCnt;
 
   static PRBool TryHintCharset(nsIMarkupDocumentViewer* aMarkupDV,
Index: content/html/document/src/nsHTMLDocument.cpp
===================================================================
RCS file: /cvsroot/mozilla/content/html/document/src/nsHTMLDocument.cpp,v
retrieving revision 3.744
diff -u -r3.744 nsHTMLDocument.cpp
--- content/html/document/src/nsHTMLDocument.cpp	20 Aug 2007 22:55:08 -0000	3.744
+++ content/html/document/src/nsHTMLDocument.cpp	3 Oct 2007 06:14:40 -0000
@@ -427,6 +427,10 @@
 
   PrePopulateHashTables();
 
+  //XXXpete
+  mLineNum = 0;
+  mLineMatch = PR_FALSE;
+
   return NS_OK;
 }
 
@@ -2446,6 +2450,17 @@
   // makes sense to have the code for two separate Parse() calls here
   // since the concatenation of strings costs more than we like. And
   // why pay that price when we don't need to?
+  nsCAutoString url;
+  mDocumentURI->GetSpec(url);
+
+  if (mLineMatch && url.Equals(mURI))
+  {
+    mWriteData.Append(aText);
+    --mWriteLevel;
+    return NS_OK;
+  }
+  mURI = url;
+
   if (aNewlineTerminate) {
     rv = mParser->Parse(aText + new_line,
                         key, mContentType,
@@ -2495,6 +2510,16 @@
     rv = ncc->GetJSContext(&cx);
     NS_ENSURE_SUCCESS(rv, rv);
 
+    //XXXpete
+    const char *fn;
+    PRUint32 ln;
+    nsJSUtils::GetCallingLocation(cx, &fn, &ln);
+
+    if (ln == mLineNum)
+      mLineMatch = PR_TRUE;
+
+    mLineNum = ln;
+
     jsval *argv = nsnull;
     ncc->GetArgvPtr(&argv);
     NS_ENSURE_TRUE(argv, NS_ERROR_UNEXPECTED);
@@ -2509,7 +2534,9 @@
                                             (::JS_GetStringChars(jsstr)),
                           ::JS_GetStringLength(jsstr));
 
-      return WriteCommon(str, aNewlineTerminate);
+      rv = WriteCommon(str, aNewlineTerminate);
+      NS_ENSURE_SUCCESS(rv, rv);
+      //return WriteCommon(str, aNewlineTerminate);
     }
 
     if (argc > 1) {
@@ -2526,12 +2553,24 @@
                              ::JS_GetStringLength(str));
       }
 
-      return WriteCommon(string_buffer, aNewlineTerminate);
+      //return WriteCommon(string_buffer, aNewlineTerminate);
+      rv = WriteCommon(string_buffer, aNewlineTerminate);
+      NS_ENSURE_SUCCESS(rv, rv);
     }
+
+    // No arguments...
+    if (argc == 0)
+      return WriteCommon(EmptyString(), aNewlineTerminate);
   }
 
-  // No arguments...
-  return WriteCommon(EmptyString(), aNewlineTerminate);
+  if (!mWriteData.IsEmpty())
+  {
+    mLineMatch = PR_FALSE;
+    WriteCommon(mWriteData, aNewlineTerminate);
+    mWriteData.Truncate(0);
+  }
+
+  return NS_OK;
 }
 
 NS_IMETHODIMP

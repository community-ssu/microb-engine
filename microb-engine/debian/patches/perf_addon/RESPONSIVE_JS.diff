--- Makefile.in.orig	2007-06-25 12:57:56.000000000 +0300
+++ Makefile.in	2007-06-25 13:36:36.000000000 +0300
@@ -118,21 +118,21 @@ CPPSRCS =			\
 # static lib.
 FORCE_STATIC_LIB = 1
 
 LOCAL_INCLUDES = \
 		-I$(srcdir)/../events \
 		-I$(srcdir)/../storage \
 		-I$(srcdir)/../offline \
 		-I$(topsrcdir)/content/xbl/src \
 		-I$(topsrcdir)/content/xul/document/src \
 		-I$(topsrcdir)/content/events/src \
-		-I$(topsrcdir)/content/base/src \
+		-I$(topsrcdir)/content/base/src  $(GLIB_CFLAGS) \
 		$(NULL)
 
 DEFINES += -D_IMPL_NS_LAYOUT
 DEFINES += -DMOZ_ENABLE_JS_DUMP
 
 ifdef MOZ_JSDEBUGGER
 DEFINES += -DMOZ_JSDEBUGGER
 endif
 
 include $(topsrcdir)/config/rules.mk
--- nsJSEnvironment.cpp.orig	2007-06-15 09:44:18.000000000 +0300
+++ nsJSEnvironment.cpp	2007-06-25 13:42:03.000000000 +0300
@@ -674,20 +674,21 @@ PrintWinCodebase(nsGlobalWindow *win)
 // The number of branch callbacks between calls to JS_MaybeGC
 #define MAYBE_GC_BRANCH_COUNT_MASK 0x00000fff // 4095
 
 // The number of branch callbacks before we even check if our start
 // timestamp is initialized. This is a fairly low number as we want to
 // initialize the timestamp early enough to not waste much time before
 // we get there, but we don't want to bother doing this too early as
 // it's not generally necessary.
 #define INITIALIZE_TIME_BRANCH_COUNT_MASK 0x000000ff // 255
 
+#include "glib.h"
 // This function is called after each JS branch execution
 JSBool JS_DLL_CALLBACK
 nsJSContext::DOMBranchCallback(JSContext *cx, JSScript *script)
 {
   // Get the native context
   nsJSContext *ctx = NS_STATIC_CAST(nsJSContext *, ::JS_GetContextPrivate(cx));
 
   if (!ctx) {
     // Can happen; see bug 355811
     return JS_TRUE;
@@ -705,20 +706,21 @@ nsJSContext::DOMBranchCallback(JSContext
     // script has run
     ctx->mBranchCallbackTime = PR_Now();
 
     ctx->mIsTrackingChromeCodeTime =
       ::JS_IsSystemObject(cx, ::JS_GetGlobalObject(cx));
 
     return JS_TRUE;
   }
 
   if (callbackCount & MAYBE_GC_BRANCH_COUNT_MASK) {
+//    g_main_context_iteration(NULL, FALSE); //Very Responsive, but much slow JS
     return JS_TRUE;
   }
 
   // XXX Save the branch callback time so we can restore it after the GC,
   // because GCing can cause JS to run on our context, causing our
   // ScriptEvaluated to be called, and clearing our branch callback time and
   // count. See bug 302333.
   PRTime callbackTime = ctx->mBranchCallbackTime;
 
   // Run the GC if we get this far.
@@ -730,20 +732,23 @@ nsJSContext::DOMBranchCallback(JSContext
 
   PRTime now = PR_Now();
 
   PRTime duration;
   LL_SUB(duration, now, callbackTime);
 
   // Check the amount of time this script has been running, or if the
   // dialog is disabled.
   if (duration < (ctx->mIsTrackingChromeCodeTime ?
                   sMaxChromeScriptRunTime : sMaxScriptRunTime)) {
+/* static PRBool first_time = PR_TRUE;
+    if (first_time) */ /* Just draw first frame/page and after not responsive JS working */
+    g_main_context_iteration(NULL, FALSE); //Responsive, but little bit slow
     return JS_TRUE;
   }
 
   // If we get here we're most likely executing an infinite loop in JS,
   // we'll tell the user about this and we'll give the user the option
   // of stopping the execution of the script.
   nsCOMPtr<nsPIDOMWindow> win(do_QueryInterface(ctx->GetGlobalObject()));
   NS_ENSURE_TRUE(win, JS_TRUE);
 
   nsIDocShell *docShell = win->GetDocShell();

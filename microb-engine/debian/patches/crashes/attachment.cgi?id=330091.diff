diff -r 400a20459c36 js/src/jslock.cpp
--- a/js/src/jslock.cpp	Thu Jul 17 17:54:55 2008 +0200
+++ b/js/src/jslock.cpp	Thu Jul 17 22:01:15 2008 +0200
@@ -114,18 +114,35 @@ NativeCompareAndSwap(jsword *w, jsword o
                           "cmpxchgl %2, (%1)\n"
                           "sete %%al\n"
                           "andl $1, %%eax\n"
                           : "=a" (res)
                           : "r" (w), "r" (nv), "a" (ov)
                           : "cc", "memory");
     return (int)res;
 }
 
+#elif defined(__GNUC__) && defined(__x86_64__)
+static JS_INLINE int
+NativeCompareAndSwap(jsword *w, jsword ov, jsword nv)
+{
+    unsigned int res;
+
+    __asm__ __volatile__ (
+                          "lock\n"
+                          "cmpxchgq %2, (%1)\n"
+                          "sete %%al\n"
+                          "movzbl %%al, %%eax\n"
+                          : "=a" (res)
+                          : "r" (w), "r" (nv), "a" (ov)
+                          : "cc", "memory");
+    return (int)res;
+}
+
 #elif defined(SOLARIS) && defined(sparc) && defined(ULTRA_SPARC)
 
 static JS_INLINE int
 NativeCompareAndSwap(jsword *w, jsword ov, jsword nv)
 {
 #if defined(__GNUC__)
     unsigned int res;
     JS_ASSERT(ov != nv);
     asm volatile ("\
@@ -166,27 +183,18 @@ typedef int (__kernel_cmpxchg_t)(int old
 #define __kernel_cmpxchg (*(__kernel_cmpxchg_t *)0xffff0fc0)
 
 JS_STATIC_ASSERT(sizeof(jsword) == sizeof(int));
 
 static JS_INLINE int
 NativeCompareAndSwap(jsword *w, jsword ov, jsword nv)
 {
     volatile int *vp = (volatile int*)w;
     return !__kernel_cmpxchg(ov, nv, vp);
-}
-
-#elif defined(__GNUC__) &&                                                    \
-    (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 1))
-
-static JS_INLINE int
-NativeCompareAndSwap(jsword *w, jsword ov, jsword nv)
-{
-    return __sync_bool_compare_and_swap(w, ov, nv);
 }
 
 #else
 
 #error "JS_HAS_NATIVE_COMPARE_AND_SWAP should be 0 if your platform lacks a compare-and-swap instruction."
 
 #endif /* arch-tests */
 
 struct JSFatLock {
diff -r 400a20459c36 js/src/jslock.h
--- a/js/src/jslock.h	Thu Jul 17 17:54:55 2008 +0200
+++ b/js/src/jslock.h	Thu Jul 17 22:01:15 2008 +0200
@@ -50,23 +50,22 @@
 # include "prthread.h"
 #endif
 
 JS_BEGIN_EXTERN_C
 
 #ifdef JS_THREADSAFE
 
 #if (defined(_WIN32) && defined(_M_IX86)) ||                                  \
     (defined(__GNUC__) && defined(__i386__)) ||                               \
+    (defined(__GNUC__) && defined(__x86_64__)) ||                             \
     (defined(SOLARIS) && defined(sparc) && defined(ULTRA_SPARC)) ||           \
     defined(AIX) ||                                                           \
-    defined(USE_ARM_KUSER) ||                                                 \
-    (defined(__GNUC__) &&                                                     \
-     (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 1)))
+    defined(USE_ARM_KUSER)
 # define JS_HAS_NATIVE_COMPARE_AND_SWAP 1
 #else
 # define JS_HAS_NATIVE_COMPARE_AND_SWAP 0
 #endif
 
 #if defined(JS_USE_ONLY_NSPR_LOCKS) || !JS_HAS_NATIVE_COMPARE_AND_SWAP
 # define NSPR_LOCK 1
 #else
 # undef NSPR_LOCK

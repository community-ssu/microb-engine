diff --git a/layout/svg/base/src/nsSVGEffects.cpp b/layout/svg/base/src/nsSVGEffects.cpp
--- a/layout/svg/base/src/nsSVGEffects.cpp
+++ b/layout/svg/base/src/nsSVGEffects.cpp
@@ -421,30 +421,39 @@ nsSVGRenderingObserverList::InvalidateAl
 static nsSVGRenderingObserverList *
 GetObserverList(nsIFrame *aFrame)
 {
   if (!(aFrame->GetStateBits() & NS_FRAME_MAY_BE_TRANSFORMED_OR_HAVE_RENDERING_OBSERVERS))
     return nsnull;
   return static_cast<nsSVGRenderingObserverList*>(aFrame->GetProperty(nsGkAtoms::observer));
 }
 
+static void
+DeleteObserverList(void    *aObject,
+                   nsIAtom *aPropertyName,
+                   void    *aPropertyValue,
+                   void    *aData)
+{
+  delete static_cast<nsSVGRenderingObserverList*>(aPropertyValue);
+}
+
 void
 nsSVGEffects::AddRenderingObserver(nsIFrame *aFrame, nsSVGRenderingObserver *aObserver)
 {
   NS_ASSERTION(!aFrame->GetPrevContinuation(), "aFrame must be first continuation");
 
   nsSVGRenderingObserverList *observerList = GetObserverList(aFrame);
   if (!observerList) {
     observerList = new nsSVGRenderingObserverList();
     if (!observerList)
       return;
     for (nsIFrame* f = aFrame; f; f = f->GetNextContinuation()) {
       f->AddStateBits(NS_FRAME_MAY_BE_TRANSFORMED_OR_HAVE_RENDERING_OBSERVERS);
     }
-    aFrame->SetProperty(nsGkAtoms::observer, observerList);
+    aFrame->SetProperty(nsGkAtoms::observer, observerList, DeleteObserverList);
   }
   observerList->Add(aObserver);
 }
 
 void
 nsSVGEffects::RemoveRenderingObserver(nsIFrame *aFrame, nsSVGRenderingObserver *aObserver)
 {
   NS_ASSERTION(!aFrame->GetPrevContinuation(), "aFrame must be first continuation");

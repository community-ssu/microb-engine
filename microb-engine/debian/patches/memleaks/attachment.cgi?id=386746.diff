# HG changeset patch
# User Peter Van der Beken <peterv@propagandism.org>
# Date 1246536332 -7200
# Node ID fc0e0006bca96b7e1976a9fd88d6f20835300db7
# Parent  20fb33cc43431ac5f65907f313a4f18a8cb42e9a
Fix XBL leaks.

diff --git a/content/base/src/nsGenericElement.cpp b/content/base/src/nsGenericElement.cpp
--- a/content/base/src/nsGenericElement.cpp
+++ b/content/base/src/nsGenericElement.cpp
@@ -3987,8 +3987,16 @@ NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN(ns
         NS_IF_RELEASE(slots->mControllers);
       slots->mChildrenList = nsnull;
     }
   }
+
+  {
+    nsIDocument *doc;
+    if (!tmp->GetNodeParent() && (doc = tmp->GetOwnerDoc()) &&
+        tmp->HasFlag(NODE_MAY_BE_IN_BINDING_MNGR)) {
+      doc->BindingManager()->ChangeDocumentFor(tmp, doc, nsnull);
+    }
+  }
 NS_IMPL_CYCLE_COLLECTION_UNLINK_END
 
 NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN(nsGenericElement)
   NS_IMPL_CYCLE_COLLECTION_TRACE_PRESERVED_WRAPPER
diff --git a/content/xbl/src/nsBindingManager.cpp b/content/xbl/src/nsBindingManager.cpp
--- a/content/xbl/src/nsBindingManager.cpp
+++ b/content/xbl/src/nsBindingManager.cpp
@@ -400,8 +400,9 @@ DocumentInfoHashtableTraverser(nsIURI* k
                                void* userArg)
 {
   nsCycleCollectionTraversalCallback *cb = 
     static_cast<nsCycleCollectionTraversalCallback*>(userArg);
+  NS_CYCLE_COLLECTION_NOTE_EDGE_NAME(*cb, "mDocumentTable value");
   cb->NoteXPCOMChild(di);
   return PL_DHASH_NEXT;
 }
 
@@ -411,8 +412,9 @@ LoadingDocHashtableTraverser(nsIURI* key
                              void* userArg)
 {
   nsCycleCollectionTraversalCallback *cb = 
     static_cast<nsCycleCollectionTraversalCallback*>(userArg);
+  NS_CYCLE_COLLECTION_NOTE_EDGE_NAME(*cb, "mLoadingDocTable value");
   cb->NoteXPCOMChild(sl);
   return PL_DHASH_NEXT;
 }
 
@@ -1609,8 +1611,21 @@ nsBindingManager::DropDocumentReference(
   mProcessingAttachedStack = PR_TRUE;
   if (mProcessAttachedQueueEvent) {
     mProcessAttachedQueueEvent->Revoke();
   }
+
+  if (mContentListTable.ops)
+    PL_DHashTableFinish(&(mContentListTable));
+  mContentListTable.ops = nsnull;
+
+  if (mAnonymousNodesTable.ops)
+    PL_DHashTableFinish(&(mAnonymousNodesTable));
+  mAnonymousNodesTable.ops = nsnull;
+
+  if (mInsertionParentTable.ops)
+    PL_DHashTableFinish(&(mInsertionParentTable));
+  mInsertionParentTable.ops = nsnull;
+
   mDocument = nsnull;
 }
 
 void

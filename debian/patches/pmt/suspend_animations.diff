diff -U 8 -r -p mozilla.orig/modules/libpr0n/src/imgContainer.cpp mozilla/modules/libpr0n/src/imgContainer.cpp
--- mozilla.orig/modules/libpr0n/src/imgContainer.cpp	2010-02-15 12:20:23.000000000 +0200
+++ mozilla/modules/libpr0n/src/imgContainer.cpp	2010-02-16 12:09:17.000000000 +0200
@@ -50,31 +50,33 @@
 #include "imgContainer.h"
 #include "nsIInterfaceRequestor.h"
 #include "nsIInterfaceRequestorUtils.h"
 #include "nsAutoPtr.h"
 #include "nsStringStream.h"
 #include "prmem.h"
 #include "prlog.h"
 #include "prenv.h"
+#include "nsIObserverService.h"
+#include "nsServiceManagerUtils.h"
 
 #include "gfxContext.h"
 
 /* Accounting for compressed data */
 #if defined(PR_LOGGING)
 static PRLogModuleInfo *gCompressedImageAccountingLog = PR_NewLogModule ("CompressedImageAccounting");
 #else
 #define gCompressedImageAccountingLog
 #endif
 
 static int num_containers_with_discardable_data;
 static PRInt64 num_compressed_image_bytes;
 
 
-NS_IMPL_ISUPPORTS3(imgContainer, imgIContainer, nsITimerCallback, nsIProperties)
+NS_IMPL_ISUPPORTS5(imgContainer, imgIContainer, nsITimerCallback, nsIProperties, nsIObserver, nsISupportsWeakReference)
 
 //******************************************************************************
 imgContainer::imgContainer() :
   mSize(0,0),
   mNumFrames(0),
   mAnim(nsnull),
   mAnimationMode(kNormalAnimMode),
   mLoopCount(-1),
@@ -84,16 +86,21 @@ imgContainer::imgContainer() :
   mRestoreDataDone(PR_FALSE),
   mDiscardTimer(nsnull)
 {
 }
 
 //******************************************************************************
 imgContainer::~imgContainer()
 {
+  // Remove suspension observer
+  nsCOMPtr<nsIObserverService> os = do_GetService("@mozilla.org/observer-service;1");
+  if (os)
+    os->RemoveObserver(this, "animation-suspension");
+
   if (mAnim)
     delete mAnim;
 
   for (unsigned int i = 0; i < mFrames.Length(); ++i)
     delete mFrames[i];
 
   if (!mRestoreData.IsEmpty()) {
     num_containers_with_discardable_data--;
@@ -125,18 +132,24 @@ NS_IMETHODIMP imgContainer::Init(PRInt32
   }
 
   mSize.SizeTo(aWidth, aHeight);
   
   // As we are reloading it means we are no longer in 'discarded' state
   mDiscarded = PR_FALSE;
 
   mObserver = do_GetWeakReference(aObserver);
-  
-  return NS_OK;
+
+  // Register suspension observer
+  nsresult rv;
+  nsCOMPtr<nsIObserverService> os = do_GetService("@mozilla.org/observer-service;1", &rv);
+  if (NS_SUCCEEDED(rv))
+    rv = os->AddObserver(this, "animation-suspension", PR_TRUE);
+
+  return rv;
 }
 
 //******************************************************************************
 /* [noscript] imgIContainer extractCurrentFrame([const] in nsIntRect aRegion); */
 NS_IMETHODIMP imgContainer::ExtractCurrentFrame(const nsIntRect &aRegion, imgIContainer **_retval)
 {
   NS_ENSURE_ARG_POINTER(_retval);
 
@@ -1864,8 +1877,19 @@ imgContainer::ReloadImages(void)
   result = decoder->Close();
   NS_ENSURE_SUCCESS(result, result);
 
   NS_ASSERTION(PRInt32(mFrames.Length()) == mNumFrames,
                "imgContainer::ReloadImages(): the restored mFrames.Length() doesn't match mNumFrames!");
 
   return result;
 }
+
+NS_IMETHODIMP imgContainer::Observe(nsISupports *aSubject, const char *aTopic, const PRUnichar *aData)
+{
+  // set animation mode to kDontAnimMode if suspension is enabled, otherwise set it to kNormalAnimMode
+  if (!strcmp(aTopic, "animation-suspension")) {
+    PRUint16 mode = NS_ConvertUTF16toUTF8(aData).Equals("true") ? imgIContainer::kDontAnimMode
+                                                                : imgIContainer::kNormalAnimMode;
+    return SetAnimationMode(mode);
+  }
+  return NS_OK;
+}
diff -U 8 -r -p mozilla.orig/modules/libpr0n/src/imgContainer.h mozilla/modules/libpr0n/src/imgContainer.h
--- mozilla.orig/modules/libpr0n/src/imgContainer.h	2010-02-15 12:20:23.000000000 +0200
+++ mozilla/modules/libpr0n/src/imgContainer.h	2010-02-16 09:22:47.000000000 +0200
@@ -55,16 +55,17 @@
 #include "nsCOMArray.h"
 #include "nsCOMPtr.h"
 #include "imgIContainer.h"
 #include "nsIProperties.h"
 #include "nsITimer.h"
 #include "nsWeakReference.h"
 #include "nsTArray.h"
 #include "imgFrame.h"
+#include "nsIObserver.h"
 
 #define NS_IMGCONTAINER_CID \
 { /* c76ff2c1-9bf6-418a-b143-3340c00112f7 */         \
      0x376ff2c1,                                     \
      0x9bf6,                                         \
      0x418a,                                         \
     {0xb1, 0x43, 0x33, 0x40, 0xc0, 0x01, 0x12, 0xf7} \
 }
@@ -128,23 +129,26 @@
  *
  * @note
  * mAnimationMode, mLoopCount and mObserver are not in the mAnim structure
  * because the first two have public setters and the observer we only get
  * in Init().
  */
 class imgContainer : public imgIContainer, 
                      public nsITimerCallback, 
-                     public nsIProperties
+                     public nsIProperties,
+                     public nsIObserver,
+                     public nsSupportsWeakReference
 {
 public:
   NS_DECL_ISUPPORTS
   NS_DECL_IMGICONTAINER
   NS_DECL_NSITIMERCALLBACK
   NS_DECL_NSIPROPERTIES
+  NS_DECL_NSIOBSERVER
 
   imgContainer();
   virtual ~imgContainer();
 
 private:
   struct Anim
   {
     //! Area of the first frame that needs to be redrawn on subsequent loops.

diff -r ae288ef4f960 layout/generic/nsObjectFrame.cpp
--- a/layout/generic/nsObjectFrame.cpp	Tue Dec 01 14:43:52 2009 +0200
+++ b/layout/generic/nsObjectFrame.cpp	Tue Dec 01 16:38:41 2009 +0200
@@ -622,6 +622,11 @@ private:
   void NativeImageDraw(nsPluginRect* invalidRect = nsnull);
   PRBool UpdateVisibility();
 
+  nsresult NativeImageDrawMicrob(gfxContext *aContext,
+                                 nsPluginWindow* mWindow,
+                                 const nsIntSize& mPluginSize,
+                                 const nsIntRect& mDirtyRect);
+  PRBool mPaintWithMicrobImageDraw;
 #endif
 };
 
@@ -2542,6 +2547,8 @@ nsPluginInstanceOwner::nsPluginInstanceO
   mXlibSurfGC = None;
   mSharedXImage = nsnull;
   mSharedSegmentInfo.shmaddr = nsnull;
+  mPaintWithMicrobImageDraw =
+    nsContentUtils::GetBoolPref("plugins.microb_image_draw", PR_TRUE);
 #endif
   PR_LOG(nsObjectFrameLM, PR_LOG_DEBUG,
          ("nsPluginInstanceOwner %p created\n", this));
@@ -4945,7 +4952,7 @@ void nsPluginInstanceOwner::Paint(gfxCon
   mInstance->GetValue(nsPluginInstanceVariable_WindowlessLocalBool,
                       &simpleImageRender);
 
-  if (simpleImageRender) {
+  if (simpleImageRender && !mPaintWithMicrobImageDraw) {
     gfxMatrix matrix = aContext->CurrentMatrix();
     if (!matrix.HasNonAxisAlignedTransform())
       NativeImageDraw();
@@ -5006,6 +5013,13 @@ void nsPluginInstanceOwner::Paint(gfxCon
   gfxContextAutoSaveRestore autoSR(aContext);
   aContext->Translate(pluginRect.pos);
 
+#ifdef MOZ_PLATFORM_HILDON
+  if (simpleImageRender && mPaintWithMicrobImageDraw) {
+    NativeImageDrawMicrob(aContext, window, pluginSize, pluginDirtyRect);
+    return;
+  }
+#endif
+
   Renderer renderer(window, mInstance, pluginSize, pluginDirtyRect);
   renderer.Draw(aContext, window->width, window->height,
                 rendererFlags, nsnull);
@@ -5315,6 +5329,128 @@ nsPluginInstanceOwner::NativeImageDraw(n
 }
 #endif
 
+#ifdef MOZ_PLATFORM_HILDON
+
+// NativeImageDraw, MicroB browser version
+nsresult
+nsPluginInstanceOwner::NativeImageDrawMicrob(gfxContext *aContext,
+                                             nsPluginWindow* mWindow,
+                                             const nsIntSize& mPluginSize,
+                                             const nsIntRect& mDirtyRect)
+{
+  PRBool doupdatewindow = PR_FALSE;
+
+  if (mWindow->x || mWindow->y) {
+    mWindow->x = 0;
+    mWindow->y = 0;
+    doupdatewindow = PR_TRUE;
+  }
+
+  if (nsIntSize(mWindow->width, mWindow->height) != mPluginSize) {
+    mWindow->width = mPluginSize.width;
+    mWindow->height = mPluginSize.height;
+    doupdatewindow = PR_TRUE;
+  }
+
+  // The clip rect is relative to drawable top-left.
+  nsIntRect clipRect;
+  clipRect.x = 0;
+  clipRect.y = 0;
+  clipRect.width  = mWindow->width;
+  clipRect.height = mWindow->height;
+
+  nsPluginRect newClipRect;
+  newClipRect.left = clipRect.x;
+  newClipRect.top = clipRect.y;
+  newClipRect.right = clipRect.XMost();
+  newClipRect.bottom = clipRect.YMost();
+  if (mWindow->clipRect.left    != newClipRect.left   ||
+      mWindow->clipRect.top     != newClipRect.top    ||
+      mWindow->clipRect.right   != newClipRect.right  ||
+      mWindow->clipRect.bottom  != newClipRect.bottom) {
+    mWindow->clipRect = newClipRect;
+    doupdatewindow = PR_TRUE;
+  }
+
+  nsRefPtr<gfxImageSurface> surface = static_cast<gfxImageSurface*>(aContext->OriginalSurface());
+  NS_ENSURE_TRUE(surface, NS_ERROR_OUT_OF_MEMORY);
+
+  PRUint32 surfaceDepth = 24;
+#ifdef MICROB_API_16BPP_SUPPORT
+  if (surface->Format() == gfxASurface::ImageFormatRGB16)
+    surfaceDepth = 16;
+#endif
+  if (surface->Format() == gfxASurface::ImageFormatARGB32)
+    surfaceDepth = 32;
+
+  NPSetWindowCallbackStruct* ws_info =
+    static_cast<NPSetWindowCallbackStruct*>(mWindow->ws_info);
+  ws_info->visual = 0;
+  ws_info->colormap = 0;
+  if (ws_info->depth != surfaceDepth) {
+    ws_info->depth = surfaceDepth;
+    doupdatewindow = PR_TRUE;
+  }
+
+  if (doupdatewindow)
+    mInstance->SetWindow(mWindow);
+
+  // Until we don't have agreement about how to pass NPImageExpose structure to plugin
+  // it will be packed into XEvent.xgraphicsexpose.drawable member
+  // Probably we have to use something like HandleEvent2 API. see bug 477456 in BMO
+  // Translate the dirty rect to drawable coordinates.
+  nsIntRect dirtyRect = mDirtyRect;
+  // Intersect the dirty rect with the clip rect to ensure that it lies within
+  // the drawable.
+  if (!dirtyRect.IntersectRect(dirtyRect, clipRect))
+    return NS_OK;
+
+  nsPluginEvent pluginEvent;
+  NPImageExpose imageExpose;
+  XGraphicsExposeEvent& exposeEvent = pluginEvent.event.xgraphicsexpose;
+  // set the drawing info
+  exposeEvent.type = GraphicsExpose;
+  exposeEvent.display = 0;
+  // Store imageExpose structure pointer as drawable member
+  exposeEvent.drawable = (Drawable)&imageExpose;
+  exposeEvent.x = mDirtyRect.x;
+  exposeEvent.y = mDirtyRect.y;
+  exposeEvent.width = mDirtyRect.width;
+  exposeEvent.height = mDirtyRect.height;
+  exposeEvent.count = 0;
+  // information not set:
+  exposeEvent.serial = 0;
+  exposeEvent.send_event = False;
+  exposeEvent.major_code = 0;
+  exposeEvent.minor_code = 0;
+
+  // Calculate src buffer pointer according to translation
+  // and set it as drawable member
+  gfxMatrix matr = aContext->CurrentMatrix();
+  gfxPoint pt = matr.GetTranslation();
+  imageExpose.depth = surfaceDepth;
+  imageExpose.x = mDirtyRect.x;
+  imageExpose.y = mDirtyRect.y;
+  imageExpose.width = mDirtyRect.width;
+  imageExpose.height = mDirtyRect.height;
+  // Setup temporary context scaled size
+  imageExpose.stride = surface->Stride();
+  imageExpose.data = (char *)surface->Data();
+  imageExpose.dataSize.width = surface->Width();
+  imageExpose.dataSize.height = surface->Height();
+  imageExpose.translateX = pt.x;
+  imageExpose.translateY = pt.y;
+  imageExpose.scaleX = matr.xx;
+  imageExpose.scaleY = matr.yy;
+  PRBool eventHandled = PR_FALSE;
+  // Get Image surface from original context
+  // Draw plugin content to temp surface
+  mInstance->HandleEvent(&pluginEvent, &eventHandled);
+  return NS_OK;
+}
+#endif
+
+
 #if defined(MOZ_WIDGET_GTK2)
 nsresult
 nsPluginInstanceOwner::Renderer::NativeDraw(GdkDrawable * drawable, 
diff -r c52206427109 layout/generic/nsObjectFrame.cpp
--- a/layout/generic/nsObjectFrame.cpp	Tue Dec 01 17:51:28 2009 +0200
+++ b/layout/generic/nsObjectFrame.cpp	Tue Dec 01 17:52:18 2009 +0200
@@ -2856,7 +2856,7 @@ NS_IMETHODIMP nsPluginInstanceOwner::Inv
   PRBool simpleImageRender = PR_FALSE;
   mInstance->GetValue(nsPluginInstanceVariable_WindowlessLocalBool,
                       &simpleImageRender);
-  if (simpleImageRender) {  
+  if (simpleImageRender && !mPaintWithMicrobImageDraw) {
     NativeImageDraw(invalidRect);
     return NS_OK;
   }

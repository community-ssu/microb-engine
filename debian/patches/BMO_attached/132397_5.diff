diff -r aa475628210a content/base/public/nsISelection2.idl
--- a/content/base/public/nsISelection2.idl	Mon Sep 07 16:02:48 2009 +0300
+++ b/content/base/public/nsISelection2.idl	Mon Sep 14 17:03:01 2009 +0300
@@ -36,24 +36,25 @@
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "nsISelection.idl"
 
 interface nsIDOMNode;
 interface nsIDOMRange;
+interface nsIDOMClientRect;
 
 %{C++
 #include "nsCOMArray.h"
 %}
 
 [ptr] native RangeArray(nsCOMArray<nsIDOMRange>);
 
-[scriptable, uuid(5d21d5fe-3691-4716-a334-4691eea54d29)]
+[scriptable, uuid(b2240231-9c14-4efe-bedb-cd69bae9f77d)]
 interface nsISelection2 : nsISelection
 {
   /**
    * Returns the type of the selection (see nsISelectionController for
    * available constants).
    */
   readonly attribute short type;
 
@@ -102,10 +103,20 @@ interface nsISelection2 : nsISelection
    *                    "aHPercent" across the visible area. A value of 50
    *                    centers the frame horizontally . A value of -1 means
    *                    move the frame the minimum amount necessary in order
    *                    for the entire frame to be visible horizontally
    *                    (if possible).
    */
   void scrollIntoView(in short aRegion, in boolean aIsSynchronous,
                       in short aVPercent, in short aHPercent);
+
+  /**
+   * Return rectangle of finder caret.
+   */
+  readonly attribute nsIDOMClientRect caretRect;
+
+  /**
+   * Whether to scroll to found result. Default is true.
+   */
+  attribute boolean doScroll;
 };
 
diff -r aa475628210a docshell/base/nsDocShell.cpp
--- a/docshell/base/nsDocShell.cpp	Mon Sep 07 16:02:48 2009 +0300
+++ b/docshell/base/nsDocShell.cpp	Mon Sep 14 17:03:01 2009 +0300
@@ -914,17 +914,18 @@ NS_IMETHODIMP nsDocShell::GetInterface(c
             GetSessionHistory(getter_AddRefs(shistory));
         if (NS_SUCCEEDED(rv) && shistory) {
             *aSink = shistory;
             NS_ADDREF((nsISupports *) * aSink);
             return NS_OK;
         }
         return NS_NOINTERFACE;
     }
-    else if (aIID.Equals(NS_GET_IID(nsIWebBrowserFind))) {
+    else if (aIID.Equals(NS_GET_IID(nsIWebBrowserFind)) ||
+             aIID.Equals(NS_GET_IID(nsIWebBrowserFind2))) {
         nsresult rv = EnsureFind();
         if (NS_FAILED(rv)) return rv;
 
         *aSink = mFind;
         NS_ADDREF((nsISupports*)*aSink);
         return NS_OK;
     }
     else if (aIID.Equals(NS_GET_IID(nsIEditingSession)) && NS_SUCCEEDED(EnsureEditorData())) {
diff -r aa475628210a docshell/base/nsDocShell.h
--- a/docshell/base/nsDocShell.h	Mon Sep 07 16:02:48 2009 +0300
+++ b/docshell/base/nsDocShell.h	Mon Sep 14 17:03:01 2009 +0300
@@ -96,17 +96,17 @@
 #include "nsISupportsArray.h"
 #include "nsIWebNavigation.h"
 #include "nsIWebPageDescriptor.h"
 #include "nsIWebProgressListener.h"
 #include "nsISHContainer.h"
 #include "nsIDocShellLoadInfo.h"
 #include "nsIDocShellHistory.h"
 #include "nsIURIFixup.h"
-#include "nsIWebBrowserFind.h"
+#include "nsIWebBrowserFind2.h"
 #include "nsIHttpChannel.h"
 #include "nsDocShellTransferableHooks.h"
 #include "nsIAuthPromptProvider.h"
 #include "nsISecureBrowserUI.h"
 #include "nsIObserver.h"
 #include "nsDocShellLoadTypes.h"
 #include "nsPIDOMEventTarget.h"
 #include "nsIURIClassifier.h"
diff -r aa475628210a embedding/components/find/public/Makefile.in
--- a/embedding/components/find/public/Makefile.in	Mon Sep 07 16:02:48 2009 +0300
+++ b/embedding/components/find/public/Makefile.in	Mon Sep 14 17:03:01 2009 +0300
@@ -41,14 +41,15 @@ srcdir		= @srcdir@
 VPATH		= @srcdir@
 
 include $(DEPTH)/config/autoconf.mk
 
 MODULE		= find
 XPIDL_MODULE	= find
 
 SDK_XPIDLSRCS   = nsIWebBrowserFind.idl \
+                  nsIWebBrowserFind2.idl \
 		  $(NULL)
 XPIDLSRCS	= nsIFind.idl \
                   $(NULL)
 
 include $(topsrcdir)/config/rules.mk
 
diff -r aa475628210a embedding/components/find/public/nsIWebBrowserFind2.idl
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/embedding/components/find/public/nsIWebBrowserFind2.idl	Mon Sep 14 17:03:01 2009 +0300
@@ -0,0 +1,69 @@
+/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is mozilla.org code.
+ *
+ * The Initial Developer of the Original Code is Nokia.
+ * Portions created by the Initial Developer are Copyright (C) 2009
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Egor Starkov <starkov.egor@gmail.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+ 
+#include "nsISupports.idl"
+
+#include "nsIWebBrowserFind.idl"
+
+/* THIS IS A PUBLIC EMBEDDING API */
+
+/**
+ * nsIWebBrowserFind2
+ *
+ * Searches for text in a web browser, gives more functionality than nsIWebBrowserFind
+ *
+ * Get one by doing a GetInterface on an nsIWebBrowser.
+ *
+ * By default, the implementation will search the focussed frame, or
+ * if there is no focussed frame, the web browser content area. It
+ * does not by default search subframes or iframes. To change this
+ * behaviour, and to explicitly set the frame to search, 
+ * QueryInterface to nsIWebBrowserFindInFrames.
+ *
+ */
+
+[scriptable, uuid(6ea7db5f-a217-4702-8138-b70234cc71ca)]
+interface nsIWebBrowserFind2 : nsIWebBrowserFind
+{
+  /**
+   * currentFrame
+   *
+   * Frame at which search was finished if success, otherwise null
+   */
+  readonly attribute nsIDOMWindow currentFrame;
+};
+
diff -r aa475628210a embedding/components/find/src/nsWebBrowserFind.cpp
--- a/embedding/components/find/src/nsWebBrowserFind.cpp	Mon Sep 07 16:02:48 2009 +0300
+++ b/embedding/components/find/src/nsWebBrowserFind.cpp	Mon Sep 14 17:03:01 2009 +0300
@@ -101,17 +101,17 @@ nsWebBrowserFind::nsWebBrowserFind() :
     mSearchParentFrames(PR_TRUE)
 {
 }
 
 nsWebBrowserFind::~nsWebBrowserFind()
 {
 }
 
-NS_IMPL_ISUPPORTS2(nsWebBrowserFind, nsIWebBrowserFind, nsIWebBrowserFindInFrames)
+NS_IMPL_ISUPPORTS3(nsWebBrowserFind, nsIWebBrowserFind, nsIWebBrowserFind2, nsIWebBrowserFindInFrames)
 
 
 /* boolean findNext (); */
 NS_IMETHODIMP nsWebBrowserFind::FindNext(PRBool *outDidFind)
 {
     NS_ENSURE_ARG_POINTER(outDidFind);
     *outDidFind = PR_FALSE;
 
@@ -920,8 +920,15 @@ nsIDocShell *
 nsWebBrowserFind::GetDocShellFromWindow(nsIDOMWindow *inWindow)
 {
     nsCOMPtr<nsPIDOMWindow> window(do_QueryInterface(inWindow));
     if (!window) return nsnull;
 
     return window->GetDocShell();
 }
 
+NS_IMETHODIMP
+nsWebBrowserFind::GetCurrentFrame(nsIDOMWindow * *aCurrentFrame)
+{
+    nsCOMPtr<nsIDOMWindow> searchFrame = do_QueryReferent(mCurrentSearchFrame);
+    NS_IF_ADDREF(*aCurrentFrame = searchFrame);
+    return NS_OK;
+}
diff -r aa475628210a embedding/components/find/src/nsWebBrowserFind.h
--- a/embedding/components/find/src/nsWebBrowserFind.h	Mon Sep 07 16:02:48 2009 +0300
+++ b/embedding/components/find/src/nsWebBrowserFind.h	Mon Sep 14 17:03:01 2009 +0300
@@ -37,17 +37,17 @@
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #ifndef nsWebBrowserFindImpl_h__
 #define nsWebBrowserFindImpl_h__
 
-#include "nsIWebBrowserFind.h"
+#include "nsIWebBrowserFind2.h"
 
 #include "nsCOMPtr.h"
 #include "nsWeakReference.h"
 
 #include "nsIFind.h"
 
 #include "nsString.h"
 
@@ -60,29 +60,32 @@ class nsISelection;
 class nsIDOMWindow;
 
 class nsIDocShell;
 
 //*****************************************************************************
 // class nsWebBrowserFind
 //*****************************************************************************   
 
-class nsWebBrowserFind  : public nsIWebBrowserFind,
+class nsWebBrowserFind  : public nsIWebBrowserFind2,
                           public nsIWebBrowserFindInFrames
 {
 public:
                 nsWebBrowserFind();
     virtual     ~nsWebBrowserFind();
     
     // nsISupports
     NS_DECL_ISUPPORTS
     
     // nsIWebBrowserFind
     NS_DECL_NSIWEBBROWSERFIND
-                
+
+    // nsIWebBrowserFind2
+    NS_DECL_NSIWEBBROWSERFIND2
+
     // nsIWebBrowserFindInFrames
     NS_DECL_NSIWEBBROWSERFINDINFRAMES
 
 
 protected:
      
     PRBool      CanFindNext()
                 { return mSearchString.Length() != 0; }
diff -r aa475628210a layout/generic/nsSelection.cpp
--- a/layout/generic/nsSelection.cpp	Mon Sep 07 16:02:48 2009 +0300
+++ b/layout/generic/nsSelection.cpp	Mon Sep 14 17:03:01 2009 +0300
@@ -101,16 +101,17 @@ static NS_DEFINE_CID(kFrameTraversalCID,
 // notifications
 #include "nsIDOMDocument.h"
 #include "nsIDocument.h"
 
 #include "nsISelectionController.h"//for the enums
 #include "nsAutoCopyListener.h"
 #include "nsCopySupport.h"
 #include "nsIClipboard.h"
+#include "nsClientRect.h"
 
 #ifdef IBMBIDI
 #include "nsIBidiKeyboard.h"
 #endif // IBMBIDI
 
 //#define DEBUG_TABLE 1
 
 static NS_DEFINE_IID(kCContentIteratorCID, NS_CONTENTITERATOR_CID);
@@ -342,16 +343,18 @@ private:
   nsRefPtr<nsFrameSelection> mFrameSelection;
   nsWeakPtr mPresShellWeak;
   nsRefPtr<nsAutoScrollTimer> mAutoScrollTimer;
   nsCOMArray<nsISelectionListener> mSelectionListeners;
   nsRevocableEventPtr<ScrollSelectionIntoViewEvent> mScrollEvent;
   CachedOffsetForFrame *mCachedOffsetForFrame;
   nsDirection mDirection;
   SelectionType mType;
+  nsClientRect mClientRect;
+  PRBool mDoScroll;
 };
 
 // Stack-class to turn on/off selection batching for table selection
 class NS_STACK_CLASS NS_FINAL_CLASS nsSelectionBatcher
 {
 private:
   nsCOMPtr<nsISelectionPrivate> mSelection;
 public:
@@ -3386,24 +3389,26 @@ nsFrameSelection::GetDelayedCaretData()
 // nsTypedSelection implementation
 
 // note: this can return a nil anchor node
 
 nsTypedSelection::nsTypedSelection()
   : mCachedOffsetForFrame(nsnull)
   , mDirection(eDirNext)
   , mType(nsISelectionController::SELECTION_NORMAL)
+  , mDoScroll(PR_TRUE)
 {
 }
 
 nsTypedSelection::nsTypedSelection(nsFrameSelection *aList)
   : mFrameSelection(aList)
   , mCachedOffsetForFrame(nsnull)
   , mDirection(eDirNext)
   , mType(nsISelectionController::SELECTION_NORMAL)
+  , mDoScroll(PR_TRUE)
 {
 }
 
 nsTypedSelection::~nsTypedSelection()
 {
   setAnchorFocusRange(-1);
 
   if (mAutoScrollTimer) {
@@ -5914,16 +5919,17 @@ nsTypedSelection::GetSelectionRegionRect
   else if (aRect->x <= clipRect.x) {
     aRect->x -= pad;
     aRect->width = pad;
   }
   else {
     aRect->width = 60; // Arbitrary
   }
 
+  mClientRect.SetRect(aRect->x, aRect->y, aRect->width, aRect->height);
   return rv;
 }
 
 static void
 ClampPointInsideRect(nsPoint& aPoint, const nsRect& aRect)
 {
   if (aPoint.x < aRect.x)
     aPoint.x = aRect.x;
@@ -6181,16 +6187,19 @@ nsTypedSelection::ScrollIntoView(Selecti
       return result;
 
     //
     // It's ok if we don't have a scrollable view, just return early.
     //
     if (!scrollableView)
       return NS_OK;
 
+    if (!mDoScroll)
+      return NS_OK;
+
     result = ScrollRectIntoView(scrollableView, rect, aVPercent, aHPercent,
                                 PR_TRUE);
   }
   return result;
 }
 
 
 
@@ -6350,16 +6359,37 @@ nsTypedSelection::SelectionLanguageChang
   
   // The caret might have moved, so invalidate the desired X position
   // for future usages of up-arrow or down-arrow
   mFrameSelection->InvalidateDesiredX();
   
   return NS_OK;
 }
 
+NS_IMETHODIMP
+nsTypedSelection::GetCaretRect(nsIDOMClientRect * *aClientRect)
+{
+  nsClientRect* rect = new nsClientRect(mClientRect);
+  if (!rect)
+    return NS_ERROR_OUT_OF_MEMORY;
+  NS_ADDREF(*aClientRect = rect);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+nsTypedSelection::GetDoScroll(PRBool* aDoScroll)
+{
+  *aDoScroll = mDoScroll;
+}
+
+NS_IMETHODIMP
+nsTypedSelection::SetDoScroll(PRBool aDoScroll)
+{
+  mDoScroll = aDoScroll;
+}
 
 // nsAutoCopyListener
 
 nsAutoCopyListener* nsAutoCopyListener::sInstance = nsnull;
 
 NS_IMPL_ISUPPORTS1(nsAutoCopyListener, nsISelectionListener)
 
 /*
diff -r 36370c25fce5 configure.in
--- a/configure.in	Wed Oct 07 20:19:20 2009 +0300
+++ b/configure.in	Wed Oct 07 20:23:14 2009 +0300
@@ -6705,6 +6705,9 @@ if test -n "$_ENABLE_EFENCE"; then
     AC_CHECK_LIB(efence,malloc)
 fi
 
+MICROB_API_FIND2=1
+AC_DEFINE(MICROB_API_FIND2)
+
 dnl ========================================================
 dnl jprof
 dnl ========================================================

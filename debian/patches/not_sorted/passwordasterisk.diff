--- mozilla/editor/idl/nsIEditor.idl.orig	2010-01-20 14:11:25.000000000 +0000
+++ mozilla/editor/idl/nsIEditor.idl	2010-01-20 14:12:05.000000000 +0000
@@ -563,11 +563,13 @@ interface nsIEditor  : nsISupports
   void dumpContentTree();
 
   /** Dumps a text representation of the content tree to standard out */
   void debugDumpContent() ;
 
   /* Run unit tests. Noop in optimized builds */
   void debugUnitTests(out long outNumTests, out long  outNumTestsFailed);
 
   /* checks if a node is read-only or not */
   [notxpcom] boolean isModifiableNode(in nsIDOMNode aNode);
+
+  attribute unsigned long passwordPosition;
 };
--- mozilla/editor/libeditor/text/nsTextEditRules.cpp.orig	2010-01-18 12:28:42.000000000 +0000
+++ mozilla/editor/libeditor/text/nsTextEditRules.cpp	2010-01-21 11:34:40.000000000 +0000
@@ -698,26 +698,41 @@ nsTextEditRules::WillInsertText(PRInt32 
     }
 
     outString->Assign(tString);
   }
 
   if (mFlags & nsIPlaintextEditor::eEditorPasswordMask)
   {
     // manage the password buffer
     mPasswordText.Insert(*outString, start);
 
+    PRUint32 passwordPos = 0;
+    mEditor->GetPasswordPosition(&passwordPos);
+
     nsCOMPtr<nsILookAndFeel> lookAndFeel = do_GetService(kLookAndFeelCID);
     if (lookAndFeel->GetEchoPassword() && 
-        !(mFlags & nsIPlaintextEditor::eEditorDontEchoPassword)) {
+        (!(mFlags & nsIPlaintextEditor::eEditorDontEchoPassword) || passwordPos)) {
       HideLastPWInput();
       mLastStart = start;
       mLastLength = outString->Length();
+  
+      if (passwordPos) {
+        nsAutoString hiddenText;
+        FillBufWithPWChars(&hiddenText, mLastLength);
+
+        hiddenText.Replace(passwordPos-1, 1, outString->CharAt(passwordPos-1));
+        mEditor->SetPasswordPosition(0);
+
+        outString->Assign(hiddenText);
+        outString->SetLength(mLastLength);
+      }
+
       if (mTimer)
       {
         mTimer->Cancel();
       }
       else
       {
         mTimer = do_CreateInstance("@mozilla.org/timer;1", &res);
         if (NS_FAILED(res)) return res;
       }
       mTimer->InitWithCallback(this, 600, nsITimer::TYPE_ONE_SHOT);
--- mozilla/editor/libeditor/text/nsPlaintextEditor.h.orig	2010-01-20 15:58:37.000000000 +0000
+++ mozilla/editor/libeditor/text/nsPlaintextEditor.h	2010-01-20 15:58:41.000000000 +0000
@@ -167,20 +167,23 @@ public:
                         PRBool aDoDeleteSelection);
 
   /**
    * Extends the selection for given deletion operation
    * If done, also update aAction to what's actually left to do after the
    * extension.
    */
   nsresult ExtendSelectionForDelete(nsISelection* aSelection,
                                     nsIEditor::EDirection *aAction);
 
+  nsresult GetPasswordPosition(PRUint32 *aPasswordPosition);
+  nsresult SetPasswordPosition(PRUint32 aPasswordPosition);
+
 protected:
 
   NS_IMETHOD  InitRules();
   void        BeginEditorInit();
   nsresult    EndEditorInit();
 
   // Create the event listeners for the editor to install.
   virtual nsresult CreateEventListeners();
 
   // Helpers for output routines
@@ -225,20 +228,21 @@ protected:
 // Data members
 protected:
 
   nsCOMPtr<nsIEditRules>        mRules;
   PRBool  mWrapToWindow;
   PRInt32 mWrapColumn;
   PRInt32 mMaxTextLength;
   PRInt32 mInitTriggerCounter;
   PRInt32 mNewlineHandling;
   PRInt32 mCaretStyle;
+  PRInt32 mPasswordPosition;
 
 // friends
 friend class nsHTMLEditRules;
 friend class nsTextEditRules;
 friend class nsAutoEditInitRulesTrigger;
 
 };
 
 #endif //nsPlaintextEditor_h__
 
--- mozilla/editor/libeditor/text/nsPlaintextEditor.cpp.orig	2010-01-20 15:57:43.000000000 +0000
+++ mozilla/editor/libeditor/text/nsPlaintextEditor.cpp	2010-01-20 15:58:16.000000000 +0000
@@ -95,20 +95,21 @@ nsPlaintextEditor::nsPlaintextEditor()
 , mWrapToWindow(PR_FALSE)
 , mWrapColumn(0)
 , mMaxTextLength(-1)
 , mInitTriggerCounter(0)
 , mNewlineHandling(nsIPlaintextEditor::eNewlinesPasteToFirst)
 #ifdef XP_WIN
 , mCaretStyle(1)
 #else
 , mCaretStyle(0)
 #endif
+, mPasswordPosition(0)
 {
 } 
 
 nsPlaintextEditor::~nsPlaintextEditor()
 {
   // remove the rules as an action listener.  Else we get a bad ownership loop later on.
   // it's ok if the rules aren't a listener; we ignore the error.
   nsCOMPtr<nsIEditActionListener> mListener = do_QueryInterface(mRules);
   RemoveEditActionListener(mListener);
   
@@ -1830,10 +1831,27 @@ nsPlaintextEditor::SetAttributeOrEquival
   return nsEditor::SetAttribute(aElement, aAttribute, aValue);
 }
 
 nsresult
 nsPlaintextEditor::RemoveAttributeOrEquivalent(nsIDOMElement * aElement,
                                                const nsAString & aAttribute,
                                                PRBool aSuppressTransaction)
 {
   return nsEditor::RemoveAttribute(aElement, aAttribute);
 }
+
+/* attribute unsigned long passwordPosition; */
+NS_IMETHODIMP
+nsPlaintextEditor::GetPasswordPosition(PRUint32 *aPasswordPosition)
+{
+  NS_ENSURE_ARG_POINTER(aPasswordPosition);
+  *aPasswordPosition = mPasswordPosition;
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+nsPlaintextEditor::SetPasswordPosition(PRUint32 aPasswordPosition)
+{
+  mPasswordPosition = aPasswordPosition;
+  return NS_OK;
+}
+
--- mozilla/editor/libeditor/base/nsEditor.cpp.orig	2010-01-20 14:51:09.000000000 +0000
+++ mozilla/editor/libeditor/base/nsEditor.cpp	2010-01-20 15:34:17.000000000 +0000
@@ -5357,10 +5357,23 @@ nsEditor::DumpNode(nsIDOMNode *aNode, PR
     printf("<textnode> %s\n", cstr.get());
   }
 }
 #endif
 
 PRBool
 nsEditor::IsModifiableNode(nsIDOMNode *aNode)
 {
   return PR_TRUE;
 }
+
+nsresult
+nsEditor::GetPasswordPosition(PRUint32 *aPasswordPosition)
+{
+  return NS_ERROR_NOT_IMPLEMENTED;
+}
+
+nsresult
+nsEditor::SetPasswordPosition(PRUint32 aPasswordPosition)
+{
+  return NS_ERROR_NOT_IMPLEMENTED;
+}
+

Index: mozilla/modules/libpr0n/decoders/jpeg/nsJPEGDecoder.cpp
===================================================================
--- mozilla.orig/modules/libpr0n/decoders/jpeg/nsJPEGDecoder.cpp
+++ mozilla/modules/libpr0n/decoders/jpeg/nsJPEGDecoder.cpp
@@ -50,16 +50,25 @@
 #include "ImageLogging.h"
 #include "nsIInterfaceRequestorUtils.h"
 #include "gfxColor.h"
 
 #include "jerror.h"
 
 #include "gfxPlatform.h"
 
+#ifdef MAEMO_CHANGES
+#include "nsIServiceManager.h"
+#include "nsIPrefBranch2.h"
+#include "nsIPrefService.h"
+
+#define IMAGE_DIMENSION_DELIMITER_PREF      "image.dimension.delimiter"
+#define IMAGE_DIMENSION_DELIMITER_DEFAULT   8
+#endif
+
 extern "C" {
 #include "iccjpeg.h"
 
 /* Colorspace conversion (copied from jpegint.h) */
 struct jpeg_color_deconverter {
   JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
   JMETHOD(void, color_convert, (j_decompress_ptr cinfo,
 				JSAMPIMAGE input_buf, JDIMENSION input_row,
@@ -110,17 +119,19 @@ nsJPEGDecoder::nsJPEGDecoder()
   mSegment = nsnull;
   mSegmentLen = 0;
 
   mBackBuffer = nsnull;
   mBackBufferLen = mBackBufferSize = mBackBufferUnreadLen = 0;
 
   mInProfile = nsnull;
   mTransform = nsnull;
-
+#ifdef MAEMO_CHANGES
+  mImagePixLimit = 0;
+#endif
   PR_LOG(gJPEGDecoderAccountingLog, PR_LOG_DEBUG,
          ("nsJPEGDecoder::nsJPEGDecoder: Creating JPEG decoder %p",
           this));
 }
 
 nsJPEGDecoder::~nsJPEGDecoder()
 {
   PR_FREEIF(mBackBuffer);
@@ -135,16 +146,33 @@ nsJPEGDecoder::~nsJPEGDecoder()
 }
 
 
 /** imgIDecoder methods **/
 
 /* void init (in imgILoad aLoad); */
 NS_IMETHODIMP nsJPEGDecoder::Init(imgILoad *aLoad)
 {
+#ifdef MAEMO_CHANGES
+  /* Get image pix size delimiter */
+  nsresult rv;
+  nsCOMPtr<nsIPrefBranch2> prefs = do_GetService(NS_PREFSERVICE_CONTRACTID, &rv);
+  PRUint64 memSize = PR_GetPhysicalMemorySize();
+  if (NS_SUCCEEDED(rv) && memSize != 0) {
+    PRInt32 prefVal = -1;
+    rv = prefs->GetIntPref(IMAGE_DIMENSION_DELIMITER_PREF, &prefVal);
+    if (NS_SUCCEEDED(rv)) {
+      if (prefVal == -1)
+        mImagePixLimit = memSize / (PRUint64)IMAGE_DIMENSION_DELIMITER_DEFAULT;
+      else if (prefVal > 0)
+        mImagePixLimit = memSize / (PRUint64)prefVal;
+    }
+  }
+#endif
+
   mImageLoad = aLoad;
   mObserver = do_QueryInterface(aLoad);
 
   /* We set up the normal JPEG error routines, then override error_exit. */
   mInfo.err = jpeg_std_error(&mErr.pub);
   /*   mInfo.err = jpeg_std_error(&mErr.pub); */
   mErr.pub.error_exit = my_error_exit;
   /* Establish the setjmp return context for my_error_exit to use. */
@@ -464,16 +492,24 @@ nsresult nsJPEGDecoder::ProcessData(cons
     mImage->GetHeight(&height);
     if (width == 0 && height == 0) {
       mImage->Init(mInfo.image_width, mInfo.image_height, mObserver);
     } else if ((width != (PRInt32)mInfo.image_width) || (height != (PRInt32)mInfo.image_height)) {
       mState = JPEG_ERROR;
       return NS_ERROR_UNEXPECTED;
     }
 
+#ifdef MAEMO_CHANGES
+    /* limit image dimensions */
+    if (mImagePixLimit > 0 && width * height > mImagePixLimit) {
+      mState = JPEG_ERROR;
+      return NS_ERROR_UNEXPECTED;
+    }
+#endif
+
     mImage->Init(mInfo.image_width, mInfo.image_height, mObserver);
 
     mObserver->OnStartContainer(nsnull, mImage);
 
     // Use EnsureCleanFrame so we don't create a new frame if we're being
     // reused for e.g. multipart/x-replace
     PRUint32 imagelength;
     if (NS_FAILED(mImage->EnsureCleanFrame(0, 0, 0, mInfo.image_width, mInfo.image_height,
Index: mozilla/modules/libpr0n/decoders/jpeg/nsJPEGDecoder.h
===================================================================
--- mozilla.orig/modules/libpr0n/decoders/jpeg/nsJPEGDecoder.h
+++ mozilla/modules/libpr0n/decoders/jpeg/nsJPEGDecoder.h
@@ -46,16 +46,20 @@
 
 #include "imgIContainer.h"
 #include "imgIDecoderObserver.h"
 #include "imgILoad.h"
 #include "nsIInputStream.h"
 #include "nsIPipe.h"
 #include "qcms.h"
 
+#if(MOZ_PLATFORM_MAEMO == 5)
+#define MAEMO_CHANGES
+#endif
+
 extern "C" {
 #include "jpeglib.h"
 }
 
 #include <setjmp.h>
 
 #define NS_JPEGDECODER_CID \
 { /* 5871a422-1dd2-11b2-ab3f-e2e56be5da9c */         \
@@ -120,11 +124,14 @@ public:
 
   JOCTET  *mProfile;
   PRUint32 mProfileLength;
 
   qcms_profile *mInProfile;
   qcms_transform *mTransform;
 
   PRPackedBool mReading;
+#ifdef MAEMO_CHANGES
+  PRUint64 mImagePixLimit;
+#endif
 };
 
 #endif // nsJPEGDecoder_h__
Index: mozilla/modules/libpr0n/decoders/png/nsPNGDecoder.cpp
===================================================================
--- mozilla.orig/modules/libpr0n/decoders/png/nsPNGDecoder.cpp
+++ mozilla/modules/libpr0n/decoders/png/nsPNGDecoder.cpp
@@ -53,16 +53,25 @@
 #include "gfxColor.h"
 #include "nsColor.h"
 
 #include "nspr.h"
 #include "png.h"
 
 #include "gfxPlatform.h"
 
+#ifdef MAEMO_CHANGES
+#include "nsIServiceManager.h"
+#include "nsIPrefBranch2.h"
+#include "nsIPrefService.h"
+
+#define IMAGE_DIMENSION_DELIMITER_PREF      "image.dimension.delimiter"
+#define IMAGE_DIMENSION_DELIMITER_DEFAULT   8
+#endif
+
 static void PNGAPI info_callback(png_structp png_ptr, png_infop info_ptr);
 static void PNGAPI row_callback(png_structp png_ptr, png_bytep new_row,
                                 png_uint_32 row_num, int pass);
 static void PNGAPI frame_info_callback(png_structp png_ptr,
                                          png_uint_32 frame_num);
 static void PNGAPI end_callback(png_structp png_ptr, png_infop info_ptr);
 static void PNGAPI error_callback(png_structp png_ptr,
                                   png_const_charp error_msg);
@@ -84,16 +93,19 @@ static PRLogModuleInfo *gPNGDecoderAccou
 
 NS_IMPL_ISUPPORTS1(nsPNGDecoder, imgIDecoder)
 
 nsPNGDecoder::nsPNGDecoder() :
   mPNG(nsnull), mInfo(nsnull),
   mCMSLine(nsnull), interlacebuf(nsnull),
   mInProfile(nsnull), mTransform(nsnull),
   mChannels(0), mError(PR_FALSE), mFrameIsHidden(PR_FALSE)
+#ifdef MAEMO_CHANGES
+  , mImagePixLimit(0)
+#endif
 {
 }
 
 nsPNGDecoder::~nsPNGDecoder()
 {
   if (mCMSLine)
     nsMemory::Free(mCMSLine);
   if (interlacebuf)
@@ -230,16 +242,33 @@ NS_IMETHODIMP nsPNGDecoder::Init(imgILoa
         112,  72,  89, 115, '\0',   /* pHYs */
         115,  66,  73,  84, '\0',   /* sBIT */
         115,  80,  76,  84, '\0',   /* sPLT */
         116,  69,  88, 116, '\0',   /* tEXt */
         116,  73,  77,  69, '\0',   /* tIME */
         122,  84,  88, 116, '\0'};  /* zTXt */
 #endif
 
+#ifdef MAEMO_CHANGES
+  /* Get image pix size delimiter */
+  nsresult rv;
+  nsCOMPtr<nsIPrefBranch2> prefs = do_GetService(NS_PREFSERVICE_CONTRACTID, &rv);
+  PRUint64 memSize = PR_GetPhysicalMemorySize();
+  if (NS_SUCCEEDED(rv) && memSize != 0) {
+    PRInt32 prefVal = -1;
+    rv = prefs->GetIntPref(IMAGE_DIMENSION_DELIMITER_PREF, &prefVal);
+    if (NS_SUCCEEDED(rv)) {
+      if (prefVal == -1)
+        mImagePixLimit = memSize / (PRUint64)IMAGE_DIMENSION_DELIMITER_DEFAULT;
+      else if (prefVal > 0)
+        mImagePixLimit = memSize / (PRUint64)prefVal;
+    }
+  }
+#endif
+
   mImageLoad = aLoad;
   mObserver = do_QueryInterface(aLoad);  // we're holding 2 strong refs to the request.
 
   /* do png init stuff */
 
   /* Initialize the container's source image header. */
   /* Always decode to 24 bit pixdepth */
 
@@ -544,16 +573,22 @@ info_callback(png_structp png_ptr, png_i
                &interlace_type, &compression_type, &filter_type);
   
   /* limit image dimensions (bug #251381) */
 #define MOZ_PNG_MAX_DIMENSION 1000000L
   if (width > MOZ_PNG_MAX_DIMENSION || height > MOZ_PNG_MAX_DIMENSION)
     longjmp(decoder->mPNG->jmpbuf, 1);
 #undef MOZ_PNG_MAX_DIMENSION
 
+#ifdef MAEMO_CHANGES
+  /* limit image dimensions */
+  if (decoder->mImagePixLimit > 0 && width * height > decoder->mImagePixLimit)
+    longjmp(decoder->mPNG->jmpbuf, 1);
+#endif
+
   if (color_type == PNG_COLOR_TYPE_PALETTE)
     png_set_expand(png_ptr);
 
   if (color_type == PNG_COLOR_TYPE_GRAY && bit_depth < 8)
     png_set_expand(png_ptr);
 
   if (png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS)) {
     int sample_max = (1 << bit_depth);
Index: mozilla/modules/libpr0n/decoders/png/nsPNGDecoder.h
===================================================================
--- mozilla.orig/modules/libpr0n/decoders/png/nsPNGDecoder.h
+++ mozilla/modules/libpr0n/decoders/png/nsPNGDecoder.h
@@ -48,16 +48,20 @@
 #include "gfxASurface.h"
 
 #include "nsCOMPtr.h"
 
 #include "png.h"
 
 #include "qcms.h"
 
+#if(MOZ_PLATFORM_MAEMO == 5)
+#define MAEMO_CHANGES
+#endif
+
 #define NS_PNGDECODER_CID \
 { /* 36fa00c2-1dd2-11b2-be07-d16eeb4c50ed */         \
      0x36fa00c2,                                     \
      0x1dd2,                                         \
      0x11b2,                                         \
     {0xbe, 0x07, 0xd1, 0x6e, 0xeb, 0x4c, 0x50, 0xed} \
 }
 
@@ -91,11 +95,14 @@ public:
   qcms_profile *mInProfile;
   qcms_transform *mTransform;
 
   gfxASurface::gfxImageFormat format;
   PRUint8 mChannels;
   PRPackedBool mError;
   PRPackedBool mFrameHasNoAlpha;
   PRPackedBool mFrameIsHidden;
+#ifdef MAEMO_CHANGES
+  PRUint64 mImagePixLimit;
+#endif
 };
 
 #endif // nsPNGDecoder_h__
